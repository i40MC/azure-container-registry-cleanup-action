{
  "version": 3,
  "file": "index.js",
  "mappingsvTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzxhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxlvyrtxvyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpripDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpzlnppfvwrtEA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtjBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1EA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpxxjjtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACltBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdzhjfhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvhxuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrxrjKA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChtjTA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpBA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA",
  "sources": [
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./lib/main.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/core/lib/command.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/core/lib/core.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/core/lib/file-command.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/core/lib/oidc-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/core/lib/utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/http-client/auth.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/http-client/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@actions/http-client/proxy.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/abort-controller/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/container-registry/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-auth/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@azure/core-rest-pipeline/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@azure/core-tracing/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/api/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/api/diag.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/api/propagation.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/api/trace.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/baggage/Baggage.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/baggage/Entry.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/baggage/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/baggage/internal/baggage.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/common/Exception.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/common/Time.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/context/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/context/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/diag/consoleLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/diag/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/diag/internal/logLevelLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/diag/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/internal/global-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/internal/semver.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/platform/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/platform/node/globalThis.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/platform/node/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/Event.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/Sampler.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/TimedEvent.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/attributes.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/link.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/link_context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/span.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/span_context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/span_kind.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/status.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/trace_state.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/tracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-client/node_modules/@opentelemetry/api/build/src/version.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-paging/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/api/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/api/diag.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/api/propagation.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/api/trace.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/baggage/context-helpers.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/baggage/internal/baggage-impl.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/baggage/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/baggage/utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/common/Exception.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/common/Time.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/context/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/context/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/diag/ComponentLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/diag/consoleLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/diag/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/diag/internal/logLevelLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/diag/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/internal/global-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/internal/semver.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/platform/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/platform/node/globalThis.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/platform/node/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/NonRecordingSpan.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/Sampler.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/attributes.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/context-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/link.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/span.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/span_context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/span_kind.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/status.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/trace_flags.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/trace_state.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/tracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-rest-pipeline/node_modules/@opentelemetry/api/build/src/version.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-tracing/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/core-util/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/node_modules/@azure/core-client/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/node_modules/@azure/core-client/node_modules/@azure/core-rest-pipeline/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/node_modules/@azure/msal-common/dist/index.cjs.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/node_modules/form-data/lib/form_data.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/identity/node_modules/form-data/lib/populate.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/logger/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/msal-common/dist/index.cjs.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/msal-node/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/msal-node/dist/msal-node.cjs.development.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@azure/msal-node/dist/msal-node.cjs.production.min.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/api/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/api/diag.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/api/propagation.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/api/trace.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/baggage/context-helpers.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/baggage/internal/baggage-impl.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/baggage/internal/symbol.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/baggage/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/baggage/utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/common/Exception.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/common/Time.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/context/NoopContextManager.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/context/context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/context/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/diag/ComponentLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/diag/consoleLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/diag/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/diag/internal/logLevelLogger.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/diag/types.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/internal/global-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/internal/semver.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/platform/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/platform/node/globalThis.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/platform/node/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/propagation/NoopTextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/propagation/TextMapPropagator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/NonRecordingSpan.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/ProxyTracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/ProxyTracerProvider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/Sampler.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/SamplingResult.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/SpanOptions.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/attributes.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/context-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/link.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/span.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/span_context.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/span_kind.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/spancontext-utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/status.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/trace_state.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/tracer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/trace/tracer_provider.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@opentelemetry/api/build/src/version.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/@tootallnate/once/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/agent-base/dist/src/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/agent-base/dist/src/promisify.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/abort.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/async.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/defer.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/iterate.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/state.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/lib/terminator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/parallel.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/serial.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/asynckit/serialOrdered.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/adapters/http.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/adapters/xhr.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/axios.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/cancel/Cancel.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/cancel/CancelToken.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/cancel/isCancel.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/Axios.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/InterceptorManager.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/buildFullPath.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/createError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/dispatchRequest.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/enhanceError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/mergeConfig.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/settle.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/core/transformData.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/defaults.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/bind.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/buildURL.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/combineURLs.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/cookies.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/isAbsoluteURL.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/isAxiosError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/isURLSameOrigin.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/normalizeHeaderName.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/parseHeaders.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/spread.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/helpers/validator.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/axios/lib/utils.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/buffer-equal-constant-time/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/combined-stream/lib/combined_stream.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/debug/node_modules/ms/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/debug/src/browser.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/debug/src/common.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/debug/src/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/debug/src/node.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/define-lazy-prop/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/delayed-stream/lib/delayed_stream.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/follow-redirects/debug.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/follow-redirects/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/form-data/lib/form_data.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/form-data/lib/populate.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/has-flag/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/http-proxy-agent/dist/agent.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/http-proxy-agent/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/https-proxy-agent/dist/agent.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/https-proxy-agent/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/https-proxy-agent/dist/parse-proxy-response.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/is-docker/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/is-wsl/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/decode.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/lib/NotBeforeError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/lib/TokenExpiredError.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/lib/psSupported.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/lib/timespan.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jwa/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jws/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jws/lib/data-stream.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jws/lib/sign-stream.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jws/lib/tostring.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/jws/lib/verify-stream.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/node_modules/semver/semver.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/sign.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/jsonwebtoken/verify.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.includes/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.isboolean/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.isinteger/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.isnumber/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.isplainobject/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.isstring/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/lodash.once/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/mime-db/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/mime-types/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/ms/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/open/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/safe-buffer/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/stoppable/lib/stoppable.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/supports-color/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/tslib/tslib.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/tunnel/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/tunnel/lib/tunnel.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/index.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/md5.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/nil.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/parse.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/regex.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/rng.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/sha1.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/stringify.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/v1.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/v3.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/v35.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/v4.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/v5.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/validate.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/./node_modules/uuid/dist/version.js",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"assert\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"buffer\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"child_process\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"crypto\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"events\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"fs\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"http\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"https\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"net\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"os\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"path\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"stream\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"tls\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"tty\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"url\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"util\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/external node-commonjs \"zlib\"",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/webpack/bootstrap",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/webpack/runtime/compat",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/webpack/before-startup",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/webpack/startup",
    "../webpack://@i40mc/azure-container-registry-cleanup-action/webpack/after-startup"
  ],
  "sourcesContent": [
    "\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst core = __importStar(require(\"@actions/core\"));\r\nconst container_registry_1 = require(\"@azure/container-registry\");\r\nconst identity_1 = require(\"@azure/identity\");\r\nfunction run() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let totalDeletedImages = 0;\r\n        try {\r\n            const imagesToKeep = parseInt(core.getInput('keep'), 10);\r\n            const dontCountUntaggedImages = core.getBooleanInput('dontCountUntaggedImages');\r\n            const endpoint = core.getInput('endpoint');\r\n            const repos = core.getInput('repos').split(/[,;\\n\\s]/).map(r => r.trim()).filter(r => r !== '');\r\n            const tenantId = core.getInput('tenantId');\r\n            const secret = core.getInput('secret');\r\n            const clientId = core.getInput('clientId');\r\n            core.debug(`imagesToKeep: ${imagesToKeep}`);\r\n            core.debug(`dontCountUntaggedImages: ${dontCountUntaggedImages}`);\r\n            core.debug(`endpoint: ${endpoint}`);\r\n            core.debug(`repos: ${repos}`);\r\n            core.debug(`has tenantId: ${tenantId && tenantId !== ''}`);\r\n            core.debug(`has secret: ${secret && secret !== ''}`);\r\n            core.debug(`has clientId: ${clientId && clientId !== ''}`);\r\n            const client = new container_registry_1.ContainerRegistryClient(endpoint, new identity_1.ClientSecretCredential(tenantId, clientId, secret));\r\n            for (const repoName of repos) {\r\n                yield core.group(`🔍 Cleanup ${repoName}`, () => __awaiter(this, void 0, void 0, function* () {\r\n                    var e_1, _a;\r\n                    const repo = client.getRepository(repoName);\r\n                    const imageManifests = repo.listManifestProperties({\r\n                        order: 'LastUpdatedOnDescending',\r\n                    });\r\n                    let imageCount = 0;\r\n                    let deletedImages = 0;\r\n                    try {\r\n                        for (var imageManifests_1 = __asyncValues(imageManifests), imageManifests_1_1; imageManifests_1_1 = yield imageManifests_1.next(), !imageManifests_1_1.done;) {\r\n                            const manifest = imageManifests_1_1.value;\r\n                            if ((dontCountUntaggedImages && manifest.tags.length === 0) || imageCount++ >= imagesToKeep) {\r\n                                yield repo.getArtifact(manifest.digest).delete();\r\n                                deletedImages++;\r\n                                if (manifest.tags.length > 0) {\r\n                                    core.info(`Delete image: ${manifest.digest} - Tags: ${manifest.tags}`);\r\n                                }\r\n                                else {\r\n                                    core.info(`Delete image: ${manifest.digest} - Tags: ${manifest.tags}`);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                    finally {\r\n                        try {\r\n                            if (imageManifests_1_1 && !imageManifests_1_1.done && (_a = imageManifests_1.return)) yield _a.call(imageManifests_1);\r\n                        }\r\n                        finally { if (e_1) throw e_1.error; }\r\n                    }\r\n                    core.info(`Deleted ${deletedImages} image in ${repoName}`);\r\n                    totalDeletedImages += deletedImages;\r\n                }));\r\n            }\r\n            core.info(`Deleted ${totalDeletedImages} images`);\r\n            core.setOutput('count', totalDeletedImages);\r\n        }\r\n        catch (error) {\r\n            core.info(`Deleted ${totalDeletedImages} images`);\r\n            core.setFailed(error);\r\n        }\r\n    });\r\n}\r\nvoid run();\r\n",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n//# sourceMappingURL=core.js.map",
    "\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map",
    "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map",
    "\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' +\n                Buffer.from(this.username + ':' + this.password).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] = 'Bearer ' + this.token;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' + Buffer.from('PAT:' + this.token).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst pm = require(\"./proxy\");\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise(async (resolve, reject) => {\n            let output = Buffer.alloc(0);\n            this.message.on('data', (chunk) => {\n                output = Buffer.concat([output, chunk]);\n            });\n            this.message.on('end', () => {\n                resolve(output.toString());\n            });\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    async getJson(requestUrl, additionalHeaders = {}) {\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        let res = await this.get(requestUrl, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async postJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.post(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async putJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.put(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async patchJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.patch(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    async request(verb, requestUrl, data, headers) {\n        if (this._disposed) {\n            throw new Error('Client has already been disposed.');\n        }\n        let parsedUrl = new URL(requestUrl);\n        let info = this._prepareRequest(verb, parsedUrl, headers);\n        // Only perform retries on reads since writes may not be idempotent.\n        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1\n            ? this._maxRetries + 1\n            : 1;\n        let numTries = 0;\n        let response;\n        while (numTries < maxTries) {\n            response = await this.requestRaw(info, data);\n            // Check if it's an authentication challenge\n            if (response &&\n                response.message &&\n                response.message.statusCode === HttpCodes.Unauthorized) {\n                let authenticationHandler;\n                for (let i = 0; i < this.handlers.length; i++) {\n                    if (this.handlers[i].canHandleAuthentication(response)) {\n                        authenticationHandler = this.handlers[i];\n                        break;\n                    }\n                }\n                if (authenticationHandler) {\n                    return authenticationHandler.handleAuthentication(this, info, data);\n                }\n                else {\n                    // We have received an unauthorized response but have no handlers to handle it.\n                    // Let the response return to the caller.\n                    return response;\n                }\n            }\n            let redirectsRemaining = this._maxRedirects;\n            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&\n                this._allowRedirects &&\n                redirectsRemaining > 0) {\n                const redirectUrl = response.message.headers['location'];\n                if (!redirectUrl) {\n                    // if there's no location to redirect to, we won't\n                    break;\n                }\n                let parsedRedirectUrl = new URL(redirectUrl);\n                if (parsedUrl.protocol == 'https:' &&\n                    parsedUrl.protocol != parsedRedirectUrl.protocol &&\n                    !this._allowRedirectDowngrade) {\n                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                }\n                // we need to finish reading the response before reassigning response\n                // which will leak the open socket.\n                await response.readBody();\n                // strip authorization header if redirected to a different hostname\n                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                    for (let header in headers) {\n                        // header names are case insensitive\n                        if (header.toLowerCase() === 'authorization') {\n                            delete headers[header];\n                        }\n                    }\n                }\n                // let's make the request with the new redirectUrl\n                info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                response = await this.requestRaw(info, data);\n                redirectsRemaining--;\n            }\n            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                // If not a retry code, return immediately instead of retrying\n                return response;\n            }\n            numTries += 1;\n            if (numTries < maxTries) {\n                await response.readBody();\n                await this._performExponentialBackoff(numTries);\n            }\n        }\n        return response;\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof data === 'string') {\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        let parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            this.handlers.forEach(handler => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxyUrl = pm.getProxyUrl(parsedUrl);\n        let useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    ...((proxyUrl.username || proxyUrl.password) && {\n                        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                    }),\n                    host: proxyUrl.hostname,\n                    port: proxyUrl.port\n                }\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    async _processResponse(res, options) {\n        return new Promise(async (resolve, reject) => {\n            const statusCode = res.message.statusCode;\n            const response = {\n                statusCode: statusCode,\n                result: null,\n                headers: {}\n            };\n            // not found leads to null obj returned\n            if (statusCode == HttpCodes.NotFound) {\n                resolve(response);\n            }\n            let obj;\n            let contents;\n            // get the result from the body\n            try {\n                contents = await res.readBody();\n                if (contents && contents.length > 0) {\n                    if (options && options.deserializeDates) {\n                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);\n                    }\n                    else {\n                        obj = JSON.parse(contents);\n                    }\n                    response.result = obj;\n                }\n                response.headers = res.message.headers;\n            }\n            catch (err) {\n                // Invalid resource (contents not json);  leaving result obj null\n            }\n            // note that 3xx redirects are handled by the http layer.\n            if (statusCode > 299) {\n                let msg;\n                // if exception/error in body, attempt to get better error\n                if (obj && obj.message) {\n                    msg = obj.message;\n                }\n                else if (contents && contents.length > 0) {\n                    // it may be the case that the exception is in the body message as string\n                    msg = contents;\n                }\n                else {\n                    msg = 'Failed request: (' + statusCode + ')';\n                }\n                let err = new HttpClientError(msg, statusCode);\n                err.result = response.result;\n                reject(err);\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n}\nexports.HttpClient = HttpClient;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProxyUrl(reqUrl) {\n    let usingSsl = reqUrl.protocol === 'https:';\n    let proxyUrl;\n    if (checkBypass(reqUrl)) {\n        return proxyUrl;\n    }\n    let proxyVar;\n    if (usingSsl) {\n        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n    }\n    else {\n        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];\n    }\n    if (proxyVar) {\n        proxyUrl = new URL(proxyVar);\n    }\n    return proxyUrl;\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    let upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (let upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar listenersMap = new WeakMap();\nvar abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nvar AbortSignal = /** @class */ (function () {\n    function AbortSignal() {\n        /**\n         * onabort event listener.\n         */\n        this.onabort = null;\n        listenersMap.set(this, []);\n        abortedMap.set(this, false);\n    }\n    Object.defineProperty(AbortSignal.prototype, \"aborted\", {\n        /**\n         * Status of whether aborted or not.\n         *\n         * @readonly\n         */\n        get: function () {\n            if (!abortedMap.has(this)) {\n                throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n            }\n            return abortedMap.get(this);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AbortSignal, \"none\", {\n        /**\n         * Creates a new AbortSignal instance that will never be aborted.\n         *\n         * @readonly\n         */\n        get: function () {\n            return new AbortSignal();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */\n    AbortSignal.prototype.addEventListener = function (\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        var listeners = listenersMap.get(this);\n        listeners.push(listener);\n    };\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */\n    AbortSignal.prototype.removeEventListener = function (\n    // tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        var listeners = listenersMap.get(this);\n        var index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    };\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */\n    AbortSignal.prototype.dispatchEvent = function (_event) {\n        throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    };\n    return AbortSignal;\n}());\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction abortSignal(signal) {\n    if (signal.aborted) {\n        return;\n    }\n    if (signal.onabort) {\n        signal.onabort.call(signal);\n    }\n    var listeners = listenersMap.get(signal);\n    if (listeners) {\n        // Create a copy of listeners so mutations to the array\n        // (e.g. via removeListener calls) don't affect the listeners\n        // we invoke.\n        listeners.slice().forEach(function (listener) {\n            listener.call(signal, { type: \"abort\" });\n        });\n    }\n    abortedMap.set(signal, true);\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nvar AbortError = /** @class */ (function (_super) {\n    tslib.__extends(AbortError, _super);\n    function AbortError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"AbortError\";\n        return _this;\n    }\n    return AbortError;\n}(Error));\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nvar AbortController = /** @class */ (function () {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    function AbortController(parentSignals) {\n        var _this = this;\n        this._signal = new AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n            var parentSignal = parentSignals_1[_i];\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", function () {\n                    _this.abort();\n                });\n            }\n        }\n    }\n    Object.defineProperty(AbortController.prototype, \"signal\", {\n        /**\n         * The AbortSignal associated with this controller that will signal aborted\n         * when the abort method is called on this controller.\n         *\n         * @readonly\n         */\n        get: function () {\n            return this._signal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n    AbortController.prototype.abort = function () {\n        abortSignal(this._signal);\n    };\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n    AbortController.timeout = function (ms) {\n        var signal = new AbortSignal();\n        var timer = setTimeout(abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    };\n    return AbortController;\n}());\n\nexports.AbortController = AbortController;\nexports.AbortError = AbortError;\nexports.AbortSignal = AbortSignal;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar coreAuth = require('@azure/core-auth');\nvar coreRestPipeline = require('@azure/core-rest-pipeline');\nvar coreTracing = require('@azure/core-tracing');\nrequire('@azure/core-paging');\nvar logger$1 = require('@azure/logger');\nvar coreClient = require('@azure/core-client');\nvar url$1 = require('url');\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The \\@azure/logger configuration for this package.\n *\n * @internal\n */\nconst logger = logger$1.createClientLogger(\"container-registry\");\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nconst AcrErrors = {\n    type: {\n        name: \"Composite\",\n        className: \"AcrErrors\",\n        modelProperties: {\n            errors: {\n                serializedName: \"errors\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"AcrErrorInfo\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nconst AcrErrorInfo = {\n    type: {\n        name: \"Composite\",\n        className: \"AcrErrorInfo\",\n        modelProperties: {\n            code: {\n                serializedName: \"code\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            message: {\n                serializedName: \"message\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            detail: {\n                serializedName: \"detail\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } }\n                }\n            }\n        }\n    }\n};\nconst Manifest = {\n    type: {\n        name: \"Composite\",\n        className: \"Manifest\",\n        modelProperties: {\n            schemaVersion: {\n                serializedName: \"schemaVersion\",\n                type: {\n                    name: \"Number\"\n                }\n            }\n        }\n    }\n};\nconst ManifestListAttributes = {\n    type: {\n        name: \"Composite\",\n        className: \"ManifestListAttributes\",\n        modelProperties: {\n            mediaType: {\n                serializedName: \"mediaType\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            size: {\n                serializedName: \"size\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            digest: {\n                serializedName: \"digest\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            platform: {\n                serializedName: \"platform\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Platform\"\n                }\n            }\n        }\n    }\n};\nconst Platform = {\n    type: {\n        name: \"Composite\",\n        className: \"Platform\",\n        modelProperties: {\n            architecture: {\n                serializedName: \"architecture\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            os: {\n                serializedName: \"os\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            osVersion: {\n                serializedName: \"os\\\\.version\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            osFeatures: {\n                serializedName: \"os\\\\.features\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            variant: {\n                serializedName: \"variant\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            features: {\n                serializedName: \"features\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nconst Descriptor = {\n    type: {\n        name: \"Composite\",\n        className: \"Descriptor\",\n        modelProperties: {\n            mediaType: {\n                serializedName: \"mediaType\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            size: {\n                serializedName: \"size\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            digest: {\n                serializedName: \"digest\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            urls: {\n                serializedName: \"urls\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            annotations: {\n                serializedName: \"annotations\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Annotations\"\n                }\n            }\n        }\n    }\n};\nconst Annotations = {\n    type: {\n        name: \"Composite\",\n        className: \"Annotations\",\n        additionalProperties: { type: { name: \"Object\" } },\n        modelProperties: {\n            created: {\n                serializedName: \"org\\\\.opencontainers.image.created\",\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            authors: {\n                serializedName: \"org\\\\.opencontainers.image.authors\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            url: {\n                serializedName: \"org\\\\.opencontainers.image.url\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            documentation: {\n                serializedName: \"org\\\\.opencontainers.image.documentation\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            source: {\n                serializedName: \"org\\\\.opencontainers.image.source\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            version: {\n                serializedName: \"org\\\\.opencontainers.image.version\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            revision: {\n                serializedName: \"org\\\\.opencontainers.image.revision\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            vendor: {\n                serializedName: \"org\\\\.opencontainers.image.vendor\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            licenses: {\n                serializedName: \"org\\\\.opencontainers.image.licenses\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            name: {\n                serializedName: \"org\\\\.opencontainers.image.ref.name\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            title: {\n                serializedName: \"org\\\\.opencontainers.image.title\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            description: {\n                serializedName: \"org\\\\.opencontainers.image.description\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst FsLayer = {\n    type: {\n        name: \"Composite\",\n        className: \"FsLayer\",\n        modelProperties: {\n            blobSum: {\n                serializedName: \"blobSum\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst History = {\n    type: {\n        name: \"Composite\",\n        className: \"History\",\n        modelProperties: {\n            v1Compatibility: {\n                serializedName: \"v1Compatibility\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ImageSignature = {\n    type: {\n        name: \"Composite\",\n        className: \"ImageSignature\",\n        modelProperties: {\n            header: {\n                serializedName: \"header\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Jwk\"\n                }\n            },\n            signature: {\n                serializedName: \"signature\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            protected: {\n                serializedName: \"protected\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst Jwk = {\n    type: {\n        name: \"Composite\",\n        className: \"Jwk\",\n        modelProperties: {\n            jwk: {\n                serializedName: \"jwk\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JWKHeader\"\n                }\n            },\n            alg: {\n                serializedName: \"alg\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst JWKHeader = {\n    type: {\n        name: \"Composite\",\n        className: \"JWKHeader\",\n        modelProperties: {\n            crv: {\n                serializedName: \"crv\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            kid: {\n                serializedName: \"kid\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            kty: {\n                serializedName: \"kty\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            x: {\n                serializedName: \"x\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            y: {\n                serializedName: \"y\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst Repositories = {\n    type: {\n        name: \"Composite\",\n        className: \"Repositories\",\n        modelProperties: {\n            repositories: {\n                serializedName: \"repositories\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRepositoryProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRepositoryProperties\",\n        modelProperties: {\n            registryLoginServer: {\n                serializedName: \"registry\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            name: {\n                serializedName: \"imageName\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            createdOn: {\n                serializedName: \"createdTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            lastUpdatedOn: {\n                serializedName: \"lastUpdateTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            manifestCount: {\n                serializedName: \"manifestCount\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"Number\"\n                }\n            },\n            tagCount: {\n                serializedName: \"tagCount\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"Number\"\n                }\n            },\n            canDelete: {\n                serializedName: \"changeableAttributes.deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"changeableAttributes.writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"changeableAttributes.listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"changeableAttributes.readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst RepositoryWriteableProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"RepositoryWriteableProperties\",\n        modelProperties: {\n            canDelete: {\n                serializedName: \"deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst TagList = {\n    type: {\n        name: \"Composite\",\n        className: \"TagList\",\n        modelProperties: {\n            registryLoginServer: {\n                serializedName: \"registry\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            repository: {\n                serializedName: \"imageName\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            tagAttributeBases: {\n                serializedName: \"tags\",\n                required: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"TagAttributesBase\"\n                        }\n                    }\n                }\n            },\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst TagAttributesBase = {\n    type: {\n        name: \"Composite\",\n        className: \"TagAttributesBase\",\n        modelProperties: {\n            name: {\n                serializedName: \"name\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            digest: {\n                serializedName: \"digest\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            createdOn: {\n                serializedName: \"createdTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            lastUpdatedOn: {\n                serializedName: \"lastUpdateTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            canDelete: {\n                serializedName: \"changeableAttributes.deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"changeableAttributes.writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"changeableAttributes.listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"changeableAttributes.readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst TagWriteableProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"TagWriteableProperties\",\n        modelProperties: {\n            canDelete: {\n                serializedName: \"deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst ArtifactTagProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"ArtifactTagProperties\",\n        modelProperties: {\n            registryLoginServer: {\n                serializedName: \"registry\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            repositoryName: {\n                serializedName: \"imageName\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            name: {\n                serializedName: \"tag.name\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            digest: {\n                serializedName: \"tag.digest\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            createdOn: {\n                serializedName: \"tag.createdTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            lastUpdatedOn: {\n                serializedName: \"tag.lastUpdateTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            canDelete: {\n                serializedName: \"tag.changeableAttributes.deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"tag.changeableAttributes.writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"tag.changeableAttributes.listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"tag.changeableAttributes.readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst AcrManifests = {\n    type: {\n        name: \"Composite\",\n        className: \"AcrManifests\",\n        modelProperties: {\n            registryLoginServer: {\n                serializedName: \"registry\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            repository: {\n                serializedName: \"imageName\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            manifests: {\n                serializedName: \"manifests\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ManifestAttributesBase\"\n                        }\n                    }\n                }\n            },\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ManifestAttributesBase = {\n    type: {\n        name: \"Composite\",\n        className: \"ManifestAttributesBase\",\n        modelProperties: {\n            digest: {\n                serializedName: \"digest\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            size: {\n                serializedName: \"imageSize\",\n                readOnly: true,\n                type: {\n                    name: \"Number\"\n                }\n            },\n            createdOn: {\n                serializedName: \"createdTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            lastUpdatedOn: {\n                serializedName: \"lastUpdateTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            architecture: {\n                serializedName: \"architecture\",\n                readOnly: true,\n                nullable: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            operatingSystem: {\n                serializedName: \"os\",\n                readOnly: true,\n                nullable: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            relatedArtifacts: {\n                serializedName: \"references\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArtifactManifestPlatform\"\n                        }\n                    }\n                }\n            },\n            tags: {\n                serializedName: \"tags\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            canDelete: {\n                serializedName: \"changeableAttributes.deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"changeableAttributes.writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"changeableAttributes.listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"changeableAttributes.readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst ArtifactManifestPlatform = {\n    type: {\n        name: \"Composite\",\n        className: \"ArtifactManifestPlatform\",\n        modelProperties: {\n            digest: {\n                serializedName: \"digest\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            architecture: {\n                serializedName: \"architecture\",\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            operatingSystem: {\n                serializedName: \"os\",\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ManifestWriteableProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"ManifestWriteableProperties\",\n        modelProperties: {\n            canDelete: {\n                serializedName: \"deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst ArtifactManifestProperties = {\n    type: {\n        name: \"Composite\",\n        className: \"ArtifactManifestProperties\",\n        modelProperties: {\n            registryLoginServer: {\n                serializedName: \"registry\",\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            repositoryName: {\n                serializedName: \"imageName\",\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            digest: {\n                serializedName: \"manifest.digest\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            size: {\n                serializedName: \"manifest.imageSize\",\n                readOnly: true,\n                type: {\n                    name: \"Number\"\n                }\n            },\n            createdOn: {\n                serializedName: \"manifest.createdTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            lastUpdatedOn: {\n                serializedName: \"manifest.lastUpdateTime\",\n                required: true,\n                readOnly: true,\n                type: {\n                    name: \"DateTime\"\n                }\n            },\n            architecture: {\n                serializedName: \"manifest.architecture\",\n                readOnly: true,\n                nullable: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            operatingSystem: {\n                serializedName: \"manifest.os\",\n                readOnly: true,\n                nullable: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            relatedArtifacts: {\n                serializedName: \"manifest.references\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArtifactManifestPlatform\"\n                        }\n                    }\n                }\n            },\n            tags: {\n                serializedName: \"manifest.tags\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            canDelete: {\n                serializedName: \"manifest.changeableAttributes.deleteEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canWrite: {\n                serializedName: \"manifest.changeableAttributes.writeEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canList: {\n                serializedName: \"manifest.changeableAttributes.listEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            },\n            canRead: {\n                serializedName: \"manifest.changeableAttributes.readEnabled\",\n                type: {\n                    name: \"Boolean\"\n                }\n            }\n        }\n    }\n};\nconst AcrRefreshToken = {\n    type: {\n        name: \"Composite\",\n        className: \"AcrRefreshToken\",\n        modelProperties: {\n            refreshToken: {\n                serializedName: \"refresh_token\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst AcrAccessToken = {\n    type: {\n        name: \"Composite\",\n        className: \"AcrAccessToken\",\n        modelProperties: {\n            accessToken: {\n                serializedName: \"access_token\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst RepositoryTags = {\n    type: {\n        name: \"Composite\",\n        className: \"RepositoryTags\",\n        modelProperties: {\n            name: {\n                serializedName: \"name\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            tags: {\n                serializedName: \"tags\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nconst DeleteRepositoryResult = {\n    type: {\n        name: \"Composite\",\n        className: \"DeleteRepositoryResult\",\n        modelProperties: {\n            deletedManifests: {\n                serializedName: \"manifestsDeleted\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            },\n            deletedTags: {\n                serializedName: \"tagsDeleted\",\n                readOnly: true,\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nconst TagAttributesTag = {\n    type: {\n        name: \"Composite\",\n        className: \"TagAttributesTag\",\n        modelProperties: {\n            signatureRecord: {\n                serializedName: \"signatureRecord\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ManifestAttributesManifest = {\n    type: {\n        name: \"Composite\",\n        className: \"ManifestAttributesManifest\",\n        modelProperties: {\n            references: {\n                serializedName: \"references\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArtifactManifestPlatform\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nconst Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema = {\n    type: {\n        name: \"Composite\",\n        className: \"Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema\",\n        modelProperties: {\n            grantType: {\n                serializedName: \"grant_type\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            service: {\n                serializedName: \"service\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            tenant: {\n                serializedName: \"tenant\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            refreshToken: {\n                serializedName: \"refresh_token\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            aadAccessToken: {\n                serializedName: \"access_token\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema = {\n    type: {\n        name: \"Composite\",\n        className: \"PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema\",\n        modelProperties: {\n            service: {\n                serializedName: \"service\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            scope: {\n                serializedName: \"scope\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            acrRefreshToken: {\n                serializedName: \"refresh_token\",\n                required: true,\n                type: {\n                    name: \"String\"\n                }\n            },\n            grantType: {\n                serializedName: \"grant_type\",\n                required: true,\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"refresh_token\", \"password\"]\n                }\n            }\n        }\n    }\n};\nconst ManifestWrapper = {\n    type: {\n        name: \"Composite\",\n        className: \"ManifestWrapper\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {\n                serializedName: \"mediaType\",\n                type: {\n                    name: \"String\"\n                }\n            }, manifests: {\n                serializedName: \"manifests\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ManifestListAttributes\"\n                        }\n                    }\n                }\n            }, config: {\n                serializedName: \"config\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Descriptor\"\n                }\n            }, layers: {\n                serializedName: \"layers\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Descriptor\"\n                        }\n                    }\n                }\n            }, annotations: {\n                serializedName: \"annotations\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Annotations\"\n                }\n            }, architecture: {\n                serializedName: \"architecture\",\n                type: {\n                    name: \"String\"\n                }\n            }, name: {\n                serializedName: \"name\",\n                type: {\n                    name: \"String\"\n                }\n            }, tag: {\n                serializedName: \"tag\",\n                type: {\n                    name: \"String\"\n                }\n            }, fsLayers: {\n                serializedName: \"fsLayers\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FsLayer\"\n                        }\n                    }\n                }\n            }, history: {\n                serializedName: \"history\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"History\"\n                        }\n                    }\n                }\n            }, signatures: {\n                serializedName: \"signatures\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ImageSignature\"\n                        }\n                    }\n                }\n            } })\n    }\n};\nconst ManifestList = {\n    serializedName: \"application/vnd.docker.distribution.manifest.list.v2+json\",\n    type: {\n        name: \"Composite\",\n        className: \"ManifestList\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {\n                serializedName: \"mediaType\",\n                type: {\n                    name: \"String\"\n                }\n            }, manifests: {\n                serializedName: \"manifests\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ManifestListAttributes\"\n                        }\n                    }\n                }\n            } })\n    }\n};\nconst V2Manifest = {\n    serializedName: \"application/vnd.docker.distribution.manifest.v2+json\",\n    type: {\n        name: \"Composite\",\n        className: \"V2Manifest\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {\n                serializedName: \"mediaType\",\n                type: {\n                    name: \"String\"\n                }\n            }, config: {\n                serializedName: \"config\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Descriptor\"\n                }\n            }, layers: {\n                serializedName: \"layers\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Descriptor\"\n                        }\n                    }\n                }\n            } })\n    }\n};\nconst OCIManifest = {\n    serializedName: \"application/vnd.oci.image.manifest.v1+json\",\n    type: {\n        name: \"Composite\",\n        className: \"OCIManifest\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { config: {\n                serializedName: \"config\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Descriptor\"\n                }\n            }, layers: {\n                serializedName: \"layers\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Descriptor\"\n                        }\n                    }\n                }\n            }, annotations: {\n                serializedName: \"annotations\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Annotations\"\n                }\n            } })\n    }\n};\nconst OCIIndex = {\n    serializedName: \"application/vnd.oci.image.index.v1+json\",\n    type: {\n        name: \"Composite\",\n        className: \"OCIIndex\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { manifests: {\n                serializedName: \"manifests\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ManifestListAttributes\"\n                        }\n                    }\n                }\n            }, annotations: {\n                serializedName: \"annotations\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Annotations\"\n                }\n            } })\n    }\n};\nconst V1Manifest = {\n    serializedName: \"application/vnd.oci.image.manifest.v1+json\",\n    type: {\n        name: \"Composite\",\n        className: \"V1Manifest\",\n        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { architecture: {\n                serializedName: \"architecture\",\n                type: {\n                    name: \"String\"\n                }\n            }, name: {\n                serializedName: \"name\",\n                type: {\n                    name: \"String\"\n                }\n            }, tag: {\n                serializedName: \"tag\",\n                type: {\n                    name: \"String\"\n                }\n            }, fsLayers: {\n                serializedName: \"fsLayers\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FsLayer\"\n                        }\n                    }\n                }\n            }, history: {\n                serializedName: \"history\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"History\"\n                        }\n                    }\n                }\n            }, signatures: {\n                serializedName: \"signatures\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ImageSignature\"\n                        }\n                    }\n                }\n            } })\n    }\n};\nconst ContainerRegistryCreateManifestHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryCreateManifestHeaders\",\n        modelProperties: {\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            location: {\n                serializedName: \"location\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                type: {\n                    name: \"Number\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetRepositoriesHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetRepositoriesHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetTagsHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetTagsHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetManifestsHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetManifestsHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetRepositoriesNextHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetRepositoriesNextHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetTagsNextHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetTagsNextHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryGetManifestsNextHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryGetManifestsNextHeaders\",\n        modelProperties: {\n            link: {\n                serializedName: \"link\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobGetBlobHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobGetBlobHeaders\",\n        modelProperties: {\n            contentLength: {\n                serializedName: \"content-length\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobCheckBlobExistsHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobCheckBlobExistsHeaders\",\n        modelProperties: {\n            contentLength: {\n                serializedName: \"content-length\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobDeleteBlobHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobDeleteBlobHeaders\",\n        modelProperties: {\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobMountBlobHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobMountBlobHeaders\",\n        modelProperties: {\n            location: {\n                serializedName: \"location\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerUploadUuid: {\n                serializedName: \"docker-upload-uuid\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobGetUploadStatusHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobGetUploadStatusHeaders\",\n        modelProperties: {\n            range: {\n                serializedName: \"range\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerUploadUuid: {\n                serializedName: \"docker-upload-uuid\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobUploadChunkHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobUploadChunkHeaders\",\n        modelProperties: {\n            location: {\n                serializedName: \"location\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            range: {\n                serializedName: \"range\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerUploadUuid: {\n                serializedName: \"docker-upload-uuid\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobCompleteUploadHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobCompleteUploadHeaders\",\n        modelProperties: {\n            location: {\n                serializedName: \"location\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            range: {\n                serializedName: \"range\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerContentDigest: {\n                serializedName: \"docker-content-digest\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobStartUploadHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobStartUploadHeaders\",\n        modelProperties: {\n            location: {\n                serializedName: \"location\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            range: {\n                serializedName: \"range\",\n                type: {\n                    name: \"String\"\n                }\n            },\n            dockerUploadUuid: {\n                serializedName: \"docker-upload-uuid\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobGetChunkHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobGetChunkHeaders\",\n        modelProperties: {\n            contentLength: {\n                serializedName: \"content-length\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\nconst ContainerRegistryBlobCheckChunkExistsHeaders = {\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRegistryBlobCheckChunkExistsHeaders\",\n        modelProperties: {\n            contentLength: {\n                serializedName: \"content-length\",\n                type: {\n                    name: \"Number\"\n                }\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                type: {\n                    name: \"String\"\n                }\n            }\n        }\n    }\n};\n\nvar Mappers = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    AcrErrors: AcrErrors,\n    AcrErrorInfo: AcrErrorInfo,\n    Manifest: Manifest,\n    ManifestListAttributes: ManifestListAttributes,\n    Platform: Platform,\n    Descriptor: Descriptor,\n    Annotations: Annotations,\n    FsLayer: FsLayer,\n    History: History,\n    ImageSignature: ImageSignature,\n    Jwk: Jwk,\n    JWKHeader: JWKHeader,\n    Repositories: Repositories,\n    ContainerRepositoryProperties: ContainerRepositoryProperties,\n    RepositoryWriteableProperties: RepositoryWriteableProperties,\n    TagList: TagList,\n    TagAttributesBase: TagAttributesBase,\n    TagWriteableProperties: TagWriteableProperties,\n    ArtifactTagProperties: ArtifactTagProperties,\n    AcrManifests: AcrManifests,\n    ManifestAttributesBase: ManifestAttributesBase,\n    ArtifactManifestPlatform: ArtifactManifestPlatform,\n    ManifestWriteableProperties: ManifestWriteableProperties,\n    ArtifactManifestProperties: ArtifactManifestProperties,\n    AcrRefreshToken: AcrRefreshToken,\n    AcrAccessToken: AcrAccessToken,\n    RepositoryTags: RepositoryTags,\n    DeleteRepositoryResult: DeleteRepositoryResult,\n    TagAttributesTag: TagAttributesTag,\n    ManifestAttributesManifest: ManifestAttributesManifest,\n    Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema: Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema,\n    PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema: PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema,\n    ManifestWrapper: ManifestWrapper,\n    ManifestList: ManifestList,\n    V2Manifest: V2Manifest,\n    OCIManifest: OCIManifest,\n    OCIIndex: OCIIndex,\n    V1Manifest: V1Manifest,\n    ContainerRegistryCreateManifestHeaders: ContainerRegistryCreateManifestHeaders,\n    ContainerRegistryGetRepositoriesHeaders: ContainerRegistryGetRepositoriesHeaders,\n    ContainerRegistryGetTagsHeaders: ContainerRegistryGetTagsHeaders,\n    ContainerRegistryGetManifestsHeaders: ContainerRegistryGetManifestsHeaders,\n    ContainerRegistryGetRepositoriesNextHeaders: ContainerRegistryGetRepositoriesNextHeaders,\n    ContainerRegistryGetTagsNextHeaders: ContainerRegistryGetTagsNextHeaders,\n    ContainerRegistryGetManifestsNextHeaders: ContainerRegistryGetManifestsNextHeaders,\n    ContainerRegistryBlobGetBlobHeaders: ContainerRegistryBlobGetBlobHeaders,\n    ContainerRegistryBlobCheckBlobExistsHeaders: ContainerRegistryBlobCheckBlobExistsHeaders,\n    ContainerRegistryBlobDeleteBlobHeaders: ContainerRegistryBlobDeleteBlobHeaders,\n    ContainerRegistryBlobMountBlobHeaders: ContainerRegistryBlobMountBlobHeaders,\n    ContainerRegistryBlobGetUploadStatusHeaders: ContainerRegistryBlobGetUploadStatusHeaders,\n    ContainerRegistryBlobUploadChunkHeaders: ContainerRegistryBlobUploadChunkHeaders,\n    ContainerRegistryBlobCompleteUploadHeaders: ContainerRegistryBlobCompleteUploadHeaders,\n    ContainerRegistryBlobStartUploadHeaders: ContainerRegistryBlobStartUploadHeaders,\n    ContainerRegistryBlobGetChunkHeaders: ContainerRegistryBlobGetChunkHeaders,\n    ContainerRegistryBlobCheckChunkExistsHeaders: ContainerRegistryBlobCheckChunkExistsHeaders\n});\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nconst accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/json\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    },\n    skipEncoding: true\n};\nconst name = {\n    parameterPath: \"name\",\n    mapper: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst reference = {\n    parameterPath: \"reference\",\n    mapper: {\n        serializedName: \"reference\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst accept1 = {\n    parameterPath: [\"options\", \"accept\"],\n    mapper: {\n        serializedName: \"accept\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/vnd.docker.distribution.manifest.v2+json\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst payload = {\n    parameterPath: \"payload\",\n    mapper: Manifest\n};\nconst last = {\n    parameterPath: [\"options\", \"last\"],\n    mapper: {\n        serializedName: \"last\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst n = {\n    parameterPath: [\"options\", \"n\"],\n    mapper: {\n        serializedName: \"n\",\n        type: {\n            name: \"Number\"\n        }\n    }\n};\nconst apiVersion = {\n    parameterPath: \"apiVersion\",\n    mapper: {\n        serializedName: \"api-version\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/json\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst value = {\n    parameterPath: [\"options\", \"value\"],\n    mapper: RepositoryWriteableProperties\n};\nconst orderby = {\n    parameterPath: [\"options\", \"orderby\"],\n    mapper: {\n        serializedName: \"orderby\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst digest = {\n    parameterPath: [\"options\", \"digest\"],\n    mapper: {\n        serializedName: \"digest\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst value1 = {\n    parameterPath: [\"options\", \"value\"],\n    mapper: TagWriteableProperties\n};\nconst digest1 = {\n    parameterPath: \"digest\",\n    mapper: {\n        serializedName: \"digest\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst value2 = {\n    parameterPath: [\"options\", \"value\"],\n    mapper: ManifestWriteableProperties\n};\nconst nextLink = {\n    parameterPath: \"nextLink\",\n    mapper: {\n        serializedName: \"nextLink\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    },\n    skipEncoding: true\n};\nconst accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst fromParam = {\n    parameterPath: \"fromParam\",\n    mapper: {\n        serializedName: \"from\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst mount = {\n    parameterPath: \"mount\",\n    mapper: {\n        serializedName: \"mount\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst location = {\n    parameterPath: \"location\",\n    mapper: {\n        serializedName: \"nextBlobUuidLink\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    },\n    skipEncoding: true\n};\nconst contentType2 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst value3 = {\n    parameterPath: \"value\",\n    mapper: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n            name: \"Stream\"\n        }\n    }\n};\nconst accept3 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/json\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst value4 = {\n    parameterPath: [\"options\", \"value\"],\n    mapper: {\n        serializedName: \"value\",\n        type: {\n            name: \"Stream\"\n        }\n    }\n};\nconst digest2 = {\n    parameterPath: \"digest\",\n    mapper: {\n        serializedName: \"digest\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst range = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"Range\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst contentType3 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/x-www-form-urlencoded\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst grantType = {\n    parameterPath: \"grantType\",\n    mapper: {\n        serializedName: \"grant_type\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst service = {\n    parameterPath: \"service\",\n    mapper: {\n        serializedName: \"service\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst tenant = {\n    parameterPath: [\"options\", \"tenant\"],\n    mapper: {\n        serializedName: \"tenant\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst refreshToken = {\n    parameterPath: [\"options\", \"refreshToken\"],\n    mapper: {\n        serializedName: \"refresh_token\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst accessToken = {\n    parameterPath: [\"options\", \"accessToken\"],\n    mapper: {\n        serializedName: \"access_token\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst accept4 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/json\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst scope = {\n    parameterPath: \"scope\",\n    mapper: {\n        serializedName: \"scope\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst refreshToken1 = {\n    parameterPath: \"refreshToken\",\n    mapper: {\n        serializedName: \"refresh_token\",\n        required: true,\n        type: {\n            name: \"String\"\n        }\n    }\n};\nconst grantType1 = {\n    parameterPath: \"grantType\",\n    mapper: {\n        serializedName: \"grant_type\",\n        required: true,\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"refresh_token\", \"password\"]\n        }\n    }\n};\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n/** Class containing ContainerRegistry operations. */\nclass ContainerRegistryImpl {\n    /**\n     * Initialize a new instance of the class ContainerRegistry class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2\n     * @param options The options parameters.\n     */\n    checkDockerV2Support(options) {\n        return this.client.sendOperationRequest({ options }, checkDockerV2SupportOperationSpec);\n    }\n    /**\n     * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.\n     * @param name Name of the image (including the namespace)\n     * @param reference A tag or a digest, pointing to a specific image\n     * @param options The options parameters.\n     */\n    getManifest(name, reference, options) {\n        return this.client.sendOperationRequest({ name, reference, options }, getManifestOperationSpec);\n    }\n    /**\n     * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.\n     * @param name Name of the image (including the namespace)\n     * @param reference A tag or a digest, pointing to a specific image\n     * @param payload Manifest body, can take v1 or v2 values depending on accept header\n     * @param options The options parameters.\n     */\n    createManifest(name, reference, payload, options) {\n        return this.client.sendOperationRequest({ name, reference, payload, options }, createManifestOperationSpec);\n    }\n    /**\n     * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted\n     * by `digest`.\n     * @param name Name of the image (including the namespace)\n     * @param reference Digest of a BLOB\n     * @param options The options parameters.\n     */\n    deleteManifest(name, reference, options) {\n        return this.client.sendOperationRequest({ name, reference, options }, deleteManifestOperationSpec);\n    }\n    /**\n     * List repositories\n     * @param options The options parameters.\n     */\n    getRepositories(options) {\n        return this.client.sendOperationRequest({ options }, getRepositoriesOperationSpec);\n    }\n    /**\n     * Get repository attributes\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    getProperties(name, options) {\n        return this.client.sendOperationRequest({ name, options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Delete the repository identified by `name`\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    deleteRepository(name, options) {\n        return this.client.sendOperationRequest({ name, options }, deleteRepositoryOperationSpec);\n    }\n    /**\n     * Update the attribute identified by `name` where `reference` is the name of the repository.\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    updateProperties(name, options) {\n        return this.client.sendOperationRequest({ name, options }, updatePropertiesOperationSpec);\n    }\n    /**\n     * List tags of a repository\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    getTags(name, options) {\n        return this.client.sendOperationRequest({ name, options }, getTagsOperationSpec);\n    }\n    /**\n     * Get tag attributes by tag\n     * @param name Name of the image (including the namespace)\n     * @param reference Tag name\n     * @param options The options parameters.\n     */\n    getTagProperties(name, reference, options) {\n        return this.client.sendOperationRequest({ name, reference, options }, getTagPropertiesOperationSpec);\n    }\n    /**\n     * Update tag attributes\n     * @param name Name of the image (including the namespace)\n     * @param reference Tag name\n     * @param options The options parameters.\n     */\n    updateTagAttributes(name, reference, options) {\n        return this.client.sendOperationRequest({ name, reference, options }, updateTagAttributesOperationSpec);\n    }\n    /**\n     * Delete tag\n     * @param name Name of the image (including the namespace)\n     * @param reference Tag name\n     * @param options The options parameters.\n     */\n    deleteTag(name, reference, options) {\n        return this.client.sendOperationRequest({ name, reference, options }, deleteTagOperationSpec);\n    }\n    /**\n     * List manifests of a repository\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    getManifests(name, options) {\n        return this.client.sendOperationRequest({ name, options }, getManifestsOperationSpec);\n    }\n    /**\n     * Get manifest attributes\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param options The options parameters.\n     */\n    getManifestProperties(name, digest, options) {\n        return this.client.sendOperationRequest({ name, digest, options }, getManifestPropertiesOperationSpec);\n    }\n    /**\n     * Update properties of a manifest\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param options The options parameters.\n     */\n    updateManifestProperties(name, digest, options) {\n        return this.client.sendOperationRequest({ name, digest, options }, updateManifestPropertiesOperationSpec);\n    }\n    /**\n     * GetRepositoriesNext\n     * @param nextLink The nextLink from the previous successful call to the GetRepositories method.\n     * @param options The options parameters.\n     */\n    getRepositoriesNext(nextLink, options) {\n        return this.client.sendOperationRequest({ nextLink, options }, getRepositoriesNextOperationSpec);\n    }\n    /**\n     * GetTagsNext\n     * @param name Name of the image (including the namespace)\n     * @param nextLink The nextLink from the previous successful call to the GetTags method.\n     * @param options The options parameters.\n     */\n    getTagsNext(name, nextLink, options) {\n        return this.client.sendOperationRequest({ name, nextLink, options }, getTagsNextOperationSpec);\n    }\n    /**\n     * GetManifestsNext\n     * @param name Name of the image (including the namespace)\n     * @param nextLink The nextLink from the previous successful call to the GetManifests method.\n     * @param options The options parameters.\n     */\n    getManifestsNext(name, nextLink, options) {\n        return this.client.sendOperationRequest({ name, nextLink, options }, getManifestsNextOperationSpec);\n    }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\nconst checkDockerV2SupportOperationSpec = {\n    path: \"/v2/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {},\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url],\n    headerParameters: [accept],\n    serializer\n};\nconst getManifestOperationSpec = {\n    path: \"/v2/{name}/manifests/{reference}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: ManifestWrapper\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, name, reference],\n    headerParameters: [accept, accept1],\n    serializer\n};\nconst createManifestOperationSpec = {\n    path: \"/v2/{name}/manifests/{reference}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            bodyMapper: { type: { name: \"any\" } },\n            headersMapper: ContainerRegistryCreateManifestHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: payload,\n    urlParameters: [url, name, reference],\n    headerParameters: [accept, contentType],\n    mediaType: \"json\",\n    serializer\n};\nconst deleteManifestOperationSpec = {\n    path: \"/v2/{name}/manifests/{reference}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {},\n        404: {},\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, name, reference],\n    headerParameters: [accept],\n    serializer\n};\nconst getRepositoriesOperationSpec = {\n    path: \"/acr/v1/_catalog\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Repositories,\n            headersMapper: ContainerRegistryGetRepositoriesHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [last, n, apiVersion],\n    urlParameters: [url],\n    headerParameters: [accept],\n    serializer\n};\nconst getPropertiesOperationSpec = {\n    path: \"/acr/v1/{name}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: ContainerRepositoryProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [apiVersion],\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer\n};\nconst deleteRepositoryOperationSpec = {\n    path: \"/acr/v1/{name}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {},\n        404: {},\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [apiVersion],\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer\n};\nconst updatePropertiesOperationSpec = {\n    path: \"/acr/v1/{name}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        200: {\n            bodyMapper: ContainerRepositoryProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: value,\n    queryParameters: [apiVersion],\n    urlParameters: [url, name],\n    headerParameters: [accept, contentType1],\n    mediaType: \"json\",\n    serializer\n};\nconst getTagsOperationSpec = {\n    path: \"/acr/v1/{name}/_tags\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: TagList,\n            headersMapper: ContainerRegistryGetTagsHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [\n        last,\n        n,\n        apiVersion,\n        orderby,\n        digest\n    ],\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer\n};\nconst getTagPropertiesOperationSpec = {\n    path: \"/acr/v1/{name}/_tags/{reference}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: ArtifactTagProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [apiVersion],\n    urlParameters: [url, name, reference],\n    headerParameters: [accept],\n    serializer\n};\nconst updateTagAttributesOperationSpec = {\n    path: \"/acr/v1/{name}/_tags/{reference}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        200: {\n            bodyMapper: ArtifactTagProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: value1,\n    queryParameters: [apiVersion],\n    urlParameters: [url, name, reference],\n    headerParameters: [accept, contentType1],\n    mediaType: \"json\",\n    serializer\n};\nconst deleteTagOperationSpec = {\n    path: \"/acr/v1/{name}/_tags/{reference}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {},\n        404: {},\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [apiVersion],\n    urlParameters: [url, name, reference],\n    headerParameters: [accept],\n    serializer\n};\nconst getManifestsOperationSpec = {\n    path: \"/acr/v1/{name}/_manifests\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: AcrManifests,\n            headersMapper: ContainerRegistryGetManifestsHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [\n        last,\n        n,\n        apiVersion,\n        orderby\n    ],\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer\n};\nconst getManifestPropertiesOperationSpec = {\n    path: \"/acr/v1/{name}/_manifests/{digest}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: ArtifactManifestProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [apiVersion],\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept],\n    serializer\n};\nconst updateManifestPropertiesOperationSpec = {\n    path: \"/acr/v1/{name}/_manifests/{digest}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        200: {\n            bodyMapper: ArtifactManifestProperties\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: value2,\n    queryParameters: [apiVersion],\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept, contentType1],\n    mediaType: \"json\",\n    serializer\n};\nconst getRepositoriesNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: Repositories,\n            headersMapper: ContainerRegistryGetRepositoriesNextHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [last, n, apiVersion],\n    urlParameters: [url, nextLink],\n    headerParameters: [accept],\n    serializer\n};\nconst getTagsNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: TagList,\n            headersMapper: ContainerRegistryGetTagsNextHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [\n        last,\n        n,\n        apiVersion,\n        orderby,\n        digest\n    ],\n    urlParameters: [url, name, nextLink],\n    headerParameters: [accept],\n    serializer\n};\nconst getManifestsNextOperationSpec = {\n    path: \"{nextLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: AcrManifests,\n            headersMapper: ContainerRegistryGetManifestsNextHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [\n        last,\n        n,\n        apiVersion,\n        orderby\n    ],\n    urlParameters: [url, name, nextLink],\n    headerParameters: [accept],\n    serializer\n};\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n/** Class containing ContainerRegistryBlob operations. */\nclass ContainerRegistryBlobImpl {\n    /**\n     * Initialize a new instance of the class ContainerRegistryBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Retrieve the blob from the registry identified by digest.\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param options The options parameters.\n     */\n    getBlob(name, digest, options) {\n        return this.client.sendOperationRequest({ name, digest, options }, getBlobOperationSpec);\n    }\n    /**\n     * Same as GET, except only the headers are returned.\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param options The options parameters.\n     */\n    checkBlobExists(name, digest, options) {\n        return this.client.sendOperationRequest({ name, digest, options }, checkBlobExistsOperationSpec);\n    }\n    /**\n     * Removes an already uploaded blob.\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param options The options parameters.\n     */\n    deleteBlob(name, digest, options) {\n        return this.client.sendOperationRequest({ name, digest, options }, deleteBlobOperationSpec);\n    }\n    /**\n     * Mount a blob identified by the `mount` parameter from another repository.\n     * @param name Name of the image (including the namespace)\n     * @param mount Digest of blob to mount from the source repository.\n     * @param fromParam Name of the source repository.\n     * @param options The options parameters.\n     */\n    mountBlob(name, mount, fromParam, options) {\n        return this.client.sendOperationRequest({ name, mount, fromParam, options }, mountBlobOperationSpec);\n    }\n    /**\n     * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the\n     * current status of a resumable upload.\n     * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n     *                 (must do substring(1) )\n     * @param options The options parameters.\n     */\n    getUploadStatus(location, options) {\n        return this.client.sendOperationRequest({ location, options }, getUploadStatusOperationSpec);\n    }\n    /**\n     * Upload a stream of data without completing the upload.\n     * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n     *                 (must do substring(1) )\n     * @param value Raw data of blob\n     * @param options The options parameters.\n     */\n    uploadChunk(location, value, options) {\n        return this.client.sendOperationRequest({ location, value, options }, uploadChunkOperationSpec);\n    }\n    /**\n     * Complete the upload, providing all the data in the body, if necessary. A request without a body will\n     * just complete the upload with previously uploaded content.\n     * @param digest Digest of a BLOB\n     * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n     *                 (must do substring(1) )\n     * @param options The options parameters.\n     */\n    completeUpload(digest, location, options) {\n        return this.client.sendOperationRequest({ digest, location, options }, completeUploadOperationSpec);\n    }\n    /**\n     * Cancel outstanding upload processes, releasing associated resources. If this is not called, the\n     * unfinished uploads will eventually timeout.\n     * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n     *                 (must do substring(1) )\n     * @param options The options parameters.\n     */\n    cancelUpload(location, options) {\n        return this.client.sendOperationRequest({ location, options }, cancelUploadOperationSpec);\n    }\n    /**\n     * Initiate a resumable blob upload with an empty request body.\n     * @param name Name of the image (including the namespace)\n     * @param options The options parameters.\n     */\n    startUpload(name, options) {\n        return this.client.sendOperationRequest({ name, options }, startUploadOperationSpec);\n    }\n    /**\n     * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233\n     * compliant range requests. Support can be detected by issuing a HEAD request. If the header\n     * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n     * @param options The options parameters.\n     */\n    getChunk(name, digest, range, options) {\n        return this.client.sendOperationRequest({ name, digest, range, options }, getChunkOperationSpec);\n    }\n    /**\n     * Same as GET, except only the headers are returned.\n     * @param name Name of the image (including the namespace)\n     * @param digest Digest of a BLOB\n     * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n     * @param options The options parameters.\n     */\n    checkChunkExists(name, digest, range, options) {\n        return this.client.sendOperationRequest({ name, digest, range, options }, checkChunkExistsOperationSpec);\n    }\n}\n// Operation Specifications\nconst serializer$1 = coreClient.createSerializer(Mappers, /* isXml */ false);\nconst getBlobOperationSpec = {\n    path: \"/v2/{name}/blobs/{digest}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\"\n            },\n            headersMapper: ContainerRegistryBlobGetBlobHeaders\n        },\n        307: {\n            headersMapper: ContainerRegistryBlobGetBlobHeaders\n        },\n        default: {}\n    },\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept2],\n    serializer: serializer$1\n};\nconst checkBlobExistsOperationSpec = {\n    path: \"/v2/{name}/blobs/{digest}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: ContainerRegistryBlobCheckBlobExistsHeaders\n        },\n        307: {\n            headersMapper: ContainerRegistryBlobCheckBlobExistsHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept],\n    serializer: serializer$1\n};\nconst deleteBlobOperationSpec = {\n    path: \"/v2/{name}/blobs/{digest}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\"\n            },\n            headersMapper: ContainerRegistryBlobDeleteBlobHeaders\n        },\n        default: {}\n    },\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept2],\n    serializer: serializer$1\n};\nconst mountBlobOperationSpec = {\n    path: \"/v2/{name}/blobs/uploads/\",\n    httpMethod: \"POST\",\n    responses: {\n        201: {\n            headersMapper: ContainerRegistryBlobMountBlobHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    queryParameters: [fromParam, mount],\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer: serializer$1\n};\nconst getUploadStatusOperationSpec = {\n    path: \"/{nextBlobUuidLink}\",\n    httpMethod: \"GET\",\n    responses: {\n        204: {\n            headersMapper: ContainerRegistryBlobGetUploadStatusHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, location],\n    headerParameters: [accept],\n    serializer: serializer$1\n};\nconst uploadChunkOperationSpec = {\n    path: \"/{nextBlobUuidLink}\",\n    httpMethod: \"PATCH\",\n    responses: {\n        202: {\n            headersMapper: ContainerRegistryBlobUploadChunkHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: value3,\n    urlParameters: [url, location],\n    headerParameters: [contentType2, accept3],\n    mediaType: \"binary\",\n    serializer: serializer$1\n};\nconst completeUploadOperationSpec = {\n    path: \"/{nextBlobUuidLink}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: ContainerRegistryBlobCompleteUploadHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    requestBody: value4,\n    queryParameters: [digest2],\n    urlParameters: [url, location],\n    headerParameters: [contentType2, accept3],\n    mediaType: \"binary\",\n    serializer: serializer$1\n};\nconst cancelUploadOperationSpec = {\n    path: \"/{nextBlobUuidLink}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        204: {},\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, location],\n    headerParameters: [accept],\n    serializer: serializer$1\n};\nconst startUploadOperationSpec = {\n    path: \"/v2/{name}/blobs/uploads/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            headersMapper: ContainerRegistryBlobStartUploadHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, name],\n    headerParameters: [accept],\n    serializer: serializer$1\n};\nconst getChunkOperationSpec = {\n    path: \"/v2/{name}/blobs/{digest}\",\n    httpMethod: \"GET\",\n    responses: {\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\"\n            },\n            headersMapper: ContainerRegistryBlobGetChunkHeaders\n        },\n        default: {}\n    },\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept2, range],\n    serializer: serializer$1\n};\nconst checkChunkExistsOperationSpec = {\n    path: \"/v2/{name}/blobs/{digest}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: ContainerRegistryBlobCheckChunkExistsHeaders\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    urlParameters: [url, name, digest1],\n    headerParameters: [accept, range],\n    serializer: serializer$1\n};\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n/** Class containing Authentication operations. */\nclass AuthenticationImpl {\n    /**\n     * Initialize a new instance of the class Authentication class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Exchange AAD tokens for an ACR refresh Token\n     * @param grantType Can take a value of access_token_refresh_token, or access_token, or refresh_token\n     * @param service Indicates the name of your Azure container registry.\n     * @param options The options parameters.\n     */\n    exchangeAadAccessTokenForAcrRefreshToken(grantType, service, options) {\n        return this.client.sendOperationRequest({ grantType, service, options }, exchangeAadAccessTokenForAcrRefreshTokenOperationSpec);\n    }\n    /**\n     * Exchange ACR Refresh token for an ACR Access Token\n     * @param service Indicates the name of your Azure container registry.\n     * @param scope Which is expected to be a valid scope, and can be specified more than once for multiple\n     *              scope requests. You obtained this from the Www-Authenticate response header from the challenge.\n     * @param refreshToken Must be a valid ACR refresh token\n     * @param grantType Grant type is expected to be refresh_token\n     * @param options The options parameters.\n     */\n    exchangeAcrRefreshTokenForAcrAccessToken(service, scope, refreshToken, grantType, options) {\n        return this.client.sendOperationRequest({ service, scope, refreshToken, grantType, options }, exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec);\n    }\n}\n// Operation Specifications\nconst serializer$2 = coreClient.createSerializer(Mappers, /* isXml */ false);\nconst exchangeAadAccessTokenForAcrRefreshTokenOperationSpec = {\n    path: \"/oauth2/exchange\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: AcrRefreshToken\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    formDataParameters: [\n        grantType,\n        service,\n        tenant,\n        refreshToken,\n        accessToken\n    ],\n    queryParameters: [apiVersion],\n    urlParameters: [url],\n    headerParameters: [contentType3, accept4],\n    serializer: serializer$2\n};\nconst exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec = {\n    path: \"/oauth2/token\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: AcrAccessToken\n        },\n        default: {\n            bodyMapper: AcrErrors\n        }\n    },\n    formDataParameters: [\n        service,\n        scope,\n        refreshToken1,\n        grantType1\n    ],\n    queryParameters: [apiVersion],\n    urlParameters: [url],\n    headerParameters: [contentType3, accept4],\n    serializer: serializer$2\n};\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n/** @internal */\nclass GeneratedClientContext extends coreClient.ServiceClient {\n    /**\n     * Initializes a new instance of the GeneratedClientContext class.\n     * @param url Registry login URL\n     * @param apiVersion Api Version\n     * @param options The parameter options\n     */\n    constructor(url, apiVersion, options) {\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        if (apiVersion === undefined) {\n            throw new Error(\"'apiVersion' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\"\n        };\n        const packageDetails = `azsdk-js-container-registry/1.0.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix\n            }, baseUri: options.endpoint || \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        this.apiVersion = apiVersion;\n    }\n}\n\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n/** @internal */\nclass GeneratedClient extends GeneratedClientContext {\n    /**\n     * Initializes a new instance of the GeneratedClient class.\n     * @param url Registry login URL\n     * @param apiVersion Api Version\n     * @param options The parameter options\n     */\n    constructor(url, apiVersion, options) {\n        super(url, apiVersion, options);\n        this.containerRegistry = new ContainerRegistryImpl(this);\n        this.containerRegistryBlob = new ContainerRegistryBlobImpl(this);\n        this.authentication = new AuthenticationImpl(this);\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a span using the global tracer.\n *\n * @param name - The name of the operation being performed.\n * @param tracingOptions - The options for the underlying http request.\n *\n * @internal\n */\nconst createSpan = coreTracing.createSpanFunction({\n    namespace: \"Azure.Containers\",\n    packagePrefix: \"Azure.Containers.ContainerRegistry\",\n});\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Extract the path part from the next link value returned by the service,\n * @internal\n */\nfunction extractNextLink(value) {\n    // The link value has this pattern\n    //     `</acr/v1/name/...&n=2&orderby=>; rel=\"next\"`\n    // and we only want the part inside of <...>\n    return value === null || value === void 0 ? void 0 : value.substr(1, value.indexOf(\">\") - 1);\n}\n/**\n * Checks whether a string is a digest\n * @internal\n */\nfunction isDigest(tagOrDigest) {\n    return tagOrDigest.includes(\":\");\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Parses an WWW-Authenticate response.\n * This transforms a string value like:\n * `Bearer authorization=\"some_authorization\", resource=\"https://some.url\"`\n * into an object like:\n * `{ authorization: \"some_authorization\", resource: \"https://some.url\" }`\n * @param wwwAuthenticate - String value in the WWW-Authenticate header\n */\nfunction parseWWWAuthenticate(wwwAuthenticate) {\n    // First we split the string by either `,`, `, ` or ` `.\n    const parts = wwwAuthenticate.split(/, *| +/);\n    // Then we only keep the strings with an equal sign after a word and before a quote.\n    // also splitting these sections by their equal sign\n    const keyValues = parts.reduce((acc, str) => (str.match(/\\w=\"/) ? [...acc, str.split(\"=\")] : acc), []);\n    // Then we transform these key-value pairs back into an object.\n    const parsed = keyValues.reduce((result, [key, value]) => (Object.assign(Object.assign({}, result), { [key]: value.slice(1, -1) })), {});\n    return parsed;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction delay(t, value) {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return {\n        get cachedToken() {\n            return token || undefined;\n        },\n        getToken: async (scopes, tokenOptions) => {\n            //\n            // Simple rules:\n            // - If we MUST refresh, then return the refresh task, blocking\n            //   the pipeline until a token is available.\n            // - If we SHOULD refresh, then run refresh but don't return it\n            //   (we can still use the cached token).\n            // - Return the token, since it's fine if we didn't return in\n            //   step 1.\n            //\n            if (cycler.mustRefresh)\n                return refresh(scopes, tokenOptions);\n            if (cycler.shouldRefresh) {\n                refresh(scopes, tokenOptions);\n            }\n            return token;\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst fiveMinutesInMs = 5 * 60 * 1000;\n/**\n * Handles challenge based authentication for Container Registry Service.\n *```\n *  The challenge-based authorization flow for ACR is illustrated in the following steps.\n *  For example, GET /api/v1/acr/repositories translates into the following calls.\n *      Step 1: GET /api/v1/acr/repositories\n *  Return Header: 401: www-authenticate header - Bearer realm=\"{url}\",service=\"{serviceName}\",scope=\"{scope}\",error=\"invalid_token\"\n *      Step 2: Retrieve the serviceName, scope from the WWW-Authenticate header.  (Parse the string.)\n *      Step 3: POST /api/oauth2/exchange\n *  Request Body : { service, scope, grant-type, aadToken with ARM scope }\n *  Response Body: { acrRefreshToken }\n *      Step 4: POST /api/oauth2/token\n *  Request Body: { acrRefreshToken, scope, grant-type }\n *  Response Body: { acrAccessToken }\n *      Step 5: GET /api/v1/acr/repositories\n *  Request Header: { Bearer acrTokenAccess }\n *```\n */\nclass ChallengeHandler {\n    constructor(credential, options = {}) {\n        this.credential = credential;\n        this.options = options;\n        this.cycler = createTokenCycler(credential, {\n            refreshWindowInMs: fiveMinutesInMs,\n        });\n    }\n    authorizeRequest(_options) {\n        return Promise.resolve();\n    }\n    /**\n     * Updates  the authentication context based on the challenge.\n     */\n    async authorizeRequestOnChallenge(options) {\n        var _a;\n        // Once we're here, we've completed Step 1.\n        const challenge = (_a = options.response) === null || _a === void 0 ? void 0 : _a.headers.get(\"WWW-Authenticate\");\n        if (!challenge) {\n            throw new Error(\"Failed to retrieve challenge from response headers\");\n        }\n        // Step 2: Parse challenge string to retrieve serviceName and scope, where scope is the ACR Scope\n        const { service, scope } = parseWWWAuthenticate(challenge);\n        if (!service) {\n            throw new Error(\"Failed to retrieve 'service' from challenge\");\n        }\n        if (!scope) {\n            throw new Error(\"Failed to retrieve 'scope' from challenge\");\n        }\n        // Step 3: Exchange AAD Access Token for ACR Refresh Token\n        //   For anonymous access, we send the request with grant_type=password and an empty ACR refresh token\n        //   For non-anonymous access, we get an AAD token then exchange it for an ACR fresh token\n        let grantType;\n        let acrRefreshToken;\n        if (this.credential.isAnonymousAccess) {\n            grantType = \"password\";\n            acrRefreshToken = \"\";\n        }\n        else {\n            grantType = \"refresh_token\";\n            acrRefreshToken = (await this.cycler.getToken(scope, Object.assign(Object.assign({}, options), { service }))).token;\n        }\n        // Step 4: Send in acrRefreshToken and get back acrAccessToken\n        const acrAccessToken = await this.credential.tokenService.ExchangeAcrRefreshTokenForAcrAccessTokenAsync(acrRefreshToken, service, scope, grantType, this.options);\n        // Step 5 - Authorize Request.  At this point we're done with AAD and using an ACR access token.\n        options.request.headers.set(\"Authorization\", `Bearer ${acrAccessToken}`);\n        return true;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction toManifestWritableProperties(from) {\n    // don't return unwanted properties, namely `quarantineState` and `quarantineDetails`\n    return from\n        ? {\n            canDelete: from.canDelete,\n            canList: from.canList,\n            canRead: from.canRead,\n            canWrite: from.canWrite,\n        }\n        : undefined;\n}\nfunction toArtifactManifestProperties(from, repositoryName, registryLoginServer) {\n    var _a, _b, _c, _d;\n    return Object.assign({ registryLoginServer,\n        repositoryName, digest: from.digest, sizeInBytes: from.size, createdOn: from.createdOn, lastUpdatedOn: from.lastUpdatedOn, architecture: (_a = from.architecture) !== null && _a !== void 0 ? _a : undefined, operatingSystem: (_b = from.operatingSystem) !== null && _b !== void 0 ? _b : undefined, relatedArtifacts: (_c = from.relatedArtifacts) !== null && _c !== void 0 ? _c : [], tags: (_d = from.tags) !== null && _d !== void 0 ? _d : [] }, toManifestWritableProperties(from));\n}\nfunction toServiceTagOrderBy(orderBy) {\n    return orderBy === \"LastUpdatedOnAscending\"\n        ? \"timeasc\"\n        : orderBy === \"LastUpdatedOnDescending\"\n            ? \"timedesc\"\n            : undefined;\n}\nfunction toServiceManifestOrderBy(orderBy) {\n    return orderBy === \"LastUpdatedOnAscending\"\n        ? \"timeasc\"\n        : orderBy === \"LastUpdatedOnDescending\"\n            ? \"timedesc\"\n            : undefined;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The client class used to interact with the Container Registry service.\n * @internal\n */\nclass RegistryArtifactImpl {\n    /**\n     * Creates an instance of a RegistryArtifact.\n     * @param registryEndpoint - the URL to the Container Registry endpoint\n     * @param repositoryName - the name of the repository\n     * @param tagOrDigest - the tag or digest of this artifact\n     * @param client - the generated client that interacts with service\n     */\n    constructor(registryEndpoint, repositoryName, tagOrDigest, client) {\n        this.tagOrDigest = tagOrDigest;\n        this.registryEndpoint = registryEndpoint;\n        this.repositoryName = repositoryName;\n        const parsedUrl = new url$1.URL(registryEndpoint);\n        if (isDigest(tagOrDigest)) {\n            this.digest = tagOrDigest;\n            this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}@${this.digest}`;\n        }\n        else {\n            this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}:${tagOrDigest}`;\n        }\n        this.client = client;\n    }\n    /**\n     * digest of this artifact.\n     */\n    async getDigest() {\n        if (this.digest) {\n            return this.digest;\n        }\n        if (!isDigest(this.tagOrDigest)) {\n            this.digest = (await this.getTagProperties(this.tagOrDigest)).digest;\n        }\n        else {\n            this.digest = this.tagOrDigest;\n        }\n        return this.digest;\n    }\n    /**\n     * Deletes this registry artifact by deleting its manifest.\n     * @param options -\n     */\n    async delete(options = {}) {\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-delete\", options);\n        try {\n            await this.client.containerRegistry.deleteManifest(this.repositoryName, await this.getDigest(), updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Deletes a tag. This removes the tag from the artifact and its manifest.\n     * @param tag - the name of the tag to delete.\n     * @param options -\n     */\n    async deleteTag(tag, options = {}) {\n        if (!tag) {\n            throw new Error(\"invalid tag\");\n        }\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-deleteTag\", options);\n        try {\n            await this.client.containerRegistry.deleteTag(this.repositoryName, tag, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Retrieves the properties of the manifest that uniquely identifies this artifact.\n     * @param options -\n     */\n    async getManifestProperties(options = {}) {\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-getManifestProperties\", options);\n        try {\n            const result = await this.client.containerRegistry.getManifestProperties(this.repositoryName, await this.getDigest(), updatedOptions);\n            return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Updates the properties of the artifact's manifest.\n     *\n     * Example usage:\n     *\n     * ```javascript\n     * const client = new ContainerRegistryClient(url, credential);\n     * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n     * const updated = await artifact.updateManifestProperties({\n     *   canDelete: false,\n     *   canList: false,\n     *   canRead: false,\n     *   canWrite: false\n     * });\n     * ```\n     * @param options -\n     */\n    async updateManifestProperties(options) {\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-updateManifestProperties\", Object.assign(Object.assign({}, options), { value: {\n                canDelete: options.canDelete,\n                canWrite: options.canWrite,\n                canList: options.canList,\n                canRead: options.canRead,\n            } }));\n        try {\n            const result = await this.client.containerRegistry.updateManifestProperties(this.repositoryName, await this.getDigest(), updatedOptions);\n            return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Retrieves the properties of the specified tag.\n     * @param tag - the tag to retrieve properties.\n     * @param options -\n     */\n    async getTagProperties(tag, options = {}) {\n        if (!tag) {\n            throw new Error(\"invalid tag\");\n        }\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-getTagProperties\", options);\n        try {\n            return await this.client.containerRegistry.getTagProperties(this.repositoryName, tag, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Updates the properties of a given tag.\n     *\n     * Example usage:\n     *\n     * ```javascript\n     * const client = new ContainerRegistryClient(url, credential);\n     * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n     * const updated = await artifact.updateTagProperties(tag, {\n     *   canDelete: false,\n     *   canList: false,\n     *   canRead: false,\n     *   canWrite: false\n     * });\n     * ```\n     * @param tag - name of the tag to update properties on\n     * @param options -\n     */\n    async updateTagProperties(tag, options) {\n        if (!tag) {\n            throw new Error(\"invalid tag\");\n        }\n        const { span, updatedOptions } = createSpan(\"RegistryArtifact-updateTagProperties\", Object.assign(Object.assign({}, options), { value: {\n                canDelete: options.canDelete,\n                canWrite: options.canWrite,\n                canList: options.canList,\n                canRead: options.canRead,\n            } }));\n        try {\n            return await this.client.containerRegistry.updateTagAttributes(this.repositoryName, tag, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.\n     *\n     * Example using `for-await-of` syntax:\n     *\n     * ```javascript\n     * const client = new ContainerRegistryClient(url, credentials);\n     * const repository = client.getRepository(repositoryName);\n     * const artifact = repository.getArtifact(digest)\n     * for await (const tag of artifact.listTagProperties()) {\n     *   console.log(\"tag: \", tag);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```javascript\n     * const iter = artifact.listTagProperties();\n     * let item = await iter.next();\n     * while (!item.done) {\n     *   console.log(\"tag properties: \", item.value);\n     *   item = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```javascript\n     * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });\n     * let page = await pages.next();\n     * let i = 1;\n     * while (!page.done) {\n     *  if (page.value) {\n     *    console.log(`-- page ${i++}`);\n     *    for (const tagProperties of page.value) {\n     *      console.log(`  repository name: ${tagProperties}`);\n     *    }\n     *  }\n     *  page = await pages.next();\n     * }\n     * ```\n     * @param options -\n     */\n    listTagProperties(options = {}) {\n        const iter = this.listTagsItems(options);\n        return {\n            next() {\n                return iter.next();\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            byPage: (settings = {}) => this.listTagsPage(settings, options),\n        };\n    }\n    listTagsItems(options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listTagsItems_1() {\n            var e_1, _a;\n            try {\n                for (var _b = tslib.__asyncValues(this.listTagsPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {\n                    const page = _c.value;\n                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    listTagsPage(continuationState, options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listTagsPage_1() {\n            const orderby = toServiceTagOrderBy(options.order);\n            if (!continuationState.continuationToken) {\n                const optionsComplete = Object.assign(Object.assign({}, options), { n: continuationState.maxPageSize, orderby });\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getTags(this.repositoryName, optionsComplete));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.tagAttributeBases) {\n                    const array = currentPage.tagAttributeBases.map((t) => {\n                        return Object.assign({ registryLoginServer: currentPage.registryLoginServer, repositoryName: currentPage.repository }, t);\n                    });\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getTagsNext(this.repositoryName, continuationState.continuationToken, options));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.tagAttributeBases) {\n                    const array = currentPage.tagAttributeBases.map((t) => {\n                        return Object.assign({ registryLoginServer: currentPage.registryLoginServer, repositoryName: currentPage.repository }, t);\n                    });\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The client class used to interact with the Container Registry service.\n * @internal\n */\nclass ContainerRepositoryImpl {\n    /**\n     * Creates an instance of a ContainerRepository.\n     * @param registryEndpoint - the URL to the Container Registry endpoint\n     * @param name - the name of the repository\n     * @param client - the generated client that interacts with service\n     */\n    constructor(registryEndpoint, name, client) {\n        this.registryEndpoint = registryEndpoint;\n        this.name = name;\n        this.client = client;\n    }\n    /**\n     * Deletes this repository and all artifacts that are part of its logical group.\n     *\n     * @param options - optional configuration for the operation\n     */\n    async delete(options = {}) {\n        const { span, updatedOptions } = createSpan(\"ContainerRepository-delete\", options);\n        try {\n            await this.client.containerRegistry.deleteRepository(this.name, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Returns an helper instance of {@link RegistryArtifact} for the given tag or digest.\n     * @param tagOrDigest - the tag or digest of the artifact\n     */\n    getArtifact(tagOrDigest) {\n        if (!tagOrDigest) {\n            throw new Error(\"invalid tagOrDigest\");\n        }\n        return new RegistryArtifactImpl(this.registryEndpoint, this.name, tagOrDigest, this.client);\n    }\n    /**\n     * Retrieves the properties of this repository.\n     * @param options -\n     */\n    async getProperties(options = {}) {\n        const { span, updatedOptions } = createSpan(\"ContainerRepository-getProperties\", options);\n        try {\n            return await this.client.containerRegistry.getProperties(this.name, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Updates the properties of this repository.\n     *\n     * Example usage:\n     *\n     * ```javascript\n     * const client = new ContainerRegistryClient(url, credential);\n     * const repository = client.getRepository(repositoryName)\n     * const updated = await repository.updateProperties({\n     *   canDelete: false,\n     *   canList: false,\n     *   canRead: false,\n     *   canWrite: false\n     * });\n     * ```\n     * @param options -\n     */\n    async updateProperties(options) {\n        const value = {\n            canDelete: options.canDelete,\n            canWrite: options.canWrite,\n            canList: options.canList,\n            canRead: options.canRead,\n        };\n        const { span, updatedOptions } = createSpan(\"ContainerRepository-updateProperties\", Object.assign(Object.assign({}, options), { value }));\n        try {\n            return await this.client.containerRegistry.updateProperties(this.name, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Returns an async iterable iterator to list manifest properties.\n     * This is useful for determining the collection of artifacts associated with\n     * this repository, as each artifact is uniquely identified by its manifest.\n     *\n     * Example using `for-await-of` syntax:\n     *\n     * ```javascript\n     * const client = new ContainerRegistryClient(url, credential);\n     * const repository = client.getRepository(repositoryName)\n     * for await (const manifest of repository.listManifestProperties()) {\n     *   console.log(\"manifest: \", manifest);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```javascript\n     * const iter = repository.listManifestProperties();\n     * let item = await iter.next();\n     * while (!item.done) {\n     *   console.log(\"manifest properties: \", item.value);\n     *   item = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```javascript\n     * const pages = repository.listManifestProperties().byPage({ maxPageSize: 2 });\n     * let page = await pages.next();\n     * let i = 1;\n     * while (!page.done) {\n     *  if (page.value) {\n     *    console.log(`-- page ${i++}`);\n     *    for (const manifestProperties of page.value) {\n     *      console.log(`  manifest properties: ${manifestProperties}`);\n     *    }\n     *  }\n     *  page = await pages.next();\n     * }\n     * ```\n     * @param options -\n     */\n    listManifestProperties(options = {}) {\n        const iter = this.listManifestsItems(options);\n        return {\n            next() {\n                return iter.next();\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            byPage: (settings = {}) => this.listManifestsPage(settings, options),\n        };\n    }\n    listManifestsItems(options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listManifestsItems_1() {\n            var e_1, _a;\n            try {\n                for (var _b = tslib.__asyncValues(this.listManifestsPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {\n                    const page = _c.value;\n                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    listManifestsPage(continuationState, options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listManifestsPage_1() {\n            const orderby = toServiceManifestOrderBy(options.order);\n            if (!continuationState.continuationToken) {\n                const optionsComplete = Object.assign(Object.assign({}, options), { n: continuationState.maxPageSize, orderby });\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getManifests(this.name, optionsComplete));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.manifests) {\n                    const array = currentPage.manifests.map((t) => toArtifactManifestProperties(t, this.name, currentPage.registryLoginServer));\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getManifestsNext(this.name, continuationState.continuationToken, options));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.manifests) {\n                    const array = currentPage.manifests.map((t) => toArtifactManifestProperties(t, this.name, currentPage.registryLoginServer));\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Base64 decode\n *\n * @internal\n * @param encodedString -\n * @returns\n */\nfunction base64decode(encodedString) {\n    return Buffer.from(encodedString, \"base64\").toString();\n}\n\n// Copyright (c) Microsoft Corporation.\nclass ContainerRegistryRefreshTokenCredential {\n    constructor(authClient, authenticationScope, credential) {\n        this.authenticationScope = authenticationScope;\n        this.credential = credential;\n        this.tokenService = new ContainerRegistryTokenService(authClient);\n        this.isAnonymousAccess = !this.credential;\n    }\n    async getToken(_scopes, options) {\n        if (!this.credential) {\n            return null;\n        }\n        const aadToken = await this.credential.getToken(this.authenticationScope, options);\n        if (!aadToken) {\n            throw new Error(\"Failed to retrieve AAD token.\");\n        }\n        return this.tokenService.ExchangeAadAccessTokenForAcrRefreshTokenAsync(aadToken.token, options.service, options);\n    }\n}\nclass ContainerRegistryTokenService {\n    constructor(authClient) {\n        this.authClient = authClient;\n    }\n    async ExchangeAadAccessTokenForAcrRefreshTokenAsync(aadAccessToken, service, options) {\n        const acrRefreshToken = await this.authClient.authentication.exchangeAadAccessTokenForAcrRefreshToken(\"access_token\", service, Object.assign(Object.assign({}, options), { accessToken: aadAccessToken }));\n        if (!acrRefreshToken.refreshToken) {\n            throw new Error(\"Failed to exchange AAD access token for an ACR refresh token.\");\n        }\n        // ACR refresh token expires after three hours\n        const jwtParts = acrRefreshToken.refreshToken.split(\".\");\n        if (jwtParts.length < 3) {\n            throw new Error(\"Invalid JWT structure from ACR refresh token.\");\n        }\n        if (!jwtParts[1]) {\n            throw new Error(\"Invalid JWT payload.\");\n        }\n        const jwtPayload = JSON.parse(base64decode(jwtParts[1]));\n        if (!jwtPayload.exp) {\n            throw new Error(\"Invalid JWT payload structure. No expiration.\");\n        }\n        // JWT expiry is in seconds\n        const expiry = Number.parseInt(jwtPayload.exp) * 1000;\n        return {\n            token: acrRefreshToken.refreshToken,\n            expiresOnTimestamp: expiry,\n        };\n    }\n    async ExchangeAcrRefreshTokenForAcrAccessTokenAsync(acrRefreshToken, service, scope, grantType, options) {\n        const acrAccessToken = await this.authClient.authentication.exchangeAcrRefreshTokenForAcrAccessToken(service, scope, acrRefreshToken, grantType, options);\n        if (!acrAccessToken.accessToken) {\n            throw new Error(\"Failed to exchange ACR refresh token for an ACR access token\");\n        }\n        return acrAccessToken.accessToken;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst LATEST_API_VERSION = \"2021-07-01\";\n/**\n * The client class used to interact with the Container Registry service.\n */\nclass ContainerRegistryClient {\n    constructor(endpoint, credentialOrOptions, clientOptions = {}) {\n        var _a;\n        if (!endpoint) {\n            throw new Error(\"invalid endpoint\");\n        }\n        this.endpoint = endpoint;\n        let credential;\n        let options;\n        if (coreAuth.isTokenCredential(credentialOrOptions)) {\n            credential = credentialOrOptions;\n            options = clientOptions;\n        }\n        else {\n            options = credentialOrOptions !== null && credentialOrOptions !== void 0 ? credentialOrOptions : {};\n        }\n        const internalPipelineOptions = Object.assign(Object.assign({}, options), { loggingOptions: {\n                logger: logger.info,\n                // This array contains header names we want to log that are not already\n                // included as safe. Unknown/unsafe headers are logged as \"<REDACTED>\".\n                additionalAllowedQueryParameters: [\"last\", \"n\", \"orderby\", \"digest\"],\n            } });\n        // Require audience now until we have a default ACR audience from the service.\n        if (!options.audience) {\n            throw new Error(\"ContainerRegistryClientOptions.audience must be set to initialize ContainerRegistryClient.\");\n        }\n        const defaultScope = `${options.audience}/.default`;\n        const serviceVersion = (_a = options.serviceVersion) !== null && _a !== void 0 ? _a : LATEST_API_VERSION;\n        const authClient = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n        this.client = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n        this.client.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({\n            credential,\n            scopes: [defaultScope],\n            challengeCallbacks: new ChallengeHandler(new ContainerRegistryRefreshTokenCredential(authClient, defaultScope, credential)),\n        }));\n    }\n    /**\n     * Deletes the repository identified by the given name and all associated artifacts.\n     *\n     * @param repositoryName - the name of repository to delete\n     * @param options - optional configuration for the operation\n     */\n    async deleteRepository(repositoryName, options = {}) {\n        if (!repositoryName) {\n            throw new Error(\"invalid repositoryName\");\n        }\n        const { span, updatedOptions } = createSpan(\"ContainerRegistryClient-deleteRepository\", options);\n        try {\n            await this.client.containerRegistry.deleteRepository(repositoryName, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Returns an instance of {@link RegistryArtifact} for calling service methods related to the artifact specified by `repositoryName` and `tagOrDigest`.\n     *\n     * @param repositoryName - the name of repository\n     * @param tagOrDigest - tag or digest of the artifact to retrieve\n     */\n    getArtifact(repositoryName, tagOrDigest) {\n        if (!repositoryName) {\n            throw new Error(\"invalid repositoryName\");\n        }\n        if (!tagOrDigest) {\n            throw new Error(\"invalid tagOrDigest\");\n        }\n        return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client).getArtifact(tagOrDigest);\n    }\n    /**\n     * Returns an instance of {@link ContainerRepository} for calling service methods related to the repository specified by `repositoryName`.\n     *\n     * @param repositoryName - the name of repository\n     */\n    getRepository(repositoryName) {\n        if (!repositoryName) {\n            throw new Error(\"invalid repositoryName\");\n        }\n        return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client);\n    }\n    /**\n     * Returns an async iterable iterator to list names of repositories in this registry.\n     *\n     * Example usage:\n     * ```javascript\n     * let client = new ContainerRegistryClient(url, credential);\n     * for await (const repository of client.listRepositoryNames()) {\n     *   console.log(\"repository name: \", repository);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```javascript\n     * let iter = client.listRepositoryNames();\n     * let item = await iter.next();\n     * while (!item.done) {\n     *   console.log(`repository name: ${item.value}`);\n     *   item = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```javascript\n     * const pages = client.listRepositoryNames().byPage({ maxPageSize: 2 });\n     * let page = await pages.next();\n     * let i = 1;\n     * while (!page.done) {\n     *  if (page.value) {\n     *    console.log(`-- page ${i++}`);\n     *    for (const name of page.value) {\n     *      console.log(`  repository name: ${name}`);\n     *    }\n     *  }\n     *  page = await pages.next();\n     * }\n     * ```\n     * @param options -\n     */\n    listRepositoryNames(options = {}) {\n        const iter = this.listRepositoryItems(options);\n        return {\n            next() {\n                return iter.next();\n            },\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            byPage: (settings = {}) => this.listRepositoriesPage(settings, options),\n        };\n    }\n    listRepositoryItems(options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listRepositoryItems_1() {\n            var e_1, _a;\n            try {\n                for (var _b = tslib.__asyncValues(this.listRepositoriesPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {\n                    const page = _c.value;\n                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    listRepositoriesPage(continuationState, options = {}) {\n        return tslib.__asyncGenerator(this, arguments, function* listRepositoriesPage_1() {\n            if (!continuationState.continuationToken) {\n                const optionsComplete = Object.assign(Object.assign({}, options), { n: continuationState.maxPageSize });\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getRepositories(optionsComplete));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.repositories) {\n                    const array = currentPage.repositories;\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n            while (continuationState.continuationToken) {\n                const currentPage = yield tslib.__await(this.client.containerRegistry.getRepositoriesNext(continuationState.continuationToken, options));\n                continuationState.continuationToken = extractNextLink(currentPage.link);\n                if (currentPage.repositories) {\n                    const array = currentPage.repositories;\n                    yield yield tslib.__await(Object.defineProperty(array, \"continuationToken\", {\n                        value: continuationState.continuationToken,\n                        enumerable: true,\n                    }));\n                }\n            }\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n(function (KnownContainerRegistryAudience) {\n    /** Azure China */\n    KnownContainerRegistryAudience[\"AzureResourceManagerChina\"] = \"https://management.chinacloudapi.cn\";\n    /** Azure Gemany */\n    KnownContainerRegistryAudience[\"AzureResourceManagerGermany\"] = \"https://management.microsoftazure.de\";\n    /** Azure Government */\n    KnownContainerRegistryAudience[\"AzureResourceManagerGovernment\"] = \"https://management.usgovcloudapi.net\";\n    /** Azure Public Cloud */\n    KnownContainerRegistryAudience[\"AzureResourceManagerPublicCloud\"] = \"https://management.azure.com\";\n})(exports.KnownContainerRegistryAudience || (exports.KnownContainerRegistryAudience = {}));\n(function (KnownArtifactArchitecture) {\n    /** i386 */\n    KnownArtifactArchitecture[\"I386\"] = \"386\";\n    /** AMD64 */\n    KnownArtifactArchitecture[\"Amd64\"] = \"amd64\";\n    /** ARM */\n    KnownArtifactArchitecture[\"Arm\"] = \"arm\";\n    /** ARM64 */\n    KnownArtifactArchitecture[\"Arm64\"] = \"arm64\";\n    /** MIPS */\n    KnownArtifactArchitecture[\"Mips\"] = \"mips\";\n    /** MIPSLE */\n    KnownArtifactArchitecture[\"MipsLe\"] = \"mipsle\";\n    /** MIPS64 */\n    KnownArtifactArchitecture[\"Mips64\"] = \"mips64\";\n    /** MIPS64LE */\n    KnownArtifactArchitecture[\"Mips64Le\"] = \"mips64le\";\n    /** PPC64 */\n    KnownArtifactArchitecture[\"Ppc64\"] = \"ppc64\";\n    /** PPC64LE */\n    KnownArtifactArchitecture[\"Ppc64Le\"] = \"ppc64le\";\n    /** RISCv64 */\n    KnownArtifactArchitecture[\"RiscV64\"] = \"riscv64\";\n    /** s390x */\n    KnownArtifactArchitecture[\"S390X\"] = \"s390x\";\n    /** Wasm */\n    KnownArtifactArchitecture[\"Wasm\"] = \"wasm\";\n})(exports.KnownArtifactArchitecture || (exports.KnownArtifactArchitecture = {}));\n(function (KnownArtifactOperatingSystem) {\n    /** Aix */\n    KnownArtifactOperatingSystem[\"Aix\"] = \"aix\";\n    /** Android */\n    KnownArtifactOperatingSystem[\"Android\"] = \"android\";\n    /** Darwin */\n    KnownArtifactOperatingSystem[\"Darwin\"] = \"darwin\";\n    /** Dragonfly */\n    KnownArtifactOperatingSystem[\"Dragonfly\"] = \"dragonfly\";\n    /** FreeBSD */\n    KnownArtifactOperatingSystem[\"FreeBsd\"] = \"freebsd\";\n    /** Illumos */\n    KnownArtifactOperatingSystem[\"Illumos\"] = \"illumos\";\n    /** iOS */\n    KnownArtifactOperatingSystem[\"iOS\"] = \"ios\";\n    /** JS */\n    KnownArtifactOperatingSystem[\"JS\"] = \"js\";\n    /** Linux */\n    KnownArtifactOperatingSystem[\"Linux\"] = \"linux\";\n    /** NetBSD */\n    KnownArtifactOperatingSystem[\"NetBsd\"] = \"netbsd\";\n    /** OpenBSD */\n    KnownArtifactOperatingSystem[\"OpenBsd\"] = \"openbsd\";\n    /** Plan9 */\n    KnownArtifactOperatingSystem[\"Plan9\"] = \"plan9\";\n    /** Solaris */\n    KnownArtifactOperatingSystem[\"Solaris\"] = \"solaris\";\n    /** Windows */\n    KnownArtifactOperatingSystem[\"Windows\"] = \"windows\";\n})(exports.KnownArtifactOperatingSystem || (exports.KnownArtifactOperatingSystem = {}));\n\nexports.ContainerRegistryClient = ContainerRegistryClient;\n//# sourceMappingURL=index.js.map\n",
    "\"use strict\";\nif (typeof Symbol === undefined || !Symbol.asyncIterator) {\n    Symbol.asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n}\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nvar AzureKeyCredential = /** @class */ (function () {\n    /**\n     * Create an instance of an AzureKeyCredential for use\n     * with a service client.\n     *\n     * @param key - The initial value of the key to use in authentication\n     */\n    function AzureKeyCredential(key) {\n        if (!key) {\n            throw new Error(\"key must be a non-empty string\");\n        }\n        this._key = key;\n    }\n    Object.defineProperty(AzureKeyCredential.prototype, \"key\", {\n        /**\n         * The value of the key to be used in authentication\n         */\n        get: function () {\n            return this._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newKey - The new key value to be used\n     */\n    AzureKeyCredential.prototype.update = function (newKey) {\n        this._key = newKey;\n    };\n    return AzureKeyCredential;\n}());\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n * @internal\n */\nfunction isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * Note: The properties may be inherited.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n * @internal\n */\nfunction isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n        var property = properties_1[_i];\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * Note: The property may be inherited.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n * @internal\n */\nfunction objectHasProperty(thing, property) {\n    return typeof thing === \"object\" && property in thing;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nvar AzureNamedKeyCredential = /** @class */ (function () {\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    function AzureNamedKeyCredential(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    Object.defineProperty(AzureNamedKeyCredential.prototype, \"key\", {\n        /**\n         * The value of the key to be used in authentication.\n         */\n        get: function () {\n            return this._key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AzureNamedKeyCredential.prototype, \"name\", {\n        /**\n         * The value of the name to be used in authentication.\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    AzureNamedKeyCredential.prototype.update = function (newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    };\n    return AzureNamedKeyCredential;\n}());\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nfunction isNamedKeyCredential(credential) {\n    return (isObjectWithProperties(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nvar AzureSASCredential = /** @class */ (function () {\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    function AzureSASCredential(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    Object.defineProperty(AzureSASCredential.prototype, \"signature\", {\n        /**\n         * The value of the shared access signature to be used in authentication\n         */\n        get: function () {\n            return this._signature;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    AzureSASCredential.prototype.update = function (newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    };\n    return AzureSASCredential;\n}());\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nfunction isSASCredential(credential) {\n    return (isObjectWithProperties(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nfunction isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    var castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n\nexports.AzureKeyCredential = AzureKeyCredential;\nexports.AzureNamedKeyCredential = AzureNamedKeyCredential;\nexports.AzureSASCredential = AzureSASCredential;\nexports.isNamedKeyCredential = isNamedKeyCredential;\nexports.isSASCredential = isSASCredential;\nexports.isTokenCredential = isTokenCredential;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar coreRestPipeline = require('@azure/core-rest-pipeline');\nvar url = require('url');\nrequire('@azure/core-asynciterator-polyfill');\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    /**\n     * If body is not asked for, only response headers are returned. If the response\n     * has a body anyway, that body must be ignored.\n     */\n    if (fullResponse.request.method === \"HEAD\") {\n        return parsedHeaders;\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    // Buffer.from accepts <ArrayBuffer> | <SharedArrayBuffer>-- the TypeScript definition is off here\n    // https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n\n// Copyright (c) Microsoft Corporation.\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n            }\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            // Validate Constraints if any\n            this.validateConstraints(mapper, object, objectName);\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n            }\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    var _a;\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" &&\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                !(((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Blob\")) {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or NodeJS.ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!isDuration(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    const elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n                        parentObject[XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            for (const item of paths) {\n                if (!res)\n                    break;\n                res = res[item];\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        const discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            const discriminatorValue = object[discriminatorName];\n            if (discriminatorValue !== undefined && discriminatorValue !== null) {\n                const typeName = mapper.type.uberParent || mapper.type.className;\n                const indexDiscriminator = discriminatorValue === typeName\n                    ? discriminatorValue\n                    : typeName + \".\" + discriminatorValue;\n                const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nconst MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\"\n};\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst operationRequestMap = new WeakMap();\nfunction getOperationRequestInfo(request) {\n    let info = operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        operationRequestMap.set(request, info);\n    }\n    return info;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\"\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        const path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const queryParams = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    requestUrl = appendQueryParams(requestUrl, queryParams);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = getPathStringFromParameter(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url$1, pathToAppend) {\n    if (!pathToAppend) {\n        return url$1;\n    }\n    const parsedUrl = new url.URL(url$1);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return result;\n}\nfunction simpleParseQueryParams(queryString) {\n    if (!queryString || queryString[0] !== \"?\") {\n        return [];\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    return pairs.map((pair) => {\n        const [name, value] = pair.split(\"=\", 2);\n        return [name, value];\n    });\n}\nfunction appendQueryParams(url$1, queryParams) {\n    if (queryParams.size === 0) {\n        return url$1;\n    }\n    const parsedUrl = new url.URL(url$1);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const existingParams = simpleParseQueryParams(parsedUrl.search);\n    const combinedParams = new Map(existingParams);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            existingValue.push(...value);\n        }\n        else if (existingValue) {\n            combinedParams.set(name, [existingValue, ...value]);\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n\n// Copyright (c) Microsoft Corporation.\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = coreRestPipeline.createDefaultHttpClient();\n    }\n    return cachedHttpClient;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nconst deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY\n        }\n    };\n    return {\n        name: deserializationPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const response = yield next(request);\n                return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n            });\n        }\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nfunction deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    return tslib.__awaiter(this, void 0, void 0, function* () {\n        const parsedResponse = yield parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n        if (!shouldDeserializeResponse(parsedResponse)) {\n            return parsedResponse;\n        }\n        const operationInfo = getOperationRequestInfo(parsedResponse.request);\n        const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n        if (!operationSpec || !operationSpec.responses) {\n            return parsedResponse;\n        }\n        const responseSpec = getOperationResponseMap(parsedResponse);\n        const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);\n        if (error) {\n            throw error;\n        }\n        else if (shouldReturnResponse) {\n            return parsedResponse;\n        }\n        // An operation response spec does exist for current status code, so\n        // use it to deserialize the response.\n        if (responseSpec) {\n            if (responseSpec.bodyMapper) {\n                let valueToDeserialize = parsedResponse.parsedBody;\n                if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n                    valueToDeserialize =\n                        typeof valueToDeserialize === \"object\"\n                            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                            : [];\n                }\n                try {\n                    parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n                }\n                catch (deserializeError) {\n                    const restError = new coreRestPipeline.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                        statusCode: parsedResponse.status,\n                        request: parsedResponse.request,\n                        response: parsedResponse\n                    });\n                    throw restError;\n                }\n            }\n            else if (operationSpec.httpMethod === \"HEAD\") {\n                // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n                parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n            }\n            if (responseSpec.headersMapper) {\n                parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n            }\n        }\n        return parsedResponse;\n    });\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new coreRestPipeline.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    return tslib.__awaiter(this, void 0, void 0, function* () {\n        if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n            operationResponse.bodyAsText) {\n            const text = operationResponse.bodyAsText;\n            const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n            const contentComponents = !contentType\n                ? []\n                : contentType.split(\";\").map((component) => component.toLowerCase());\n            try {\n                if (contentComponents.length === 0 ||\n                    contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                    operationResponse.parsedBody = JSON.parse(text);\n                    return operationResponse;\n                }\n                else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                    if (!parseXML) {\n                        throw new Error(\"Parsing XML not supported.\");\n                    }\n                    const body = yield parseXML(text, opts.xml);\n                    operationResponse.parsedBody = body;\n                    return operationResponse;\n                }\n            }\n            catch (err) {\n                const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n                const errCode = err.code || coreRestPipeline.RestError.PARSE_ERROR;\n                const e = new coreRestPipeline.RestError(msg, {\n                    code: errCode,\n                    statusCode: operationResponse.status,\n                    request: operationResponse.request,\n                    response: operationResponse\n                });\n                throw e;\n            }\n        }\n        return operationResponse;\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nconst serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const operationInfo = getOperationRequestInfo(request);\n                const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n                const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n                if (operationSpec && operationArguments) {\n                    serializeHeaders(request, operationArguments, operationSpec);\n                    serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n                }\n                return next(request);\n            });\n        }\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY\n        }\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey\n                        });\n                    }\n                }\n                else if (typeName === MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = coreRestPipeline.createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\"\n    });\n    return pipeline;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        this._requestContentType = options.requestContentType;\n        this._baseUri = options.baseUri;\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    sendRequest(request) {\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            return this.pipeline.sendRequest(this._httpClient, request);\n        });\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    sendOperationRequest(operationArguments, operationSpec) {\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            const baseUri = operationSpec.baseUrl || this._baseUri;\n            if (!baseUri) {\n                throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n            }\n            // Templatized URLs sometimes reference properties on the ServiceClient child class,\n            // so we have to pass `this` below in order to search these properties if they're\n            // not part of OperationArguments\n            const url = getRequestUrl(baseUri, operationSpec, operationArguments, this);\n            const request = coreRestPipeline.createPipelineRequest({\n                url\n            });\n            request.method = operationSpec.httpMethod;\n            const operationInfo = getOperationRequestInfo(request);\n            operationInfo.operationSpec = operationSpec;\n            operationInfo.operationArguments = operationArguments;\n            const contentType = operationSpec.contentType || this._requestContentType;\n            if (contentType && operationSpec.requestBody) {\n                request.headers.set(\"Content-Type\", contentType);\n            }\n            const options = operationArguments.options;\n            if (options) {\n                const requestOptions = options.requestOptions;\n                if (requestOptions) {\n                    if (requestOptions.timeout) {\n                        request.timeout = requestOptions.timeout;\n                    }\n                    if (requestOptions.onUploadProgress) {\n                        request.onUploadProgress = requestOptions.onUploadProgress;\n                    }\n                    if (requestOptions.onDownloadProgress) {\n                        request.onDownloadProgress = requestOptions.onDownloadProgress;\n                    }\n                    if (requestOptions.shouldDeserialize !== undefined) {\n                        operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                    }\n                    if (requestOptions.allowInsecureConnection) {\n                        request.allowInsecureConnection = true;\n                    }\n                }\n                if (options.abortSignal) {\n                    request.abortSignal = options.abortSignal;\n                }\n                if (options.tracingOptions) {\n                    request.tracingOptions = options.tracingOptions;\n                }\n            }\n            if (this._allowInsecureConnection) {\n                request.allowInsecureConnection = true;\n            }\n            if (request.streamResponseStatusCodes === undefined) {\n                request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n            }\n            try {\n                const rawResponse = yield this.sendRequest(request);\n                const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse);\n                }\n                return flatResponse;\n            }\n            catch (error) {\n                if (error.response) {\n                    error.details = flattenResponse(error.response, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                }\n                throw error;\n            }\n        });\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        const scopes = options.credentialScopes;\n        return Array.isArray(scopes)\n            ? scopes.map((scope) => new url.URL(scope).toString())\n            : new url.URL(scopes).toString();\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a baseUri or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n\nexports.MapperTypeNames = MapperTypeNames;\nexports.ServiceClient = ServiceClient;\nexports.XML_ATTRKEY = XML_ATTRKEY;\nexports.XML_CHARKEY = XML_CHARKEY;\nexports.createClientPipeline = createClientPipeline;\nexports.createSerializer = createSerializer;\nexports.deserializationPolicy = deserializationPolicy;\nexports.deserializationPolicyName = deserializationPolicyName;\nexports.serializationPolicy = serializationPolicy;\nexports.serializationPolicyName = serializationPolicyName;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar tslib = require('tslib');\nvar logger$1 = require('@azure/logger');\nvar url = require('url');\nvar os = require('os');\nvar util = require('util');\nvar coreTracing = require('@azure/core-tracing');\nvar httpsProxyAgent$1 = require('https-proxy-agent');\nvar httpProxyAgent$1 = require('http-proxy-agent');\nvar FormData = _interopDefault(require('form-data'));\nvar http = require('http');\nvar https = require('https');\nvar zlib = require('zlib');\nvar stream = require('stream');\nvar abortController = require('@azure/abort-controller');\nvar uuid = require('uuid');\n\n// Copyright (c) Microsoft Corporation.\nconst logger = logger$1.createClientLogger(\"core-rest-pipeline\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n * @internal\n */\nconst isNode = typeof process !== \"undefined\" && Boolean(process.version) && Boolean((_a = process.versions) === null || _a === void 0 ? void 0 : _a.node);\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nfunction delay(t, value) {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n * @internal\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n/**\n * @internal\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n\n// Copyright (c) Microsoft Corporation.\nconst RedactedString = \"REDACTED\";\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\"\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [] } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || isObject(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null) {\n            return value;\n        }\n        const url$1 = new url.URL(value);\n        if (!url$1.search) {\n            return value;\n        }\n        for (const [key] of url$1.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url$1.searchParams.set(key, RedactedString);\n            }\n        }\n        return url$1.toString();\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger$1 = (_a = options.logger) !== null && _a !== void 0 ? _a : logger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n    });\n    return {\n        name: logPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (!logger$1.enabled) {\n                    return next(request);\n                }\n                logger$1(`Request: ${sanitizer.sanitize(request)}`);\n                const response = yield next(request);\n                logger$1(`Response status code: ${response.status}`);\n                logger$1(`Headers: ${sanitizer.sanitize(response.headers)}`);\n                return response;\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nfunction setPlatformSpecificData(map) {\n    map.set(\"Node\", process.version);\n    map.set(\"OS\", `(${os.arch()}-${os.type()}-${os.release()})`);\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst SDK_VERSION = \"1.0.4\";\n\n// Copyright (c) Microsoft Corporation.\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return getHeaderName();\n}\n/**\n * @internal\n */\nfunction getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n    setPlatformSpecificData(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (!request.headers.has(UserAgentHeaderName)) {\n                    request.headers.set(UserAgentHeaderName, userAgentValue);\n                }\n                return next(request);\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const response = yield next(request);\n                return handleRedirect(next, response, maxRetries);\n            });\n        }\n    };\n}\nfunction handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    return tslib.__awaiter(this, void 0, void 0, function* () {\n        const { request, status, headers } = response;\n        const locationHeader = headers.get(\"location\");\n        if (locationHeader &&\n            (status === 300 ||\n                (status === 301 && allowedRedirect.includes(request.method)) ||\n                (status === 302 && allowedRedirect.includes(request.method)) ||\n                (status === 303 && request.method === \"POST\") ||\n                status === 307) &&\n            currentRetries < maxRetries) {\n            const url$1 = new url.URL(locationHeader, request.url);\n            request.url = url$1.toString();\n            // POST request with Status code 303 should be converted into a\n            // redirected GET request if the redirect url is present in the location header\n            if (status === 303) {\n                request.method = \"GET\";\n                request.headers.delete(\"Content-Length\");\n                delete request.body;\n            }\n            const res = yield next(request);\n            return handleRedirect(next, res, maxRetries, currentRetries + 1);\n        }\n        return response;\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\nconst custom = util.inspect.custom;\n\n// Copyright (c) Microsoft Corporation.\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        this.request = options.request;\n        this.response = options.response;\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\nconst DEFAULT_CLIENT_RETRY_COUNT = 10;\n// intervals are in ms\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a, _b, _c;\n    const retryCount = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_COUNT;\n    const retryInterval = (_b = options.retryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_c = options.maxRetryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    /**\n     * Determines if the operation should be retried and how long to wait until the next retry.\n     *\n     * @param statusCode - The HTTP status code.\n     * @param retryData -  The retry data.\n     * @returns True if the operation qualifies for a retry; false otherwise.\n     */\n    function shouldRetry(statusCode, retryData) {\n        if (statusCode === undefined ||\n            (statusCode < 500 && statusCode !== 408) ||\n            statusCode === 501 ||\n            statusCode === 505) {\n            return false;\n        }\n        const currentCount = retryData && retryData.retryCount;\n        return currentCount < retryCount;\n    }\n    /**\n     * Updates the retry data for the next attempt.\n     *\n     * @param retryData -  The retry data.\n     * @param err - The operation's error, if any.\n     */\n    function updateRetryData(retryData, err) {\n        if (err) {\n            if (retryData.error) {\n                err.innerError = retryData.error;\n            }\n            retryData.error = err;\n        }\n        // Adjust retry count\n        retryData.retryCount++;\n        // Exponentially increase the delay each time\n        const exponentialDelay = retryInterval * Math.pow(2, retryData.retryCount);\n        // Don't let the delay exceed the maximum\n        const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n        // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n        // that retries across multiple clients don't occur simultaneously.\n        const delayWithJitter = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n        retryData.retryInterval = delayWithJitter;\n        return retryData;\n    }\n    function retry(next, retryData, request, response, requestError) {\n        var _a;\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            retryData = updateRetryData(retryData, requestError);\n            const isAborted = (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted;\n            if (!isAborted && shouldRetry(response === null || response === void 0 ? void 0 : response.status, retryData)) {\n                logger.info(`Retrying request in ${retryData.retryInterval}`);\n                try {\n                    yield delay(retryData.retryInterval);\n                    const res = yield next(request);\n                    return retry(next, retryData, request, res);\n                }\n                catch (e) {\n                    return retry(next, retryData, request, response, e);\n                }\n            }\n            else if (isAborted || requestError || !response) {\n                // If the operation failed in the end, return all errors instead of just the last one\n                const err = retryData.error ||\n                    new RestError(\"Failed to send the request.\", {\n                        code: RestError.REQUEST_SEND_ERROR,\n                        statusCode: response === null || response === void 0 ? void 0 : response.status,\n                        request: response === null || response === void 0 ? void 0 : response.request,\n                        response\n                    });\n                throw err;\n            }\n            else {\n                return response;\n            }\n        });\n    }\n    return {\n        name: exponentialRetryPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const retryData = {\n                    retryCount: 0,\n                    retryInterval: 0\n                };\n                try {\n                    const response = yield next(request);\n                    return retry(next, retryData, request, response);\n                }\n                catch (e) {\n                    const error = e;\n                    return retry(next, retryData, request, error.response, error);\n                }\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst createSpan = coreTracing.createSpanFunction({\n    packagePrefix: \"\",\n    namespace: \"\"\n});\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgent = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: tracingPolicyName,\n        sendRequest(request, next) {\n            var _a;\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (!((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                    return next(request);\n                }\n                // create a new span\n                const tracingOptions = Object.assign(Object.assign({}, request.tracingOptions), { spanOptions: Object.assign(Object.assign({}, request.tracingOptions.spanOptions), { kind: coreTracing.SpanKind.CLIENT }) });\n                const url$1 = new url.URL(request.url);\n                const path = url$1.pathname || \"/\";\n                const { span } = createSpan(path, { tracingOptions });\n                span.setAttributes({\n                    \"http.method\": request.method,\n                    \"http.url\": request.url,\n                    requestId: request.requestId\n                });\n                if (userAgent) {\n                    span.setAttribute(\"http.user_agent\", userAgent);\n                }\n                try {\n                    // set headers\n                    const spanContext = span.context();\n                    const traceParentHeader = coreTracing.getTraceParentHeader(spanContext);\n                    if (traceParentHeader) {\n                        request.headers.set(\"traceparent\", traceParentHeader);\n                        const traceState = spanContext.traceState && spanContext.traceState.serialize();\n                        // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n                        if (traceState) {\n                            request.headers.set(\"tracestate\", traceState);\n                        }\n                    }\n                    const response = yield next(request);\n                    span.setAttribute(\"http.status_code\", response.status);\n                    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n                    if (serviceRequestId) {\n                        span.setAttribute(\"serviceRequestId\", serviceRequestId);\n                    }\n                    span.end();\n                    return response;\n                }\n                catch (err) {\n                    span.end();\n                    throw err;\n                }\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (!request.headers.has(requestIdHeaderName)) {\n                    request.headers.set(requestIdHeaderName, request.requestId);\n                }\n                return next(request);\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the throttlingRetryPolicy.\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nfunction throttlingRetryPolicy() {\n    return {\n        name: throttlingRetryPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const response = yield next(request);\n                if (response.status !== 429) {\n                    return response;\n                }\n                const retryAfterHeader = response.headers.get(\"Retry-After\");\n                if (retryAfterHeader) {\n                    const delayInMs = parseRetryAfterHeader(retryAfterHeader);\n                    if (delayInMs) {\n                        yield delay(delayInMs);\n                        return next(request);\n                    }\n                }\n                return response;\n            });\n        }\n    };\n}\n/**\n * Returns the number of milliseconds to wait based on a Retry-After header value.\n * Returns undefined if there is no valid value.\n * @param headerValue - An HTTP Retry-After header value.\n */\nfunction parseRetryAfterHeader(headerValue) {\n    try {\n        const retryAfterInSeconds = Number(headerValue);\n        if (!Number.isNaN(retryAfterInSeconds)) {\n            return retryAfterInSeconds * 1000;\n        }\n        else {\n            // It might be formatted as a date instead of a number of seconds\n            const now = Date.now();\n            const date = Date.parse(headerValue);\n            const diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst DEFAULT_CLIENT_RETRY_COUNT$1 = 10;\n// intervals are in ms\nconst DEFAULT_CLIENT_RETRY_INTERVAL$1 = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL$1 = 1000 * 64;\n/**\n * The programmatic identifier of the systemErrorRetryPolicy.\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a, _b, _c;\n    const retryCount = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_COUNT$1;\n    const retryInterval = (_b = options.retryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_RETRY_INTERVAL$1;\n    const maxRetryInterval = (_c = options.maxRetryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_CLIENT_MAX_RETRY_INTERVAL$1;\n    function shouldRetry(retryData, err) {\n        if (!isSystemError(err)) {\n            return false;\n        }\n        const currentCount = retryData.retryCount;\n        return currentCount <= retryCount;\n    }\n    function updateRetryData(retryData, err) {\n        if (err) {\n            if (retryData.error) {\n                err.innerError = retryData.error;\n            }\n            retryData.error = err;\n        }\n        // Adjust retry count\n        retryData.retryCount++;\n        // Exponentially increase the delay each time\n        const exponentialDelay = retryInterval * Math.pow(2, retryData.retryCount);\n        // Don't let the delay exceed the maximum\n        const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n        // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n        // that retries across multiple clients don't occur simultaneously.\n        const delayWithJitter = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n        retryData.retryInterval = delayWithJitter;\n        return retryData;\n    }\n    function retry(next, retryData, request, response, requestError) {\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            retryData = updateRetryData(retryData, requestError);\n            if (shouldRetry(retryData, requestError)) {\n                try {\n                    logger.info(`Retrying request in ${retryData.retryInterval}`);\n                    yield delay(retryData.retryInterval);\n                    const res = yield next(request);\n                    return retry(next, retryData, request, res);\n                }\n                catch (e) {\n                    return retry(next, retryData, request, response, e);\n                }\n            }\n            else if (requestError || !response) {\n                // If the operation failed in the end, return all errors instead of just the last one\n                const err = retryData.error ||\n                    new RestError(\"Failed to send the request.\", {\n                        code: RestError.REQUEST_SEND_ERROR,\n                        statusCode: response === null || response === void 0 ? void 0 : response.status,\n                        request: response === null || response === void 0 ? void 0 : response.request,\n                        response\n                    });\n                throw err;\n            }\n            else {\n                return response;\n            }\n        });\n    }\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const retryData = {\n                    retryCount: 0,\n                    retryInterval: 0\n                };\n                try {\n                    const response = yield next(request);\n                    return retry(next, retryData, request, response);\n                }\n                catch (e) {\n                    const error = e;\n                    return retry(next, retryData, request, error.response, error);\n                }\n            });\n        }\n    };\n}\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\");\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n                return next(request);\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nconst proxyPolicyName = \"proxyPolicy\";\nconst noProxyList = loadNoProxy();\nconst byPassedList = new Map();\nlet httpsProxyAgent;\nlet httpProxyAgent;\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n// Check whether the host of a given `uri` is in the noProxyList.\n// If there's a match, any request sent to the same host won't have the proxy settings set.\nfunction isBypassed(uri) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new url.URL(uri).hostname;\n    if (byPassedList.has(host)) {\n        return byPassedList.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    byPassedList.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nfunction loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new url.URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password\n    };\n}\nfunction getProxyAgentOptions(proxySettings, requestHeaders) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new url.URL(proxySettings.host);\n    }\n    catch (_error) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${proxySettings.host}\".`);\n    }\n    const proxyAgentOptions = {\n        hostname: parsedProxyUrl.hostname,\n        port: proxySettings.port,\n        protocol: parsedProxyUrl.protocol,\n        headers: requestHeaders.toJSON()\n    };\n    if (proxySettings.username && proxySettings.password) {\n        proxyAgentOptions.auth = `${proxySettings.username}:${proxySettings.password}`;\n    }\n    return proxyAgentOptions;\n}\nfunction setProxyAgentOnRequest(request) {\n    const url$1 = new url.URL(request.url);\n    const isInsecure = url$1.protocol !== \"https:\";\n    const proxySettings = request.proxySettings;\n    if (proxySettings) {\n        if (isInsecure) {\n            if (!httpProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpProxyAgent = new httpProxyAgent$1.HttpProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpProxyAgent;\n        }\n        else {\n            if (!httpsProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpsProxyAgent = new httpsProxyAgent$1.HttpsProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpsProxyAgent;\n        }\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n */\nfunction proxyPolicy(proxySettings = getDefaultProxySettings()) {\n    return {\n        name: proxyPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (!request.proxySettings && !isBypassed(request.url)) {\n                    request.proxySettings = proxySettings;\n                }\n                if (request.proxySettings) {\n                    setProxyAgentOnRequest(request);\n                }\n                return next(request);\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                if (request.formData) {\n                    prepareFormData(request.formData, request);\n                }\n                return next(request);\n            });\n        }\n    };\n}\nfunction prepareFormData(formData, request) {\n    return tslib.__awaiter(this, void 0, void 0, function* () {\n        const requestForm = new FormData();\n        for (const formKey of Object.keys(formData)) {\n            const formValue = formData[formKey];\n            if (Array.isArray(formValue)) {\n                for (const subValue of formValue) {\n                    requestForm.append(formKey, subValue);\n                }\n            }\n            else {\n                requestForm.append(formKey, formValue);\n            }\n        }\n        request.body = requestForm;\n        request.formData = undefined;\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n            request.headers.set(\"Content-Type\", `multipart/form-data; boundary=${requestForm.getBoundary()}`);\n        }\n        try {\n            const contentLength = yield new Promise((resolve, reject) => {\n                requestForm.getLength((err, length) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(length);\n                    }\n                });\n            });\n            request.headers.set(\"Content-Length\", contentLength);\n        }\n        catch (e) {\n            // ignore setting the length if this fails\n        }\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies = []) {\n        this._policies = [];\n        this._policies = policies;\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        // Track policies for each phase.\n        const serializePhase = new Set();\n        const noPhase = new Set();\n        const deserializePhase = new Set();\n        const retryPhase = new Set();\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase];\n        // Small helper function to map phase name to each Set bucket.\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set()\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            // Sets iterate in insertion order\n            for (const node of phase) {\n                if (node.afterPhase && node.afterPhase.size) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            let noPhaseRan = false;\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                if (phase === noPhase) {\n                    noPhaseRan = true;\n                }\n                // if the phase isn't complete\n                if (phase.size > 0 && phase !== noPhase) {\n                    if (noPhaseRan === false) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        while (policyMap.size > 0) {\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    const pipeline = HttpPipeline.create();\n    {\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy());\n    pipeline.addPolicy(tracingPolicy(options.userAgentOptions));\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy());\n    pipeline.addPolicy(throttlingRetryPolicy(), { phase: \"Retry\" });\n    pipeline.addPolicy(systemErrorRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(exponentialRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Retry\" });\n    return pipeline;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), String(value));\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        return this._headersMap.get(normalizeName(name));\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON() {\n        const result = {};\n        for (const [key, value] of this._headersMap) {\n            result[key] = value;\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return this._headersMap.entries();\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n\n// Copyright (c) Microsoft Corporation.\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    return new Promise((resolve) => {\n        stream.on(\"close\", resolve);\n        stream.on(\"end\", resolve);\n        stream.on(\"error\", resolve);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends stream.Transform {\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    sendRequest(request) {\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            const abortController$1 = new abortController.AbortController();\n            let abortListener;\n            if (request.abortSignal) {\n                if (request.abortSignal.aborted) {\n                    throw new abortController.AbortError(\"The operation was aborted.\");\n                }\n                abortListener = (event) => {\n                    if (event.type === \"abort\") {\n                        abortController$1.abort();\n                    }\n                };\n                request.abortSignal.addEventListener(\"abort\", abortListener);\n            }\n            if (request.timeout > 0) {\n                setTimeout(() => {\n                    abortController$1.abort();\n                }, request.timeout);\n            }\n            const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n            const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n            let body = request.body;\n            if (body && !request.headers.has(\"Content-Length\")) {\n                const bodyLength = getBodyLength(body);\n                if (bodyLength !== null) {\n                    request.headers.set(\"Content-Length\", bodyLength);\n                }\n            }\n            let responseStream;\n            try {\n                const result = yield new Promise((resolve, reject) => {\n                    if (body && request.onUploadProgress) {\n                        const onUploadProgress = request.onUploadProgress;\n                        const uploadReportStream = new ReportTransform(onUploadProgress);\n                        uploadReportStream.on(\"error\", reject);\n                        if (isReadableStream(body)) {\n                            body.pipe(uploadReportStream);\n                        }\n                        else {\n                            uploadReportStream.end(body);\n                        }\n                        body = uploadReportStream;\n                    }\n                    const req = this.makeRequest(request, (res) => tslib.__awaiter(this, void 0, void 0, function* () {\n                        var _a, _b;\n                        const headers = getResponseHeaders(res);\n                        const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n                        const response = {\n                            status,\n                            headers,\n                            request\n                        };\n                        responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n                        const onDownloadProgress = request.onDownloadProgress;\n                        if (onDownloadProgress) {\n                            const downloadReportStream = new ReportTransform(onDownloadProgress);\n                            downloadReportStream.on(\"error\", reject);\n                            responseStream.pipe(downloadReportStream);\n                            responseStream = downloadReportStream;\n                        }\n                        if ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(response.status)) {\n                            response.readableStreamBody = responseStream;\n                        }\n                        else {\n                            response.bodyAsText = yield streamToText(responseStream);\n                        }\n                        resolve(response);\n                    }));\n                    req.on(\"error\", (err) => {\n                        reject(new RestError(err.message, { code: RestError.REQUEST_SEND_ERROR, request }));\n                    });\n                    abortController$1.signal.addEventListener(\"abort\", () => {\n                        req.abort();\n                        reject(new abortController.AbortError(\"The operation was aborted.\"));\n                    });\n                    if (body && isReadableStream(body)) {\n                        body.pipe(req);\n                    }\n                    else if (body) {\n                        req.end(body);\n                    }\n                    else {\n                        // streams don't like \"undefined\" being passed as data\n                        req.end();\n                    }\n                });\n                return result;\n            }\n            finally {\n                // clean up event listener\n                if (request.abortSignal && abortListener) {\n                    let uploadStreamDone = Promise.resolve();\n                    if (isReadableStream(body)) {\n                        uploadStreamDone = isStreamComplete(body);\n                    }\n                    let downloadStreamDone = Promise.resolve();\n                    if (isReadableStream(responseStream)) {\n                        downloadStreamDone = isStreamComplete(responseStream);\n                    }\n                    Promise.all([uploadStreamDone, downloadStreamDone])\n                        .then(() => {\n                        var _a;\n                        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                        return;\n                    })\n                        .catch((e) => {\n                        logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                    });\n                }\n            }\n        });\n    }\n    makeRequest(request, callback) {\n        var _a;\n        const url$1 = new url.URL(request.url);\n        const isInsecure = url$1.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url$1.hostname,\n            path: `${url$1.pathname}${url$1.search}`,\n            port: url$1.port,\n            method: request.method,\n            headers: request.headers.toJSON()\n        };\n        if (isInsecure) {\n            return http.request(options, callback);\n        }\n        else {\n            return https.request(options, callback);\n        }\n    }\n    getOrCreateAgent(request, isInsecure) {\n        if (!request.disableKeepAlive) {\n            if (isInsecure) {\n                if (!this.httpKeepAliveAgent) {\n                    this.httpKeepAliveAgent = new http.Agent({\n                        keepAlive: true\n                    });\n                }\n                return this.httpKeepAliveAgent;\n            }\n            else {\n                if (!this.httpsKeepAliveAgent) {\n                    this.httpsKeepAliveAgent = new https.Agent({\n                        keepAlive: true\n                    });\n                }\n                return this.httpsKeepAliveAgent;\n            }\n        }\n        else if (isInsecure) {\n            return http.globalAgent;\n        }\n        else {\n            return https.globalAgent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = createHttpHeaders();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = zlib.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = zlib.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            reject(new RestError(`Error reading response as text: ${e.message}`, {\n                code: RestError.PARSE_ERROR\n            }));\n        });\n    });\n}\n/** @internal */\nfunction getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nfunction createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return createNodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n * @internal\n */\nfunction generateUuid() {\n    return uuid.v4();\n}\n\n// Copyright (c) Microsoft Corporation.\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || generateUuid();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Defines the default token refresh buffer duration.\n */\nconst DefaultTokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes\n/**\n * Provides an AccessTokenCache implementation which clears\n * the cached AccessToken's after the expiresOnTimestamp has\n * passed.\n * @internal\n */\nclass ExpiringAccessTokenCache {\n    /**\n     * Constructs an instance of ExpiringAccessTokenCache with\n     * an optional expiration buffer time.\n     */\n    constructor(tokenRefreshBufferMs = DefaultTokenRefreshBufferMs) {\n        this.tokenRefreshBufferMs = tokenRefreshBufferMs;\n    }\n    setCachedToken(accessToken) {\n        this.cachedToken = accessToken;\n    }\n    getCachedToken() {\n        if (this.cachedToken &&\n            Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {\n            this.cachedToken = undefined;\n        }\n        return this.cachedToken;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    const { credential, scopes } = options;\n    const tokenCache = new ExpiringAccessTokenCache();\n    function getToken(tokenOptions) {\n        return tslib.__awaiter(this, void 0, void 0, function* () {\n            let accessToken = tokenCache.getCachedToken();\n            if (accessToken === undefined) {\n                accessToken = (yield credential.getToken(scopes, tokenOptions)) || undefined;\n                tokenCache.setCachedToken(accessToken);\n            }\n            return accessToken ? accessToken.token : undefined;\n        });\n    }\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                const token = yield getToken({\n                    abortSignal: request.abortSignal,\n                    tracingOptions: request.tracingOptions\n                });\n                request.headers.set(\"Authorization\", `Bearer ${token}`);\n                return next(request);\n            });\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        sendRequest(request, next) {\n            return tslib.__awaiter(this, void 0, void 0, function* () {\n                // There currently isn't a good way to bypass the serializer\n                if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                    const body = JSON.parse(request.body);\n                    if (Array.isArray(body)) {\n                        request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                    }\n                }\n                return next(request);\n            });\n        }\n    };\n}\n\nexports.RestError = RestError;\nexports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;\nexports.bearerTokenAuthenticationPolicyName = bearerTokenAuthenticationPolicyName;\nexports.createDefaultHttpClient = createDefaultHttpClient;\nexports.createEmptyPipeline = createEmptyPipeline;\nexports.createHttpHeaders = createHttpHeaders;\nexports.createPipelineFromOptions = createPipelineFromOptions;\nexports.createPipelineRequest = createPipelineRequest;\nexports.decompressResponsePolicy = decompressResponsePolicy;\nexports.decompressResponsePolicyName = decompressResponsePolicyName;\nexports.exponentialRetryPolicy = exponentialRetryPolicy;\nexports.exponentialRetryPolicyName = exponentialRetryPolicyName;\nexports.formDataPolicy = formDataPolicy;\nexports.formDataPolicyName = formDataPolicyName;\nexports.getDefaultProxySettings = getDefaultProxySettings;\nexports.logPolicy = logPolicy;\nexports.logPolicyName = logPolicyName;\nexports.ndJsonPolicy = ndJsonPolicy;\nexports.ndJsonPolicyName = ndJsonPolicyName;\nexports.proxyPolicy = proxyPolicy;\nexports.proxyPolicyName = proxyPolicyName;\nexports.redirectPolicy = redirectPolicy;\nexports.redirectPolicyName = redirectPolicyName;\nexports.setClientRequestIdPolicy = setClientRequestIdPolicy;\nexports.setClientRequestIdPolicyName = setClientRequestIdPolicyName;\nexports.systemErrorRetryPolicy = systemErrorRetryPolicy;\nexports.systemErrorRetryPolicyName = systemErrorRetryPolicyName;\nexports.throttlingRetryPolicy = throttlingRetryPolicy;\nexports.throttlingRetryPolicyName = throttlingRetryPolicyName;\nexports.tracingPolicy = tracingPolicy;\nexports.tracingPolicyName = tracingPolicyName;\nexports.userAgentPolicy = userAgentPolicy;\nexports.userAgentPolicyName = userAgentPolicyName;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar api = require('@opentelemetry/api');\nvar tslib = require('tslib');\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nvar NoOpSpan = /** @class */ (function () {\n    function NoOpSpan() {\n    }\n    /**\n     * Returns the SpanContext associated with this Span.\n     */\n    NoOpSpan.prototype.context = function () {\n        return {\n            spanId: \"\",\n            traceId: \"\",\n            traceFlags: 0 /* NONE */\n        };\n    };\n    /**\n     * Marks the end of Span execution.\n     * @param _endTime - The time to use as the Span's end time. Defaults to\n     * the current time.\n     */\n    NoOpSpan.prototype.end = function (_endTime) {\n        /* Noop */\n    };\n    /**\n     * Sets an attribute on the Span\n     * @param _key - The attribute key\n     * @param _value - The attribute value\n     */\n    NoOpSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    /**\n     * Sets attributes on the Span\n     * @param _attributes - The attributes to add\n     */\n    NoOpSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    /**\n     * Adds an event to the Span\n     * @param _name - The name of the event\n     * @param _attributes - The associated attributes to add for this event\n     */\n    NoOpSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    /**\n     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n     * @param _status - The status to set.\n     */\n    NoOpSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    /**\n     * Updates the name of the Span\n     * @param _name - the new Span name\n     */\n    NoOpSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    /**\n     * Returns whether this span will be recorded\n     */\n    NoOpSpan.prototype.isRecording = function () {\n        return false;\n    };\n    /**\n     * Sets exception as a span event\n     * @param exception - the exception the only accepted values are string or Error\n     * @param time - the time to set as Span's event time. If not provided,\n     *     use the current time.\n     */\n    NoOpSpan.prototype.recordException = function (_exception, _time) {\n        /* do nothing */\n    };\n    return NoOpSpan;\n}());\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nvar NoOpTracer = /** @class */ (function () {\n    function NoOpTracer() {\n    }\n    /**\n     * Starts a new Span.\n     * @param _name - The name of the span.\n     * @param _options - The SpanOptions used during Span creation.\n     */\n    NoOpTracer.prototype.startSpan = function (_name, _options) {\n        return new NoOpSpan();\n    };\n    /**\n     * Returns the current Span from the current context, if available.\n     */\n    NoOpTracer.prototype.getCurrentSpan = function () {\n        return new NoOpSpan();\n    };\n    /**\n     * Executes the given function within the context provided by a Span.\n     * @param _span - The span that provides the context.\n     * @param fn - The function to be executed.\n     */\n    NoOpTracer.prototype.withSpan = function (_span, fn) {\n        return fn();\n    };\n    /**\n     * Bind a Span as the target's scope\n     * @param target - An object to bind the scope.\n     * @param _span - A specific Span to use. Otherwise, use the current one.\n     */\n    NoOpTracer.prototype.bind = function (target, _span) {\n        return target;\n    };\n    return NoOpTracer;\n}());\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction getGlobalObject() {\n    return global;\n}\n\n// Copyright (c) Microsoft Corporation.\n// V1 = OpenTelemetry 0.1\n// V2 = OpenTelemetry 0.2\n// V3 = OpenTelemetry 0.6.1\n// V4 = OpenTelemetry 1.0.0-rc.0\nvar GLOBAL_TRACER_VERSION = 4;\n// preview5 shipped with @azure/core-tracing.tracerCache\n// and didn't have smart detection for collisions\nvar GLOBAL_TRACER_SYMBOL = Symbol.for(\"@azure/core-tracing.tracerCache3\");\nvar cache;\nfunction loadTracerCache() {\n    var globalObj = getGlobalObject();\n    var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];\n    var setGlobalCache = true;\n    if (existingCache) {\n        if (existingCache.version === GLOBAL_TRACER_VERSION) {\n            cache = existingCache;\n        }\n        else {\n            setGlobalCache = false;\n            if (existingCache.tracer) {\n                throw new Error(\"Two incompatible versions of @azure/core-tracing have been loaded.\\n          This library is \" + GLOBAL_TRACER_VERSION + \", existing is \" + existingCache.version + \".\");\n            }\n        }\n    }\n    if (!cache) {\n        cache = {\n            tracer: undefined,\n            version: GLOBAL_TRACER_VERSION\n        };\n    }\n    if (setGlobalCache) {\n        globalObj[GLOBAL_TRACER_SYMBOL] = cache;\n    }\n}\nfunction getCache() {\n    if (!cache) {\n        loadTracerCache();\n    }\n    return cache;\n}\n\n// Copyright (c) Microsoft Corporation.\nvar defaultTracer;\nfunction getDefaultTracer() {\n    if (!defaultTracer) {\n        defaultTracer = new NoOpTracer();\n    }\n    return defaultTracer;\n}\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer - An OpenTelemetry Tracer instance.\n */\nfunction setTracer(tracer) {\n    var cache = getCache();\n    cache.tracer = tracer;\n}\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nfunction getTracer() {\n    var cache = getCache();\n    if (!cache.tracer) {\n        return getDefaultTracer();\n    }\n    return cache.tracer;\n}\n\n// Copyright (c) Microsoft Corporation.\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(exports.SpanKind || (exports.SpanKind = {}));\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nfunction getSpan(context) {\n    return api.getSpan(context);\n}\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nfunction setSpan(context, span) {\n    return api.setSpan(context, span);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return api.setSpanContext(context, spanContext);\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nfunction getSpanContext(context) {\n    return api.getSpanContext(context);\n}\n/** Entrypoint for context API */\nvar context = api.context;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n */\nvar OpenCensusTraceStateWrapper = /** @class */ (function () {\n    function OpenCensusTraceStateWrapper(state) {\n        this._state = state;\n    }\n    OpenCensusTraceStateWrapper.prototype.get = function (_key) {\n        throw new Error(\"Method not implemented.\");\n    };\n    OpenCensusTraceStateWrapper.prototype.set = function (_key, _value) {\n        throw new Error(\"Method not implemented.\");\n    };\n    OpenCensusTraceStateWrapper.prototype.unset = function (_key) {\n        throw new Error(\"Method not implemented\");\n    };\n    OpenCensusTraceStateWrapper.prototype.serialize = function () {\n        return this._state || \"\";\n    };\n    return OpenCensusTraceStateWrapper;\n}());\n\n// Copyright (c) Microsoft Corporation.\n/** An enumeration of canonical status codes. */\nvar CanonicalCode;\n(function (CanonicalCode) {\n    /**\n     * Not an error; returned on success\n     */\n    CanonicalCode[CanonicalCode[\"OK\"] = 0] = \"OK\";\n    /**\n     * Internal errors.  Means some invariants expected by underlying\n     * system has been broken.  If you see one of these errors,\n     * something is very broken.\n     */\n    CanonicalCode[CanonicalCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n})(CanonicalCode || (CanonicalCode = {}));\nfunction isWrappedSpan(span) {\n    return !!span && span.getWrappedSpan !== undefined;\n}\nfunction isTracer(tracerOrSpan) {\n    return tracerOrSpan.getWrappedTracer !== undefined;\n}\n/**\n * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.\n */\nvar OpenCensusSpanWrapper = /** @class */ (function () {\n    function OpenCensusSpanWrapper(tracerOrSpan, name, options, context$1) {\n        if (name === void 0) { name = \"\"; }\n        if (options === void 0) { options = {}; }\n        if (isTracer(tracerOrSpan)) {\n            var span = getSpan(context$1 !== null && context$1 !== void 0 ? context$1 : context.active());\n            var parent = isWrappedSpan(span) ? span.getWrappedSpan() : undefined;\n            this._span = tracerOrSpan.getWrappedTracer().startChildSpan({\n                name: name,\n                childOf: parent\n            });\n            this._span.start();\n            if (options.links) {\n                for (var _i = 0, _a = options.links; _i < _a.length; _i++) {\n                    var link = _a[_i];\n                    // Since there is no way to set the link relationship, leave it as Unspecified.\n                    this._span.addLink(link.context.traceId, link.context.spanId, 0 /* LinkType.UNSPECIFIED */, link.attributes);\n                }\n            }\n        }\n        else {\n            this._span = tracerOrSpan;\n        }\n    }\n    /**\n     * The underlying OpenCensus Span\n     */\n    OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {\n        return this._span;\n    };\n    /**\n     * Marks the end of Span execution.\n     * @param endTime - The time to use as the Span's end time. Defaults to\n     * the current time.\n     */\n    OpenCensusSpanWrapper.prototype.end = function (_endTime) {\n        this._span.end();\n    };\n    /**\n     * Returns the SpanContext associated with this Span.\n     */\n    OpenCensusSpanWrapper.prototype.context = function () {\n        var openCensusSpanContext = this._span.spanContext;\n        return {\n            spanId: openCensusSpanContext.spanId,\n            traceId: openCensusSpanContext.traceId,\n            traceFlags: openCensusSpanContext.options,\n            traceState: new OpenCensusTraceStateWrapper(openCensusSpanContext.traceState)\n        };\n    };\n    /**\n     * Sets an attribute on the Span\n     * @param key - The attribute key\n     * @param value - The attribute value\n     */\n    OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {\n        this._span.addAttribute(key, value);\n        return this;\n    };\n    /**\n     * Sets attributes on the Span\n     * @param attributes - The attributes to add\n     */\n    OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {\n        this._span.attributes = attributes;\n        return this;\n    };\n    /**\n     * Adds an event to the Span\n     * @param name - The name of the event\n     * @param attributes - The associated attributes to add for this event\n     */\n    OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /**\n     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n     * @param status - The status to set.\n     */\n    OpenCensusSpanWrapper.prototype.setStatus = function (status) {\n        switch (status.code) {\n            case exports.SpanStatusCode.ERROR: {\n                this._span.setStatus(CanonicalCode.INTERNAL, status.message);\n                break;\n            }\n            case exports.SpanStatusCode.OK: {\n                this._span.setStatus(CanonicalCode.OK, status.message);\n                break;\n            }\n            case exports.SpanStatusCode.UNSET: {\n                break;\n            }\n        }\n        return this;\n    };\n    /**\n     * Updates the name of the Span\n     * @param name - The new Span name\n     */\n    OpenCensusSpanWrapper.prototype.updateName = function (name) {\n        this._span.name = name;\n        return this;\n    };\n    /**\n     * Returns whether this span will be recorded\n     */\n    OpenCensusSpanWrapper.prototype.isRecording = function () {\n        // NoRecordSpans have an empty traceId\n        return !!this._span.traceId;\n    };\n    /**\n     * Sets exception as a span event\n     * @param exception - the exception the only accepted values are string or Error\n     * @param time - the time to set as Span's event time. If not provided,\n     *     use the current time.\n     */\n    OpenCensusSpanWrapper.prototype.recordException = function (_exception, _time) {\n        throw new Error(\"Method not implemented\");\n    };\n    return OpenCensusSpanWrapper;\n}());\n\n// Copyright (c) Microsoft Corporation.\n/**\n * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.\n */\nvar OpenCensusTracerWrapper = /** @class */ (function () {\n    /**\n     * Create a new wrapper around a given OpenCensus Tracer.\n     * @param tracer - The OpenCensus Tracer to wrap.\n     */\n    function OpenCensusTracerWrapper(tracer) {\n        this._tracer = tracer;\n    }\n    /**\n     * The wrapped OpenCensus Tracer\n     */\n    OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {\n        return this._tracer;\n    };\n    /**\n     * Starts a new Span.\n     * @param name - The name of the span.\n     * @param options - The SpanOptions used during Span creation.\n     */\n    OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {\n        return new OpenCensusSpanWrapper(this, name, options);\n    };\n    /**\n     * Returns the current Span from the current context, if available.\n     */\n    OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {\n        return undefined;\n    };\n    /**\n     * Executes the given function within the context provided by a Span.\n     * @param _span - The span that provides the context.\n     * @param _fn - The function to be executed.\n     */\n    OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /**\n     * Bind a Span as the target's scope\n     * @param target - An object to bind the scope.\n     * @param _span - A specific Span to use. Otherwise, use the current one.\n     */\n    OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {\n        throw new Error(\"Method not implemented.\");\n    };\n    return OpenCensusTracerWrapper;\n}());\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A mock span useful for testing.\n */\nvar TestSpan = /** @class */ (function (_super) {\n    tslib.__extends(TestSpan, _super);\n    /**\n     * Starts a new Span.\n     * @param parentTracer-  The tracer that created this Span\n     * @param name - The name of the span.\n     * @param context - The SpanContext this span belongs to\n     * @param kind - The SpanKind of this Span\n     * @param parentSpanId - The identifier of the parent Span\n     * @param startTime - The startTime of the event (defaults to now)\n     */\n    function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {\n        if (startTime === void 0) { startTime = Date.now(); }\n        var _this = _super.call(this) || this;\n        _this._tracer = parentTracer;\n        _this.name = name;\n        _this.kind = kind;\n        _this.startTime = startTime;\n        _this.parentSpanId = parentSpanId;\n        _this.status = {\n            code: exports.SpanStatusCode.OK\n        };\n        _this.endCalled = false;\n        _this._context = context;\n        _this.attributes = {};\n        return _this;\n    }\n    /**\n     * Returns the Tracer that created this Span\n     */\n    TestSpan.prototype.tracer = function () {\n        return this._tracer;\n    };\n    /**\n     * Returns the SpanContext associated with this Span.\n     */\n    TestSpan.prototype.context = function () {\n        return this._context;\n    };\n    /**\n     * Marks the end of Span execution.\n     * @param _endTime - The time to use as the Span's end time. Defaults to\n     * the current time.\n     */\n    TestSpan.prototype.end = function (_endTime) {\n        this.endCalled = true;\n    };\n    /**\n     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n     * @param status - The status to set.\n     */\n    TestSpan.prototype.setStatus = function (status) {\n        this.status = status;\n        return this;\n    };\n    /**\n     * Returns whether this span will be recorded\n     */\n    TestSpan.prototype.isRecording = function () {\n        return true;\n    };\n    /**\n     * Sets an attribute on the Span\n     * @param key - The attribute key\n     * @param value - The attribute value\n     */\n    TestSpan.prototype.setAttribute = function (key, value) {\n        this.attributes[key] = value;\n        return this;\n    };\n    /**\n     * Sets attributes on the Span\n     * @param attributes - The attributes to add\n     */\n    TestSpan.prototype.setAttributes = function (attributes) {\n        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.attributes[key] = attributes[key];\n        }\n        return this;\n    };\n    return TestSpan;\n}(NoOpSpan));\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A mock tracer useful for testing\n */\nvar TestTracer = /** @class */ (function (_super) {\n    tslib.__extends(TestTracer, _super);\n    function TestTracer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.traceIdCounter = 0;\n        _this.spanIdCounter = 0;\n        _this.rootSpans = [];\n        _this.knownSpans = [];\n        return _this;\n    }\n    TestTracer.prototype.getNextTraceId = function () {\n        this.traceIdCounter++;\n        return String(this.traceIdCounter);\n    };\n    TestTracer.prototype.getNextSpanId = function () {\n        this.spanIdCounter++;\n        return String(this.spanIdCounter);\n    };\n    /**\n     * Returns all Spans that were created without a parent\n     */\n    TestTracer.prototype.getRootSpans = function () {\n        return this.rootSpans;\n    };\n    /**\n     * Returns all Spans this Tracer knows about\n     */\n    TestTracer.prototype.getKnownSpans = function () {\n        return this.knownSpans;\n    };\n    /**\n     * Returns all Spans where end() has not been called\n     */\n    TestTracer.prototype.getActiveSpans = function () {\n        return this.knownSpans.filter(function (span) {\n            return !span.endCalled;\n        });\n    };\n    /**\n     * Return all Spans for a particular trace, grouped by their\n     * parent Span in a tree-like structure\n     * @param traceId - The traceId to return the graph for\n     */\n    TestTracer.prototype.getSpanGraph = function (traceId) {\n        var traceSpans = this.knownSpans.filter(function (span) {\n            return span.context().traceId === traceId;\n        });\n        var roots = [];\n        var nodeMap = new Map();\n        for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {\n            var span = traceSpans_1[_i];\n            var spanId = span.context().spanId;\n            var node = {\n                name: span.name,\n                children: []\n            };\n            nodeMap.set(spanId, node);\n            if (span.parentSpanId) {\n                var parent = nodeMap.get(span.parentSpanId);\n                if (!parent) {\n                    throw new Error(\"Span with name \" + node.name + \" has an unknown parentSpan with id \" + span.parentSpanId);\n                }\n                parent.children.push(node);\n            }\n            else {\n                roots.push(node);\n            }\n        }\n        return {\n            roots: roots\n        };\n    };\n    /**\n     * Starts a new Span.\n     * @param name - The name of the span.\n     * @param options - The SpanOptions used during Span creation.\n     */\n    TestTracer.prototype.startSpan = function (name, options, context$1) {\n        var parentContext = getSpanContext(context$1 || context.active());\n        var traceId;\n        var isRootSpan = false;\n        if (parentContext && parentContext.traceId) {\n            traceId = parentContext.traceId;\n        }\n        else {\n            traceId = this.getNextTraceId();\n            isRootSpan = true;\n        }\n        var spanContext = {\n            traceId: traceId,\n            spanId: this.getNextSpanId(),\n            traceFlags: 0 /* NONE */\n        };\n        var span = new TestSpan(this, name, spanContext, (options === null || options === void 0 ? void 0 : options.kind) || exports.SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options === null || options === void 0 ? void 0 : options.startTime);\n        this.knownSpans.push(span);\n        if (isRootSpan) {\n            this.rootSpans.push(span);\n        }\n        return span;\n    };\n    return TestTracer;\n}(NoOpTracer));\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nfunction createSpanFunction(args) {\n    return function (operationName, operationOptions) {\n        var tracer = getTracer();\n        var tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};\n        var spanOptions = tslib.__assign({ kind: exports.SpanKind.INTERNAL }, tracingOptions.spanOptions);\n        var spanName = args.packagePrefix ? args.packagePrefix + \".\" + operationName : operationName;\n        var span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n        if (args.namespace) {\n            span.setAttribute(\"az.namespace\", args.namespace);\n        }\n        var newSpanOptions = tracingOptions.spanOptions || {};\n        if (span.isRecording() && args.namespace) {\n            newSpanOptions = tslib.__assign(tslib.__assign({}, tracingOptions.spanOptions), { attributes: tslib.__assign(tslib.__assign({}, spanOptions.attributes), { \"az.namespace\": args.namespace }) });\n        }\n        var newTracingOptions = tslib.__assign(tslib.__assign({}, tracingOptions), { spanOptions: newSpanOptions, tracingContext: setSpan(tracingOptions.tracingContext || context.active(), span) });\n        var newOperationOptions = tslib.__assign(tslib.__assign({}, operationOptions), { tracingOptions: newTracingOptions });\n        return {\n            span: span,\n            updatedOptions: newOperationOptions\n        };\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nfunction extractSpanContextFromTraceParentHeader(traceParentHeader) {\n    var parts = traceParentHeader.split(\"-\");\n    if (parts.length !== 4) {\n        return;\n    }\n    var version = parts[0], traceId = parts[1], spanId = parts[2], traceOptions = parts[3];\n    if (version !== VERSION) {\n        return;\n    }\n    var traceFlags = parseInt(traceOptions, 16);\n    var spanContext = {\n        spanId: spanId,\n        traceId: traceId,\n        traceFlags: traceFlags\n    };\n    return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nfunction getTraceParentHeader(spanContext) {\n    var missingFields = [];\n    if (!spanContext.traceId) {\n        missingFields.push(\"traceId\");\n    }\n    if (!spanContext.spanId) {\n        missingFields.push(\"spanId\");\n    }\n    if (missingFields.length) {\n        return;\n    }\n    var flags = spanContext.traceFlags || 0 /* NONE */;\n    var hexFlags = flags.toString(16);\n    var traceFlags = hexFlags.length === 1 ? \"0\" + hexFlags : hexFlags;\n    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n    return VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-\" + traceFlags;\n}\n\nexports.NoOpSpan = NoOpSpan;\nexports.NoOpTracer = NoOpTracer;\nexports.OpenCensusSpanWrapper = OpenCensusSpanWrapper;\nexports.OpenCensusTracerWrapper = OpenCensusTracerWrapper;\nexports.TestSpan = TestSpan;\nexports.TestTracer = TestTracer;\nexports.context = context;\nexports.createSpanFunction = createSpanFunction;\nexports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;\nexports.getSpan = getSpan;\nexports.getSpanContext = getSpanContext;\nexports.getTraceParentHeader = getTraceParentHeader;\nexports.getTracer = getTracer;\nexports.setSpan = setSpan;\nexports.setSpanContext = setSpanContext;\nexports.setTracer = setTracer;\n//# sourceMappingURL=index.js.map\n",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextAPI = void 0;\nvar NoopContextManager_1 = require(\"../context/NoopContextManager\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager. Returns the initialized context manager\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        global_utils_1.registerGlobal(API_NAME, contextManager);\n        return contextManager;\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArrays([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param target function or event emitter to bind\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     */\n    ContextAPI.prototype.bind = function (target, context) {\n        if (context === void 0) { context = this.active(); }\n        return this._getContextManager().bind(target, context);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return global_utils_1.getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        global_utils_1.unregisterGlobal(API_NAME);\n    };\n    return ContextAPI;\n}());\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagAPI = void 0;\nvar logLevelLogger_1 = require(\"../diag/internal/logLevelLogger\");\nvar types_1 = require(\"../diag/types\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var logger = global_utils_1.getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, \n                // work around Function.prototype.apply types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                arguments);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a;\n            if (logLevel === void 0) { logLevel = types_1.DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return;\n            }\n            global_utils_1.registerGlobal('diag', logLevelLogger_1.createLogLevelDiagLogger(logLevel, logger), true);\n        };\n        self.disable = function () {\n            global_utils_1.unregisterGlobal(API_NAME);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexports.DiagAPI = DiagAPI;\n//# sourceMappingURL=diag.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nvar NoopTextMapPropagator_1 = require(\"../propagation/NoopTextMapPropagator\");\nvar TextMapPropagator_1 = require(\"../propagation/TextMapPropagator\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'propagation';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator. Returns the initialized propagator\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        global_utils_1.registerGlobal(API_NAME, propagator);\n        return propagator;\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = TextMapPropagator_1.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = TextMapPropagator_1.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME);\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return global_utils_1.getGlobal(API_NAME) || NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceAPI = void 0;\nvar ProxyTracerProvider_1 = require(\"../trace/ProxyTracerProvider\");\nvar spancontext_utils_1 = require(\"../trace/spancontext-utils\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n        this.isSpanContextValid = spancontext_utils_1.isSpanContextValid;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer. Returns the initialized global tracer provider\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        this._proxyTracerProvider.setDelegate(provider);\n        global_utils_1.registerGlobal(API_NAME, this._proxyTracerProvider);\n        return this._proxyTracerProvider;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return global_utils_1.getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME);\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Baggage.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Entry.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataFromString = exports.createBaggage = void 0;\nvar baggage_1 = require(\"./internal/baggage\");\nvar symbol_1 = require(\"./internal/symbol\");\n__exportStar(require(\"./Baggage\"), exports);\n__exportStar(require(\"./Entry\"), exports);\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new baggage_1.BaggageImpl(new Map(Object.entries(entries)));\n}\nexports.createBaggage = createBaggage;\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        // @TODO log diagnostic\n        str = '';\n    }\n    return {\n        __TYPE__: symbol_1.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\nexports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaggageImpl = void 0;\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var k = _a[0], v = _a[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            newBaggage._entries.delete(key);\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexports.BaggageImpl = BaggageImpl;\n//# sourceMappingURL=baggage.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataSymbol = void 0;\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexports.baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Exception.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Time.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopContextManager = void 0;\nvar context_1 = require(\"./context\");\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return context_1.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArrays([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (target, _context) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexports.NoopContextManager = NoopContextManager;\n//# sourceMappingURL=NoopContextManager.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ROOT_CONTEXT = exports.createContextKey = exports.setBaggage = exports.getBaggage = exports.isInstrumentationSuppressed = exports.unsuppressInstrumentation = exports.suppressInstrumentation = exports.getSpanContext = exports.setSpanContext = exports.setSpan = exports.getSpan = void 0;\nvar NoopSpan_1 = require(\"../trace/NoopSpan\");\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Shared key for indicating if instrumentation should be suppressed beyond\n * this current scope.\n */\nvar SUPPRESS_INSTRUMENTATION_KEY = createContextKey('OpenTelemetry Context Key SUPPRESS_INSTRUMENTATION');\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\nexports.getSpan = getSpan;\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\nexports.setSpan = setSpan;\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new NoopSpan_1.NoopSpan(spanContext));\n}\nexports.setSpanContext = setSpanContext;\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.context();\n}\nexports.getSpanContext = getSpanContext;\n/**\n * Sets value on context to indicate that instrumentation should\n * be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\nfunction suppressInstrumentation(context) {\n    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, true);\n}\nexports.suppressInstrumentation = suppressInstrumentation;\n/**\n * Sets value on context to indicate that instrumentation should\n * no-longer be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\nfunction unsuppressInstrumentation(context) {\n    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, false);\n}\nexports.unsuppressInstrumentation = unsuppressInstrumentation;\n/**\n * Return current suppress instrumentation value for the given context,\n * if it exists.\n *\n * @param context context check for the suppress instrumentation value.\n */\nfunction isInstrumentationSuppressed(context) {\n    return Boolean(context.getValue(SUPPRESS_INSTRUMENTATION_KEY));\n}\nexports.isInstrumentationSuppressed = isInstrumentationSuppressed;\n/**\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\nexports.getBaggage = getBaggage;\n/**\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\nexports.setBaggage = setBaggage;\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    return Symbol.for(description);\n}\nexports.createContextKey = createContextKey;\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexports.ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagConsoleLogger = void 0;\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexports.DiagConsoleLogger = DiagConsoleLogger;\n//# sourceMappingURL=consoleLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./consoleLogger\"), exports);\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createLogLevelDiagLogger = void 0;\nvar types_1 = require(\"../types\");\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < types_1.DiagLogLevel.NONE) {\n        maxLevel = types_1.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > types_1.DiagLogLevel.ALL) {\n        maxLevel = types_1.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', types_1.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', types_1.DiagLogLevel.WARN),\n        info: _filterFunc('info', types_1.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', types_1.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', types_1.DiagLogLevel.VERBOSE),\n    };\n}\nexports.createLogLevelDiagLogger = createLogLevelDiagLogger;\n//# sourceMappingURL=logLevelLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagLogLevel = void 0;\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel = exports.DiagLogLevel || (exports.DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diag = exports.propagation = exports.trace = exports.context = exports.isValidSpanId = exports.isValidTraceId = exports.isSpanContextValid = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;\n__exportStar(require(\"./baggage\"), exports);\n__exportStar(require(\"./common/Exception\"), exports);\n__exportStar(require(\"./common/Time\"), exports);\n__exportStar(require(\"./diag\"), exports);\n__exportStar(require(\"./propagation/NoopTextMapPropagator\"), exports);\n__exportStar(require(\"./propagation/TextMapPropagator\"), exports);\n__exportStar(require(\"./trace/attributes\"), exports);\n__exportStar(require(\"./trace/Event\"), exports);\n__exportStar(require(\"./trace/link_context\"), exports);\n__exportStar(require(\"./trace/link\"), exports);\n__exportStar(require(\"./trace/NoopTracer\"), exports);\n__exportStar(require(\"./trace/NoopTracerProvider\"), exports);\n__exportStar(require(\"./trace/ProxyTracer\"), exports);\n__exportStar(require(\"./trace/ProxyTracerProvider\"), exports);\n__exportStar(require(\"./trace/Sampler\"), exports);\n__exportStar(require(\"./trace/SamplingResult\"), exports);\n__exportStar(require(\"./trace/span_context\"), exports);\n__exportStar(require(\"./trace/span_kind\"), exports);\n__exportStar(require(\"./trace/span\"), exports);\n__exportStar(require(\"./trace/SpanOptions\"), exports);\n__exportStar(require(\"./trace/status\"), exports);\n__exportStar(require(\"./trace/TimedEvent\"), exports);\n__exportStar(require(\"./trace/trace_flags\"), exports);\n__exportStar(require(\"./trace/trace_state\"), exports);\n__exportStar(require(\"./trace/tracer_provider\"), exports);\n__exportStar(require(\"./trace/tracer\"), exports);\nvar spancontext_utils_1 = require(\"./trace/spancontext-utils\");\nObject.defineProperty(exports, \"INVALID_SPANID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPANID; } });\nObject.defineProperty(exports, \"INVALID_TRACEID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_TRACEID; } });\nObject.defineProperty(exports, \"INVALID_SPAN_CONTEXT\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPAN_CONTEXT; } });\nObject.defineProperty(exports, \"isSpanContextValid\", { enumerable: true, get: function () { return spancontext_utils_1.isSpanContextValid; } });\nObject.defineProperty(exports, \"isValidTraceId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidTraceId; } });\nObject.defineProperty(exports, \"isValidSpanId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidSpanId; } });\n__exportStar(require(\"./context/context\"), exports);\n__exportStar(require(\"./context/NoopContextManager\"), exports);\n__exportStar(require(\"./context/types\"), exports);\nvar context_1 = require(\"./api/context\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nvar trace_1 = require(\"./api/trace\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nvar propagation_1 = require(\"./api/propagation\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nvar diag_1 = require(\"./api/diag\");\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexports.diag = diag_1.DiagAPI.instance();\nexports.default = {\n    trace: exports.trace,\n    context: exports.context,\n    propagation: exports.propagation,\n    diag: exports.diag,\n};\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unregisterGlobal = exports.getGlobal = exports.registerGlobal = void 0;\nvar __1 = require(\"..\");\nvar platform_1 = require(\"../platform\");\nvar version_1 = require(\"../version\");\nvar semver_1 = require(\"./semver\");\nvar major = version_1.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"io.opentelemetry.js.api.\" + major);\nvar _global = platform_1._globalThis;\nfunction registerGlobal(type, instance, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: version_1.VERSION,\n    };\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        __1.diag.error(err.stack || err.message);\n        return;\n    }\n    if (api.version !== version_1.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        __1.diag.error(err.stack || err.message);\n        return;\n    }\n    api[type] = instance;\n}\nexports.registerGlobal = registerGlobal;\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !semver_1.isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexports.getGlobal = getGlobal;\nfunction unregisterGlobal(type) {\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\nexports.unregisterGlobal = unregisterGlobal;\n//# sourceMappingURL=global-utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCompatible = exports._makeCompatibilityCheck = void 0;\nvar version_1 = require(\"../version\");\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.*))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n    };\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n        };\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\nexports._makeCompatibilityCheck = _makeCompatibilityCheck;\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexports.isCompatible = _makeCompatibilityCheck(version_1.VERSION);\n//# sourceMappingURL=semver.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./node\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._globalThis = void 0;\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexports._globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./globalThis\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TEXT_MAP_PROPAGATOR = exports.NoopTextMapPropagator = void 0;\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexports.NoopTextMapPropagator = NoopTextMapPropagator;\nexports.NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n//# sourceMappingURL=NoopTextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;\nexports.defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexports.defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Event.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopSpan = void 0;\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * The NoopSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NoopSpan = /** @class */ (function () {\n    function NoopSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = spancontext_utils_1.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NoopSpan.prototype.context = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NoopSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for noopSpan.\n    NoopSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NoopSpan.prototype.recordException = function (_exception, _time) { };\n    return NoopSpan;\n}());\nexports.NoopSpan = NoopSpan;\n//# sourceMappingURL=NoopSpan.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TRACER = exports.NoopTracer = void 0;\nvar context_1 = require(\"../context/context\");\nvar NoopSpan_1 = require(\"./NoopSpan\");\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NoopSpan_1.NoopSpan();\n        }\n        var parentFromContext = context && context_1.getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            spancontext_utils_1.isSpanContextValid(parentFromContext)) {\n            return new NoopSpan_1.NoopSpan(parentFromContext);\n        }\n        else {\n            return new NoopSpan_1.NoopSpan();\n        }\n    };\n    return NoopTracer;\n}());\nexports.NoopTracer = NoopTracer;\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\nexports.NOOP_TRACER = new NoopTracer();\n//# sourceMappingURL=NoopTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TRACER_PROVIDER = exports.NoopTracerProvider = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version) {\n        return NoopTracer_1.NOOP_TRACER;\n    };\n    return NoopTracerProvider;\n}());\nexports.NoopTracerProvider = NoopTracerProvider;\nexports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n//# sourceMappingURL=NoopTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracer = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NoopTracer_1.NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexports.ProxyTracer = ProxyTracer;\n//# sourceMappingURL=ProxyTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracerProvider = void 0;\nvar ProxyTracer_1 = require(\"./ProxyTracer\");\nvar NoopTracerProvider_1 = require(\"./NoopTracerProvider\");\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexports.ProxyTracerProvider = ProxyTracerProvider;\n//# sourceMappingURL=ProxyTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Sampler.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SamplingDecision = void 0;\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SpanOptions.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=TimedEvent.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=attributes.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link_context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span_context.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanKind = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSpanContextValid = exports.isValidSpanId = exports.isValidTraceId = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;\nvar trace_flags_1 = require(\"./trace_flags\");\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexports.INVALID_SPANID = '0000000000000000';\nexports.INVALID_TRACEID = '00000000000000000000000000000000';\nexports.INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACEID,\n    spanId: exports.INVALID_SPANID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== exports.INVALID_TRACEID;\n}\nexports.isValidTraceId = isValidTraceId;\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== exports.INVALID_SPANID;\n}\nexports.isValidSpanId = isValidSpanId;\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\nexports.isSpanContextValid = isSpanContextValid;\n//# sourceMappingURL=spancontext-utils.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanStatusCode = void 0;\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode = exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceFlags = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace_state.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer_provider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '1.0.0-rc.0';\n//# sourceMappingURL=version.js.map",
    "\"use strict\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"@azure/core-asynciterator-polyfill\");\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar logger$1 = require('@azure/logger');\nvar url = require('url');\nvar os = require('os');\nvar util = require('util');\nvar coreTracing = require('@azure/core-tracing');\nvar httpsProxyAgent$1 = require('https-proxy-agent');\nvar httpProxyAgent$1 = require('http-proxy-agent');\nvar FormData = _interopDefault(require('form-data'));\nvar http = require('http');\nvar https = require('https');\nvar zlib = require('zlib');\nvar stream = require('stream');\nvar abortController = require('@azure/abort-controller');\nvar uuid = require('uuid');\n\n// Copyright (c) Microsoft Corporation.\nconst logger = logger$1.createClientLogger(\"core-rest-pipeline\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n * @internal\n */\nconst isNode = typeof process !== \"undefined\" && Boolean(process.version) && Boolean((_a = process.versions) === null || _a === void 0 ? void 0 : _a.node);\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nfunction delay(t, value) {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n * @internal\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n/**\n * @internal\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n\n// Copyright (c) Microsoft Corporation.\nconst RedactedString = \"REDACTED\";\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\"\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [] } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || isObject(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null) {\n            return value;\n        }\n        const url$1 = new url.URL(value);\n        if (!url$1.search) {\n            return value;\n        }\n        for (const [key] of url$1.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url$1.searchParams.set(key, RedactedString);\n            }\n        }\n        return url$1.toString();\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger$1 = (_a = options.logger) !== null && _a !== void 0 ? _a : logger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger$1.enabled) {\n                return next(request);\n            }\n            logger$1(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger$1(`Response status code: ${response.status}`);\n            logger$1(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nfunction setPlatformSpecificData(map) {\n    map.set(\"Node\", process.version);\n    map.set(\"OS\", `(${os.arch()}-${os.type()}-${os.release()})`);\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst SDK_VERSION = \"1.1.1\";\n\n// Copyright (c) Microsoft Corporation.\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return getHeaderName();\n}\n/**\n * @internal\n */\nfunction getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n    setPlatformSpecificData(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, userAgentValue);\n            }\n            return next(request);\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        }\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url$1 = new url.URL(locationHeader, request.url);\n        request.url = url$1.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst custom = util.inspect.custom;\n\n// Copyright (c) Microsoft Corporation.\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        this.request = options.request;\n        this.response = options.response;\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\nconst DEFAULT_CLIENT_RETRY_COUNT = 10;\n// intervals are in ms\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a, _b, _c;\n    const retryCount = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_COUNT;\n    const retryInterval = (_b = options.retryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_c = options.maxRetryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    /**\n     * Determines if the operation should be retried and how long to wait until the next retry.\n     *\n     * @param statusCode - The HTTP status code.\n     * @param retryData -  The retry data.\n     * @returns True if the operation qualifies for a retry; false otherwise.\n     */\n    function shouldRetry(response, retryData) {\n        const statusCode = response === null || response === void 0 ? void 0 : response.status;\n        if (statusCode === 503 && (response === null || response === void 0 ? void 0 : response.headers.get(\"Retry-After\"))) {\n            return false;\n        }\n        if (statusCode === undefined ||\n            (statusCode < 500 && statusCode !== 408) ||\n            statusCode === 501 ||\n            statusCode === 505) {\n            return false;\n        }\n        const currentCount = retryData && retryData.retryCount;\n        return currentCount < retryCount;\n    }\n    /**\n     * Updates the retry data for the next attempt.\n     *\n     * @param retryData -  The retry data.\n     * @param err - The operation's error, if any.\n     */\n    function updateRetryData(retryData, err) {\n        if (err) {\n            if (retryData.error) {\n                err.innerError = retryData.error;\n            }\n            retryData.error = err;\n        }\n        // Adjust retry count\n        retryData.retryCount++;\n        // Exponentially increase the delay each time\n        const exponentialDelay = retryInterval * Math.pow(2, retryData.retryCount);\n        // Don't let the delay exceed the maximum\n        const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n        // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n        // that retries across multiple clients don't occur simultaneously.\n        const delayWithJitter = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n        retryData.retryInterval = delayWithJitter;\n        return retryData;\n    }\n    async function retry(next, retryData, request, response, requestError) {\n        var _a;\n        retryData = updateRetryData(retryData, requestError);\n        const isAborted = (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted;\n        if (!isAborted && shouldRetry(response, retryData)) {\n            logger.info(`Retrying request in ${retryData.retryInterval}`);\n            try {\n                await delay(retryData.retryInterval);\n                const res = await next(request);\n                return retry(next, retryData, request, res);\n            }\n            catch (e) {\n                return retry(next, retryData, request, response, e);\n            }\n        }\n        else if (isAborted || requestError || !response) {\n            // If the operation failed in the end, return all errors instead of just the last one\n            const err = retryData.error ||\n                new RestError(\"Failed to send the request.\", {\n                    code: RestError.REQUEST_SEND_ERROR,\n                    statusCode: response === null || response === void 0 ? void 0 : response.status,\n                    request: response === null || response === void 0 ? void 0 : response.request,\n                    response\n                });\n            throw err;\n        }\n        else {\n            return response;\n        }\n    }\n    return {\n        name: exponentialRetryPolicyName,\n        async sendRequest(request, next) {\n            const retryData = {\n                retryCount: 0,\n                retryInterval: 0\n            };\n            try {\n                const response = await next(request);\n                return retry(next, retryData, request, response);\n            }\n            catch (e) {\n                const error = e;\n                return retry(next, retryData, request, error.response, error);\n            }\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst createSpan = coreTracing.createSpanFunction({\n    packagePrefix: \"\",\n    namespace: \"\"\n});\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgent = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                return next(request);\n            }\n            // create a new span\n            const tracingOptions = Object.assign(Object.assign({}, request.tracingOptions), { spanOptions: Object.assign(Object.assign({}, request.tracingOptions.spanOptions), { kind: coreTracing.SpanKind.CLIENT }) });\n            const url$1 = new url.URL(request.url);\n            const path = url$1.pathname || \"/\";\n            const { span } = createSpan(path, { tracingOptions });\n            span.setAttributes({\n                \"http.method\": request.method,\n                \"http.url\": request.url,\n                requestId: request.requestId\n            });\n            if (userAgent) {\n                span.setAttribute(\"http.user_agent\", userAgent);\n            }\n            try {\n                // set headers\n                const spanContext = span.spanContext();\n                const traceParentHeader = coreTracing.getTraceParentHeader(spanContext);\n                if (traceParentHeader) {\n                    request.headers.set(\"traceparent\", traceParentHeader);\n                    const traceState = spanContext.traceState && spanContext.traceState.serialize();\n                    // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n                    if (traceState) {\n                        request.headers.set(\"tracestate\", traceState);\n                    }\n                }\n                const response = await next(request);\n                span.setAttribute(\"http.status_code\", response.status);\n                const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n                if (serviceRequestId) {\n                    span.setAttribute(\"serviceRequestId\", serviceRequestId);\n                }\n                span.setStatus({\n                    code: coreTracing.SpanStatusCode.OK\n                });\n                return response;\n            }\n            catch (err) {\n                span.setStatus({\n                    code: coreTracing.SpanStatusCode.ERROR,\n                    message: err.message\n                });\n                span.setAttribute(\"http.status_code\", err.statusCode);\n                throw err;\n            }\n            finally {\n                span.end();\n            }\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the throttlingRetryPolicy.\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * Maximum number of retries for the throttling retry policy\n */\nconst DEFAULT_CLIENT_MAX_RETRY_COUNT = 3;\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nfunction throttlingRetryPolicy() {\n    return {\n        name: throttlingRetryPolicyName,\n        async sendRequest(request, next) {\n            let response = await next(request);\n            for (let count = 0; count < DEFAULT_CLIENT_MAX_RETRY_COUNT; count++) {\n                if (response.status !== 429 && response.status !== 503) {\n                    return response;\n                }\n                const retryAfterHeader = response.headers.get(\"Retry-After\");\n                if (!retryAfterHeader) {\n                    break;\n                }\n                const delayInMs = parseRetryAfterHeader(retryAfterHeader);\n                if (!delayInMs) {\n                    break;\n                }\n                await delay(delayInMs);\n                response = await next(request);\n            }\n            return response;\n        }\n    };\n}\n/**\n * Returns the number of milliseconds to wait based on a Retry-After header value.\n * Returns undefined if there is no valid value.\n * @param headerValue - An HTTP Retry-After header value.\n */\nfunction parseRetryAfterHeader(headerValue) {\n    try {\n        const retryAfterInSeconds = Number(headerValue);\n        if (!Number.isNaN(retryAfterInSeconds)) {\n            return retryAfterInSeconds * 1000;\n        }\n        else {\n            // It might be formatted as a date instead of a number of seconds\n            const now = Date.now();\n            const date = Date.parse(headerValue);\n            const diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst DEFAULT_CLIENT_RETRY_COUNT$1 = 10;\n// intervals are in ms\nconst DEFAULT_CLIENT_RETRY_INTERVAL$1 = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL$1 = 1000 * 64;\n/**\n * The programmatic identifier of the systemErrorRetryPolicy.\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a, _b, _c;\n    const retryCount = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_COUNT$1;\n    const retryInterval = (_b = options.retryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_RETRY_INTERVAL$1;\n    const maxRetryInterval = (_c = options.maxRetryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_CLIENT_MAX_RETRY_INTERVAL$1;\n    function shouldRetry(retryData, err) {\n        if (!isSystemError(err)) {\n            return false;\n        }\n        const currentCount = retryData.retryCount;\n        return currentCount <= retryCount;\n    }\n    function updateRetryData(retryData, err) {\n        if (err) {\n            if (retryData.error) {\n                err.innerError = retryData.error;\n            }\n            retryData.error = err;\n        }\n        // Adjust retry count\n        retryData.retryCount++;\n        // Exponentially increase the delay each time\n        const exponentialDelay = retryInterval * Math.pow(2, retryData.retryCount);\n        // Don't let the delay exceed the maximum\n        const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n        // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n        // that retries across multiple clients don't occur simultaneously.\n        const delayWithJitter = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n        retryData.retryInterval = delayWithJitter;\n        return retryData;\n    }\n    async function retry(next, retryData, request, response, requestError) {\n        retryData = updateRetryData(retryData, requestError);\n        if (shouldRetry(retryData, requestError)) {\n            try {\n                logger.info(`Retrying request in ${retryData.retryInterval}`);\n                await delay(retryData.retryInterval);\n                const res = await next(request);\n                return retry(next, retryData, request, res);\n            }\n            catch (e) {\n                return retry(next, retryData, request, response, e);\n            }\n        }\n        else if (requestError || !response) {\n            // If the operation failed in the end, return all errors instead of just the last one\n            const err = retryData.error ||\n                new RestError(\"Failed to send the request.\", {\n                    code: RestError.REQUEST_SEND_ERROR,\n                    statusCode: response === null || response === void 0 ? void 0 : response.status,\n                    request: response === null || response === void 0 ? void 0 : response.request,\n                    response\n                });\n            throw err;\n        }\n        else {\n            return response;\n        }\n    }\n    return {\n        name: systemErrorRetryPolicyName,\n        async sendRequest(request, next) {\n            const retryData = {\n                retryCount: 0,\n                retryInterval: 0\n            };\n            try {\n                const response = await next(request);\n                return retry(next, retryData, request, response);\n            }\n            catch (e) {\n                const error = e;\n                return retry(next, retryData, request, error.response, error);\n            }\n        }\n    };\n}\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\");\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        async sendRequest(request, next) {\n            // HEAD requests have no body\n            if (request.method !== \"HEAD\") {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            return next(request);\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nconst proxyPolicyName = \"proxyPolicy\";\nconst noProxyList = [];\nlet noProxyListLoaded = false;\nconst byPassedList = new Map();\nlet httpsProxyAgent;\nlet httpProxyAgent;\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n// Check whether the host of a given `uri` is in the noProxyList.\n// If there's a match, any request sent to the same host won't have the proxy settings set.\nfunction isBypassed(uri) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new url.URL(uri).hostname;\n    if (byPassedList.has(host)) {\n        return byPassedList.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    byPassedList.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nfunction loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    noProxyListLoaded = true;\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new url.URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password\n    };\n}\n/**\n * @internal\n */\nfunction getProxyAgentOptions(proxySettings, requestHeaders) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new url.URL(proxySettings.host);\n    }\n    catch (_error) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${proxySettings.host}\".`);\n    }\n    const proxyAgentOptions = {\n        hostname: parsedProxyUrl.hostname,\n        port: proxySettings.port,\n        protocol: parsedProxyUrl.protocol,\n        headers: requestHeaders.toJSON()\n    };\n    if (proxySettings.username && proxySettings.password) {\n        proxyAgentOptions.auth = `${proxySettings.username}:${proxySettings.password}`;\n    }\n    else if (proxySettings.username) {\n        proxyAgentOptions.auth = `${proxySettings.username}`;\n    }\n    return proxyAgentOptions;\n}\nfunction setProxyAgentOnRequest(request) {\n    const url$1 = new url.URL(request.url);\n    const isInsecure = url$1.protocol !== \"https:\";\n    const proxySettings = request.proxySettings;\n    if (proxySettings) {\n        if (isInsecure) {\n            if (!httpProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpProxyAgent = new httpProxyAgent$1.HttpProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpProxyAgent;\n        }\n        else {\n            if (!httpsProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpsProxyAgent = new httpsProxyAgent$1.HttpsProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpsProxyAgent;\n        }\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n */\nfunction proxyPolicy(proxySettings = getDefaultProxySettings()) {\n    if (!noProxyListLoaded) {\n        noProxyList.push(...loadNoProxy());\n    }\n    return {\n        name: proxyPolicyName,\n        async sendRequest(request, next) {\n            if (!request.proxySettings && !isBypassed(request.url)) {\n                request.proxySettings = proxySettings;\n            }\n            if (request.proxySettings) {\n                setProxyAgentOnRequest(request);\n            }\n            return next(request);\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (request.formData) {\n                prepareFormData(request.formData, request);\n            }\n            return next(request);\n        }\n    };\n}\nasync function prepareFormData(formData, request) {\n    const requestForm = new FormData();\n    for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n            for (const subValue of formValue) {\n                requestForm.append(formKey, subValue);\n            }\n        }\n        else {\n            requestForm.append(formKey, formValue);\n        }\n    }\n    request.body = requestForm;\n    request.formData = undefined;\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        request.headers.set(\"Content-Type\", `multipart/form-data; boundary=${requestForm.getBoundary()}`);\n    }\n    try {\n        const contentLength = await new Promise((resolve, reject) => {\n            requestForm.getLength((err, length) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(length);\n                }\n            });\n        });\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    catch (e) {\n        // ignore setting the length if this fails\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies = []) {\n        this._policies = [];\n        this._policies = policies;\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        // Track policies for each phase.\n        const serializePhase = new Set();\n        const noPhase = new Set();\n        const deserializePhase = new Set();\n        const retryPhase = new Set();\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase];\n        // Small helper function to map phase name to each Set bucket.\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set()\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            // Sets iterate in insertion order\n            for (const node of phase) {\n                if (node.afterPhase && node.afterPhase.size) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            let noPhaseRan = false;\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                if (phase === noPhase) {\n                    noPhaseRan = true;\n                }\n                // if the phase isn't complete\n                if (phase.size > 0 && phase !== noPhase) {\n                    if (noPhaseRan === false) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        while (policyMap.size > 0) {\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    const pipeline = HttpPipeline.create();\n    if (isNode) {\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy());\n    pipeline.addPolicy(tracingPolicy(options.userAgentOptions));\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy());\n    pipeline.addPolicy(throttlingRetryPolicy(), { phase: \"Retry\" });\n    pipeline.addPolicy(systemErrorRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(exponentialRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Retry\" });\n    return pipeline;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), String(value));\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        return this._headersMap.get(normalizeName(name));\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON() {\n        const result = {};\n        for (const [key, value] of this._headersMap) {\n            result[key] = value;\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return this._headersMap.entries();\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n\n// Copyright (c) Microsoft Corporation.\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    return new Promise((resolve) => {\n        stream.on(\"close\", resolve);\n        stream.on(\"end\", resolve);\n        stream.on(\"error\", resolve);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends stream.Transform {\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        const abortController$1 = new abortController.AbortController();\n        let abortListener;\n        if (request.abortSignal) {\n            if (request.abortSignal.aborted) {\n                throw new abortController.AbortError(\"The operation was aborted.\");\n            }\n            abortListener = (event) => {\n                if (event.type === \"abort\") {\n                    abortController$1.abort();\n                }\n            };\n            request.abortSignal.addEventListener(\"abort\", abortListener);\n        }\n        if (request.timeout > 0) {\n            setTimeout(() => {\n                abortController$1.abort();\n            }, request.timeout);\n        }\n        const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n        let body = request.body;\n        if (body && !request.headers.has(\"Content-Length\")) {\n            const bodyLength = getBodyLength(body);\n            if (bodyLength !== null) {\n                request.headers.set(\"Content-Length\", bodyLength);\n            }\n        }\n        let responseStream;\n        try {\n            const result = await new Promise((resolve, reject) => {\n                if (body && request.onUploadProgress) {\n                    const onUploadProgress = request.onUploadProgress;\n                    const uploadReportStream = new ReportTransform(onUploadProgress);\n                    uploadReportStream.on(\"error\", reject);\n                    if (isReadableStream(body)) {\n                        body.pipe(uploadReportStream);\n                    }\n                    else {\n                        uploadReportStream.end(body);\n                    }\n                    body = uploadReportStream;\n                }\n                const req = this.makeRequest(request, async (res) => {\n                    var _a, _b;\n                    const headers = getResponseHeaders(res);\n                    const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n                    const response = {\n                        status,\n                        headers,\n                        request\n                    };\n                    // Responses to HEAD must not have a body.\n                    // If they do return a body, that body must be ignored.\n                    if (request.method === \"HEAD\") {\n                        res.destroy();\n                        resolve(response);\n                        return;\n                    }\n                    responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n                    const onDownloadProgress = request.onDownloadProgress;\n                    if (onDownloadProgress) {\n                        const downloadReportStream = new ReportTransform(onDownloadProgress);\n                        downloadReportStream.on(\"error\", reject);\n                        responseStream.pipe(downloadReportStream);\n                        responseStream = downloadReportStream;\n                    }\n                    if ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(response.status)) {\n                        response.readableStreamBody = responseStream;\n                    }\n                    else {\n                        try {\n                            response.bodyAsText = await streamToText(responseStream);\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    }\n                    resolve(response);\n                });\n                req.on(\"error\", (err) => {\n                    reject(new RestError(err.message, { code: RestError.REQUEST_SEND_ERROR, request }));\n                });\n                abortController$1.signal.addEventListener(\"abort\", () => {\n                    req.abort();\n                    reject(new abortController.AbortError(\"The operation was aborted.\"));\n                });\n                if (body && isReadableStream(body)) {\n                    body.pipe(req);\n                }\n                else if (body) {\n                    if (typeof body === \"string\" || Buffer.isBuffer(body)) {\n                        req.end(body);\n                    }\n                    else if (isArrayBuffer(body)) {\n                        req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body));\n                    }\n                    else {\n                        logger.error(\"Unrecognized body type\", body);\n                        throw new RestError(\"Unrecognized body type\");\n                    }\n                }\n                else {\n                    // streams don't like \"undefined\" being passed as data\n                    req.end();\n                }\n            });\n            return result;\n        }\n        finally {\n            // clean up event listener\n            if (request.abortSignal && abortListener) {\n                let uploadStreamDone = Promise.resolve();\n                if (isReadableStream(body)) {\n                    uploadStreamDone = isStreamComplete(body);\n                }\n                let downloadStreamDone = Promise.resolve();\n                if (isReadableStream(responseStream)) {\n                    downloadStreamDone = isStreamComplete(responseStream);\n                }\n                Promise.all([uploadStreamDone, downloadStreamDone])\n                    .then(() => {\n                    var _a;\n                    (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                    return;\n                })\n                    .catch((e) => {\n                    logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                });\n            }\n        }\n    }\n    makeRequest(request, callback) {\n        var _a;\n        const url$1 = new url.URL(request.url);\n        const isInsecure = url$1.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url$1.hostname,\n            path: `${url$1.pathname}${url$1.search}`,\n            port: url$1.port,\n            method: request.method,\n            headers: request.headers.toJSON()\n        };\n        if (isInsecure) {\n            return http.request(options, callback);\n        }\n        else {\n            return https.request(options, callback);\n        }\n    }\n    getOrCreateAgent(request, isInsecure) {\n        if (!request.disableKeepAlive) {\n            if (isInsecure) {\n                if (!this.httpKeepAliveAgent) {\n                    this.httpKeepAliveAgent = new http.Agent({\n                        keepAlive: true\n                    });\n                }\n                return this.httpKeepAliveAgent;\n            }\n            else {\n                if (!this.httpsKeepAliveAgent) {\n                    this.httpsKeepAliveAgent = new https.Agent({\n                        keepAlive: true\n                    });\n                }\n                return this.httpsKeepAliveAgent;\n            }\n        }\n        else if (isInsecure) {\n            return http.globalAgent;\n        }\n        else {\n            return https.globalAgent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = createHttpHeaders();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = zlib.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = zlib.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            reject(new RestError(`Error reading response as text: ${e.message}`, {\n                code: RestError.PARSE_ERROR\n            }));\n        });\n    });\n}\n/** @internal */\nfunction getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nfunction createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return createNodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n * @internal\n */\nfunction generateUuid() {\n    return uuid.v4();\n}\n\n// Copyright (c) Microsoft Corporation.\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || generateUuid();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n\n// Copyright (c) Microsoft Corporation.\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        }\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        if (cycler.mustRefresh)\n            return refresh(scopes, tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a;\n    const { credential, scopes, challengeCallbacks } = options;\n    const callbacks = Object.assign({ authorizeRequest: (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a !== void 0 ? _a : defaultAuthorizeRequest, authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge }, challengeCallbacks);\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? createTokenCycler(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken\n            });\n            let response;\n            let error;\n            try {\n                response = await next(request);\n            }\n            catch (err) {\n                error = err;\n                response = err.response;\n            }\n            if (callbacks.authorizeRequestOnChallenge &&\n                (response === null || response === void 0 ? void 0 : response.status) === 401 &&\n                getChallenge(response)) {\n                // processes challenge\n                const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    response,\n                    getAccessToken\n                });\n                if (shouldSendRequest) {\n                    return next(request);\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        }\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        }\n    };\n}\n\nexports.RestError = RestError;\nexports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;\nexports.bearerTokenAuthenticationPolicyName = bearerTokenAuthenticationPolicyName;\nexports.createDefaultHttpClient = createDefaultHttpClient;\nexports.createEmptyPipeline = createEmptyPipeline;\nexports.createHttpHeaders = createHttpHeaders;\nexports.createPipelineFromOptions = createPipelineFromOptions;\nexports.createPipelineRequest = createPipelineRequest;\nexports.decompressResponsePolicy = decompressResponsePolicy;\nexports.decompressResponsePolicyName = decompressResponsePolicyName;\nexports.exponentialRetryPolicy = exponentialRetryPolicy;\nexports.exponentialRetryPolicyName = exponentialRetryPolicyName;\nexports.formDataPolicy = formDataPolicy;\nexports.formDataPolicyName = formDataPolicyName;\nexports.getDefaultProxySettings = getDefaultProxySettings;\nexports.logPolicy = logPolicy;\nexports.logPolicyName = logPolicyName;\nexports.ndJsonPolicy = ndJsonPolicy;\nexports.ndJsonPolicyName = ndJsonPolicyName;\nexports.proxyPolicy = proxyPolicy;\nexports.proxyPolicyName = proxyPolicyName;\nexports.redirectPolicy = redirectPolicy;\nexports.redirectPolicyName = redirectPolicyName;\nexports.setClientRequestIdPolicy = setClientRequestIdPolicy;\nexports.setClientRequestIdPolicyName = setClientRequestIdPolicyName;\nexports.systemErrorRetryPolicy = systemErrorRetryPolicy;\nexports.systemErrorRetryPolicyName = systemErrorRetryPolicyName;\nexports.throttlingRetryPolicy = throttlingRetryPolicy;\nexports.throttlingRetryPolicyName = throttlingRetryPolicyName;\nexports.tracingPolicy = tracingPolicy;\nexports.tracingPolicyName = tracingPolicyName;\nexports.userAgentPolicy = userAgentPolicy;\nexports.userAgentPolicyName = userAgentPolicyName;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar api = require('@opentelemetry/api');\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A no-op implementation of Span that can safely be used without side-effects.\n */\nclass NoOpSpan {\n    /**\n     * Returns the SpanContext associated with this Span.\n     */\n    spanContext() {\n        return {\n            spanId: \"\",\n            traceId: \"\",\n            traceFlags: 0 /* NONE */\n        };\n    }\n    /**\n     * Marks the end of Span execution.\n     * @param _endTime - The time to use as the Span's end time. Defaults to\n     * the current time.\n     */\n    end(_endTime) {\n        /* Noop */\n    }\n    /**\n     * Sets an attribute on the Span\n     * @param _key - The attribute key\n     * @param _value - The attribute value\n     */\n    setAttribute(_key, _value) {\n        return this;\n    }\n    /**\n     * Sets attributes on the Span\n     * @param _attributes - The attributes to add\n     */\n    setAttributes(_attributes) {\n        return this;\n    }\n    /**\n     * Adds an event to the Span\n     * @param _name - The name of the event\n     * @param _attributes - The associated attributes to add for this event\n     */\n    addEvent(_name, _attributes) {\n        return this;\n    }\n    /**\n     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n     * @param _status - The status to set.\n     */\n    setStatus(_status) {\n        return this;\n    }\n    /**\n     * Updates the name of the Span\n     * @param _name - the new Span name\n     */\n    updateName(_name) {\n        return this;\n    }\n    /**\n     * Returns whether this span will be recorded\n     */\n    isRecording() {\n        return false;\n    }\n    /**\n     * Sets exception as a span event\n     * @param exception - the exception the only accepted values are string or Error\n     * @param time - the time to set as Span's event time. If not provided,\n     *     use the current time.\n     */\n    recordException(_exception, _time) {\n        /* do nothing */\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A no-op implementation of Tracer that can be used when tracing\n * is disabled.\n */\nclass NoOpTracer {\n    /**\n     * Starts a new Span.\n     * @param _name - The name of the span.\n     * @param _options - The SpanOptions used during Span creation.\n     */\n    startSpan(_name, _options) {\n        return new NoOpSpan();\n    }\n    /**\n     * Returns the current Span from the current context, if available.\n     */\n    getCurrentSpan() {\n        return new NoOpSpan();\n    }\n    /**\n     * Executes the given function within the context provided by a Span.\n     * @param _span - The span that provides the context.\n     * @param fn - The function to be executed.\n     */\n    withSpan(_span, fn) {\n        return fn();\n    }\n    /**\n     * Bind a Span as the target's scope\n     * @param target - An object to bind the scope.\n     * @param _span - A specific Span to use. Otherwise, use the current one.\n     */\n    bind(target, _span) {\n        return target;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction getGlobalObject() {\n    return global;\n}\n\n// Copyright (c) Microsoft Corporation.\n// tracerCache will be updated when a new incompatible version of OTel is\n// shipped in core-tracing.\n// tracerCache3 - OpenTelemetry 1.0.0-rc.1\n// tracerCache4 - OpenTelemetry 0.20.0\nconst GLOBAL_TRACER_SYMBOL = Symbol.for(`@azure/core-tracing.tracerCache4`);\nlet cache;\nfunction loadTracerCache() {\n    const globalObj = getGlobalObject();\n    if (!globalObj[GLOBAL_TRACER_SYMBOL]) {\n        globalObj[GLOBAL_TRACER_SYMBOL] = {\n            tracer: undefined\n        };\n    }\n    cache = globalObj[GLOBAL_TRACER_SYMBOL];\n}\nfunction getCache() {\n    if (!cache) {\n        loadTracerCache();\n    }\n    return cache;\n}\n\n// Copyright (c) Microsoft Corporation.\nlet defaultTracer;\nfunction getDefaultTracer() {\n    if (!defaultTracer) {\n        defaultTracer = new NoOpTracer();\n    }\n    return defaultTracer;\n}\n/**\n * Sets the global tracer, enabling tracing for the Azure SDK.\n * @param tracer - An OpenTelemetry Tracer instance.\n */\nfunction setTracer(tracer) {\n    const cache = getCache();\n    cache.tracer = tracer;\n}\n/**\n * Retrieves the active tracer, or returns a\n * no-op implementation if one is not set.\n */\nfunction getTracer() {\n    const cache = getCache();\n    if (!cache.tracer) {\n        return getDefaultTracer();\n    }\n    return cache.tracer;\n}\n\n// Copyright (c) Microsoft Corporation.\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(exports.SpanKind || (exports.SpanKind = {}));\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nfunction getSpan(context) {\n    return api.trace.getSpan(context);\n}\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nfunction setSpan(context, span) {\n    return api.trace.setSpan(context, span);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return api.trace.setSpanContext(context, spanContext);\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nfunction getSpanContext(context) {\n    return api.trace.getSpanContext(context);\n}\n/** Entrypoint for context API */\nconst context = api.context;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A mock span useful for testing.\n */\nclass TestSpan extends NoOpSpan {\n    /**\n     * Starts a new Span.\n     * @param parentTracer-  The tracer that created this Span\n     * @param name - The name of the span.\n     * @param context - The SpanContext this span belongs to\n     * @param kind - The SpanKind of this Span\n     * @param parentSpanId - The identifier of the parent Span\n     * @param startTime - The startTime of the event (defaults to now)\n     */\n    constructor(parentTracer, name, context, kind, parentSpanId, startTime = Date.now()) {\n        super();\n        this._tracer = parentTracer;\n        this.name = name;\n        this.kind = kind;\n        this.startTime = startTime;\n        this.parentSpanId = parentSpanId;\n        this.status = {\n            code: exports.SpanStatusCode.OK\n        };\n        this.endCalled = false;\n        this._context = context;\n        this.attributes = {};\n    }\n    /**\n     * Returns the Tracer that created this Span\n     */\n    tracer() {\n        return this._tracer;\n    }\n    /**\n     * Returns the SpanContext associated with this Span.\n     */\n    spanContext() {\n        return this._context;\n    }\n    /**\n     * Marks the end of Span execution.\n     * @param _endTime - The time to use as the Span's end time. Defaults to\n     * the current time.\n     */\n    end(_endTime) {\n        this.endCalled = true;\n    }\n    /**\n     * Sets a status on the span. Overrides the default of SpanStatusCode.OK.\n     * @param status - The status to set.\n     */\n    setStatus(status) {\n        this.status = status;\n        return this;\n    }\n    /**\n     * Returns whether this span will be recorded\n     */\n    isRecording() {\n        return true;\n    }\n    /**\n     * Sets an attribute on the Span\n     * @param key - The attribute key\n     * @param value - The attribute value\n     */\n    setAttribute(key, value) {\n        this.attributes[key] = value;\n        return this;\n    }\n    /**\n     * Sets attributes on the Span\n     * @param attributes - The attributes to add\n     */\n    setAttributes(attributes) {\n        for (const key of Object.keys(attributes)) {\n            this.attributes[key] = attributes[key];\n        }\n        return this;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A mock tracer useful for testing\n */\nclass TestTracer extends NoOpTracer {\n    constructor() {\n        super(...arguments);\n        this.traceIdCounter = 0;\n        this.spanIdCounter = 0;\n        this.rootSpans = [];\n        this.knownSpans = [];\n    }\n    getNextTraceId() {\n        this.traceIdCounter++;\n        return String(this.traceIdCounter);\n    }\n    getNextSpanId() {\n        this.spanIdCounter++;\n        return String(this.spanIdCounter);\n    }\n    /**\n     * Returns all Spans that were created without a parent\n     */\n    getRootSpans() {\n        return this.rootSpans;\n    }\n    /**\n     * Returns all Spans this Tracer knows about\n     */\n    getKnownSpans() {\n        return this.knownSpans;\n    }\n    /**\n     * Returns all Spans where end() has not been called\n     */\n    getActiveSpans() {\n        return this.knownSpans.filter((span) => {\n            return !span.endCalled;\n        });\n    }\n    /**\n     * Return all Spans for a particular trace, grouped by their\n     * parent Span in a tree-like structure\n     * @param traceId - The traceId to return the graph for\n     */\n    getSpanGraph(traceId) {\n        const traceSpans = this.knownSpans.filter((span) => {\n            return span.spanContext().traceId === traceId;\n        });\n        const roots = [];\n        const nodeMap = new Map();\n        for (const span of traceSpans) {\n            const spanId = span.spanContext().spanId;\n            const node = {\n                name: span.name,\n                children: []\n            };\n            nodeMap.set(spanId, node);\n            if (span.parentSpanId) {\n                const parent = nodeMap.get(span.parentSpanId);\n                if (!parent) {\n                    throw new Error(`Span with name ${node.name} has an unknown parentSpan with id ${span.parentSpanId}`);\n                }\n                parent.children.push(node);\n            }\n            else {\n                roots.push(node);\n            }\n        }\n        return {\n            roots\n        };\n    }\n    /**\n     * Starts a new Span.\n     * @param name - The name of the span.\n     * @param options - The SpanOptions used during Span creation.\n     */\n    startSpan(name, options, context$1) {\n        const parentContext = getSpanContext(context$1 || context.active());\n        let traceId;\n        let isRootSpan = false;\n        if (parentContext && parentContext.traceId) {\n            traceId = parentContext.traceId;\n        }\n        else {\n            traceId = this.getNextTraceId();\n            isRootSpan = true;\n        }\n        const spanContext = {\n            traceId,\n            spanId: this.getNextSpanId(),\n            traceFlags: 0 /* NONE */\n        };\n        const span = new TestSpan(this, name, spanContext, (options === null || options === void 0 ? void 0 : options.kind) || exports.SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options === null || options === void 0 ? void 0 : options.startTime);\n        this.knownSpans.push(span);\n        if (isRootSpan) {\n            this.rootSpans.push(span);\n        }\n        return span;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nfunction createSpanFunction(args) {\n    return function (operationName, operationOptions) {\n        const tracer = getTracer();\n        const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};\n        const spanOptions = Object.assign({ kind: exports.SpanKind.INTERNAL }, tracingOptions.spanOptions);\n        const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n        const span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n        if (args.namespace) {\n            span.setAttribute(\"az.namespace\", args.namespace);\n        }\n        let newSpanOptions = tracingOptions.spanOptions || {};\n        if (span.isRecording() && args.namespace) {\n            newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { attributes: Object.assign(Object.assign({}, spanOptions.attributes), { \"az.namespace\": args.namespace }) });\n        }\n        const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions, tracingContext: setSpan(tracingOptions.tracingContext || context.active(), span) });\n        const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });\n        return {\n            span,\n            updatedOptions: newOperationOptions\n        };\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nfunction extractSpanContextFromTraceParentHeader(traceParentHeader) {\n    const parts = traceParentHeader.split(\"-\");\n    if (parts.length !== 4) {\n        return;\n    }\n    const [version, traceId, spanId, traceOptions] = parts;\n    if (version !== VERSION) {\n        return;\n    }\n    const traceFlags = parseInt(traceOptions, 16);\n    const spanContext = {\n        spanId,\n        traceId,\n        traceFlags\n    };\n    return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nfunction getTraceParentHeader(spanContext) {\n    const missingFields = [];\n    if (!spanContext.traceId) {\n        missingFields.push(\"traceId\");\n    }\n    if (!spanContext.spanId) {\n        missingFields.push(\"spanId\");\n    }\n    if (missingFields.length) {\n        return;\n    }\n    const flags = spanContext.traceFlags || 0 /* NONE */;\n    const hexFlags = flags.toString(16);\n    const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n    return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n\nexports.NoOpSpan = NoOpSpan;\nexports.NoOpTracer = NoOpTracer;\nexports.TestSpan = TestSpan;\nexports.TestTracer = TestTracer;\nexports.context = context;\nexports.createSpanFunction = createSpanFunction;\nexports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;\nexports.getSpan = getSpan;\nexports.getSpanContext = getSpanContext;\nexports.getTraceParentHeader = getTraceParentHeader;\nexports.getTracer = getTracer;\nexports.setSpan = setSpan;\nexports.setSpanContext = setSpanContext;\nexports.setTracer = setTracer;\n//# sourceMappingURL=index.js.map\n",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextAPI = void 0;\nvar NoopContextManager_1 = require(\"../context/NoopContextManager\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return global_utils_1.registerGlobal(API_NAME, contextManager, diag_1.DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return global_utils_1.getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagAPI = void 0;\nvar ComponentLogger_1 = require(\"../diag/ComponentLogger\");\nvar logLevelLogger_1 = require(\"../diag/internal/logLevelLogger\");\nvar types_1 = require(\"../diag/types\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var logger = global_utils_1.getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, \n                // work around Function.prototype.apply types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                arguments);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a, _b;\n            if (logLevel === void 0) { logLevel = types_1.DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            var oldLogger = global_utils_1.getGlobal('diag');\n            var newLogger = logLevelLogger_1.createLogLevelDiagLogger(logLevel, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger) {\n                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return global_utils_1.registerGlobal('diag', newLogger, self, true);\n        };\n        self.disable = function () {\n            global_utils_1.unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new ComponentLogger_1.DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexports.DiagAPI = DiagAPI;\n//# sourceMappingURL=diag.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar NoopTextMapPropagator_1 = require(\"../propagation/NoopTextMapPropagator\");\nvar TextMapPropagator_1 = require(\"../propagation/TextMapPropagator\");\nvar context_helpers_1 = require(\"../baggage/context-helpers\");\nvar utils_1 = require(\"../baggage/utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator_1.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = utils_1.createBaggage;\n        this.getBaggage = context_helpers_1.getBaggage;\n        this.setBaggage = context_helpers_1.setBaggage;\n        this.deleteBaggage = context_helpers_1.deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return global_utils_1.registerGlobal(API_NAME, propagator, diag_1.DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = TextMapPropagator_1.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = TextMapPropagator_1.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return global_utils_1.getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceAPI = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar ProxyTracerProvider_1 = require(\"../trace/ProxyTracerProvider\");\nvar spancontext_utils_1 = require(\"../trace/spancontext-utils\");\nvar context_utils_1 = require(\"../trace/context-utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n        this.wrapSpanContext = spancontext_utils_1.wrapSpanContext;\n        this.isSpanContextValid = spancontext_utils_1.isSpanContextValid;\n        this.deleteSpan = context_utils_1.deleteSpan;\n        this.getSpan = context_utils_1.getSpan;\n        this.getSpanContext = context_utils_1.getSpanContext;\n        this.setSpan = context_utils_1.setSpan;\n        this.setSpanContext = context_utils_1.setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        this._proxyTracerProvider.setDelegate(provider);\n        return global_utils_1.registerGlobal(API_NAME, this._proxyTracerProvider, diag_1.DiagAPI.instance());\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return global_utils_1.getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteBaggage = exports.setBaggage = exports.getBaggage = void 0;\nvar context_1 = require(\"../context/context\");\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = context_1.createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\nexports.getBaggage = getBaggage;\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\nexports.setBaggage = setBaggage;\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\nexports.deleteBaggage = deleteBaggage;\n//# sourceMappingURL=context-helpers.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaggageImpl = void 0;\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var k = _a[0], v = _a[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            newBaggage._entries.delete(key);\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexports.BaggageImpl = BaggageImpl;\n//# sourceMappingURL=baggage-impl.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataSymbol = void 0;\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexports.baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataFromString = exports.createBaggage = void 0;\nvar __1 = require(\"..\");\nvar baggage_impl_1 = require(\"./internal/baggage-impl\");\nvar symbol_1 = require(\"./internal/symbol\");\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new baggage_impl_1.BaggageImpl(new Map(Object.entries(entries)));\n}\nexports.createBaggage = createBaggage;\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        __1.diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: symbol_1.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\nexports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n//# sourceMappingURL=utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Exception.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Time.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopContextManager = void 0;\nvar context_1 = require(\"./context\");\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return context_1.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexports.NoopContextManager = NoopContextManager;\n//# sourceMappingURL=NoopContextManager.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ROOT_CONTEXT = exports.createContextKey = void 0;\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nexports.createContextKey = createContextKey;\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexports.ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagComponentLogger = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexports.DiagComponentLogger = DiagComponentLogger;\nfunction logProxy(funcName, namespace, args) {\n    var logger = global_utils_1.getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, args);\n}\n//# sourceMappingURL=ComponentLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagConsoleLogger = void 0;\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexports.DiagConsoleLogger = DiagConsoleLogger;\n//# sourceMappingURL=consoleLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./consoleLogger\"), exports);\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createLogLevelDiagLogger = void 0;\nvar types_1 = require(\"../types\");\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < types_1.DiagLogLevel.NONE) {\n        maxLevel = types_1.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > types_1.DiagLogLevel.ALL) {\n        maxLevel = types_1.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', types_1.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', types_1.DiagLogLevel.WARN),\n        info: _filterFunc('info', types_1.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', types_1.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', types_1.DiagLogLevel.VERBOSE),\n    };\n}\nexports.createLogLevelDiagLogger = createLogLevelDiagLogger;\n//# sourceMappingURL=logLevelLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagLogLevel = void 0;\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel = exports.DiagLogLevel || (exports.DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diag = exports.propagation = exports.trace = exports.context = exports.isValidSpanId = exports.isValidTraceId = exports.isSpanContextValid = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = exports.baggageEntryMetadataFromString = void 0;\n__exportStar(require(\"./baggage/types\"), exports);\nvar utils_1 = require(\"./baggage/utils\");\nObject.defineProperty(exports, \"baggageEntryMetadataFromString\", { enumerable: true, get: function () { return utils_1.baggageEntryMetadataFromString; } });\n__exportStar(require(\"./common/Exception\"), exports);\n__exportStar(require(\"./common/Time\"), exports);\n__exportStar(require(\"./diag\"), exports);\n__exportStar(require(\"./propagation/TextMapPropagator\"), exports);\n__exportStar(require(\"./trace/attributes\"), exports);\n__exportStar(require(\"./trace/link\"), exports);\n__exportStar(require(\"./trace/ProxyTracer\"), exports);\n__exportStar(require(\"./trace/ProxyTracerProvider\"), exports);\n__exportStar(require(\"./trace/Sampler\"), exports);\n__exportStar(require(\"./trace/SamplingResult\"), exports);\n__exportStar(require(\"./trace/span_context\"), exports);\n__exportStar(require(\"./trace/span_kind\"), exports);\n__exportStar(require(\"./trace/span\"), exports);\n__exportStar(require(\"./trace/SpanOptions\"), exports);\n__exportStar(require(\"./trace/status\"), exports);\n__exportStar(require(\"./trace/trace_flags\"), exports);\n__exportStar(require(\"./trace/trace_state\"), exports);\n__exportStar(require(\"./trace/tracer_provider\"), exports);\n__exportStar(require(\"./trace/tracer\"), exports);\nvar spancontext_utils_1 = require(\"./trace/spancontext-utils\");\nObject.defineProperty(exports, \"INVALID_SPANID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPANID; } });\nObject.defineProperty(exports, \"INVALID_TRACEID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_TRACEID; } });\nObject.defineProperty(exports, \"INVALID_SPAN_CONTEXT\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPAN_CONTEXT; } });\nObject.defineProperty(exports, \"isSpanContextValid\", { enumerable: true, get: function () { return spancontext_utils_1.isSpanContextValid; } });\nObject.defineProperty(exports, \"isValidTraceId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidTraceId; } });\nObject.defineProperty(exports, \"isValidSpanId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidSpanId; } });\n__exportStar(require(\"./context/context\"), exports);\n__exportStar(require(\"./context/types\"), exports);\nvar context_1 = require(\"./api/context\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nvar trace_1 = require(\"./api/trace\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nvar propagation_1 = require(\"./api/propagation\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nvar diag_1 = require(\"./api/diag\");\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexports.diag = diag_1.DiagAPI.instance();\nexports.default = {\n    trace: exports.trace,\n    context: exports.context,\n    propagation: exports.propagation,\n    diag: exports.diag,\n};\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unregisterGlobal = exports.getGlobal = exports.registerGlobal = void 0;\nvar platform_1 = require(\"../platform\");\nvar version_1 = require(\"../version\");\nvar semver_1 = require(\"./semver\");\nvar major = version_1.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = platform_1._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: version_1.VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== version_1.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + version_1.VERSION + \".\");\n    return true;\n}\nexports.registerGlobal = registerGlobal;\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !semver_1.isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexports.getGlobal = getGlobal;\nfunction unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + version_1.VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\nexports.unregisterGlobal = unregisterGlobal;\n//# sourceMappingURL=global-utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCompatible = exports._makeCompatibilityCheck = void 0;\nvar version_1 = require(\"../version\");\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(.*))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n    };\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n        };\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\nexports._makeCompatibilityCheck = _makeCompatibilityCheck;\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexports.isCompatible = _makeCompatibilityCheck(version_1.VERSION);\n//# sourceMappingURL=semver.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./node\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._globalThis = void 0;\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexports._globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./globalThis\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTextMapPropagator = void 0;\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexports.NoopTextMapPropagator = NoopTextMapPropagator;\n//# sourceMappingURL=NoopTextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;\nexports.defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexports.defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonRecordingSpan = void 0;\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = spancontext_utils_1.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexports.NonRecordingSpan = NonRecordingSpan;\n//# sourceMappingURL=NonRecordingSpan.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTracer = void 0;\nvar __1 = require(\"../\");\nvar context_utils_1 = require(\"../trace/context-utils\");\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan_1.NonRecordingSpan();\n        }\n        var parentFromContext = context && context_utils_1.getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            spancontext_utils_1.isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan_1.NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan_1.NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : __1.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = context_utils_1.setSpan(parentContext, span);\n        return __1.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexports.NoopTracer = NoopTracer;\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTracerProvider = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version) {\n        return new NoopTracer_1.NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexports.NoopTracerProvider = NoopTracerProvider;\n//# sourceMappingURL=NoopTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracer = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return new NoopTracer_1.NoopTracer();\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexports.ProxyTracer = ProxyTracer;\n//# sourceMappingURL=ProxyTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracerProvider = void 0;\nvar ProxyTracer_1 = require(\"./ProxyTracer\");\nvar NoopTracerProvider_1 = require(\"./NoopTracerProvider\");\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider_1.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexports.ProxyTracerProvider = ProxyTracerProvider;\n//# sourceMappingURL=ProxyTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Sampler.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SamplingDecision = void 0;\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SpanOptions.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=attributes.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSpanContext = exports.setSpanContext = exports.deleteSpan = exports.setSpan = exports.getSpan = void 0;\nvar context_1 = require(\"../context/context\");\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\n/**\n * span key\n */\nvar SPAN_KEY = context_1.createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\nexports.getSpan = getSpan;\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\nexports.setSpan = setSpan;\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\nexports.deleteSpan = deleteSpan;\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan_1.NonRecordingSpan(spanContext));\n}\nexports.setSpanContext = setSpanContext;\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\nexports.getSpanContext = getSpanContext;\n//# sourceMappingURL=context-utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span_context.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanKind = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapSpanContext = exports.isSpanContextValid = exports.isValidSpanId = exports.isValidTraceId = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\nvar trace_flags_1 = require(\"./trace_flags\");\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexports.INVALID_SPANID = '0000000000000000';\nexports.INVALID_TRACEID = '00000000000000000000000000000000';\nexports.INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACEID,\n    spanId: exports.INVALID_SPANID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== exports.INVALID_TRACEID;\n}\nexports.isValidTraceId = isValidTraceId;\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== exports.INVALID_SPANID;\n}\nexports.isValidSpanId = isValidSpanId;\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\nexports.isSpanContextValid = isSpanContextValid;\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n    return new NonRecordingSpan_1.NonRecordingSpan(spanContext);\n}\nexports.wrapSpanContext = wrapSpanContext;\n//# sourceMappingURL=spancontext-utils.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanStatusCode = void 0;\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode = exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceFlags = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace_state.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer_provider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '1.0.1';\n//# sourceMappingURL=version.js.map",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar api = require('@opentelemetry/api');\n\n// Copyright (c) Microsoft Corporation.\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(exports.SpanKind || (exports.SpanKind = {}));\n/**\n * Return the span if one exists\n *\n * @param context - context to get span from\n */\nfunction getSpan(context) {\n    return api.trace.getSpan(context);\n}\n/**\n * Set the span on a context\n *\n * @param context - context to use as parent\n * @param span - span to set active\n */\nfunction setSpan(context, span) {\n    return api.trace.setSpan(context, span);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context - context to set active span on\n * @param spanContext - span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return api.trace.setSpanContext(context, spanContext);\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context - context to get values from\n */\nfunction getSpanContext(context) {\n    return api.trace.getSpanContext(context);\n}\n/**\n * Returns true of the given {@link SpanContext} is valid.\n * A valid {@link SpanContext} is one which has a valid trace ID and span ID as per the spec.\n *\n * @param context - the {@link SpanContext} to validate.\n *\n * @returns true if the {@link SpanContext} is valid, false otherwise.\n */\nfunction isSpanContextValid(context) {\n    return api.trace.isSpanContextValid(context);\n}\nfunction getTracer(name, version) {\n    return api.trace.getTracer(name || \"azure/core-tracing\", version);\n}\n/** Entrypoint for context API */\nconst context = api.context;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n\n// Copyright (c) Microsoft Corporation.\nfunction isTracingDisabled() {\n    var _a;\n    if (typeof process === \"undefined\") {\n        // not supported in browser for now without polyfills\n        return false;\n    }\n    const azureTracingDisabledValue = (_a = process.env.AZURE_TRACING_DISABLED) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    if (azureTracingDisabledValue === \"false\" || azureTracingDisabledValue === \"0\") {\n        return false;\n    }\n    return Boolean(azureTracingDisabledValue);\n}\n/**\n * Creates a function that can be used to create spans using the global tracer.\n *\n * Usage:\n *\n * ```typescript\n * // once\n * const createSpan = createSpanFunction({ packagePrefix: \"Azure.Data.AppConfiguration\", namespace: \"Microsoft.AppConfiguration\" });\n *\n * // in each operation\n * const span = createSpan(\"deleteConfigurationSetting\", operationOptions);\n *    // code...\n * span.end();\n * ```\n *\n * @hidden\n * @param args - allows configuration of the prefix for each span as well as the az.namespace field.\n */\nfunction createSpanFunction(args) {\n    return function (operationName, operationOptions) {\n        const tracer = getTracer();\n        const tracingOptions = (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) || {};\n        const spanOptions = Object.assign({ kind: exports.SpanKind.INTERNAL }, tracingOptions.spanOptions);\n        const spanName = args.packagePrefix ? `${args.packagePrefix}.${operationName}` : operationName;\n        let span;\n        if (isTracingDisabled()) {\n            span = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n        }\n        else {\n            span = tracer.startSpan(spanName, spanOptions, tracingOptions.tracingContext);\n        }\n        if (args.namespace) {\n            span.setAttribute(\"az.namespace\", args.namespace);\n        }\n        let newSpanOptions = tracingOptions.spanOptions || {};\n        if (span.isRecording() && args.namespace) {\n            newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { attributes: Object.assign(Object.assign({}, spanOptions.attributes), { \"az.namespace\": args.namespace }) });\n        }\n        const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions, tracingContext: setSpan(tracingOptions.tracingContext || context.active(), span) });\n        const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });\n        return {\n            span,\n            updatedOptions: newOperationOptions\n        };\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst VERSION = \"00\";\n/**\n * Generates a `SpanContext` given a `traceparent` header value.\n * @param traceParent - Serialized span context data as a `traceparent` header value.\n * @returns The `SpanContext` generated from the `traceparent` value.\n */\nfunction extractSpanContextFromTraceParentHeader(traceParentHeader) {\n    const parts = traceParentHeader.split(\"-\");\n    if (parts.length !== 4) {\n        return;\n    }\n    const [version, traceId, spanId, traceOptions] = parts;\n    if (version !== VERSION) {\n        return;\n    }\n    const traceFlags = parseInt(traceOptions, 16);\n    const spanContext = {\n        spanId,\n        traceId,\n        traceFlags\n    };\n    return spanContext;\n}\n/**\n * Generates a `traceparent` value given a span context.\n * @param spanContext - Contains context for a specific span.\n * @returns The `spanContext` represented as a `traceparent` value.\n */\nfunction getTraceParentHeader(spanContext) {\n    const missingFields = [];\n    if (!spanContext.traceId) {\n        missingFields.push(\"traceId\");\n    }\n    if (!spanContext.spanId) {\n        missingFields.push(\"spanId\");\n    }\n    if (missingFields.length) {\n        return;\n    }\n    const flags = spanContext.traceFlags || 0 /* NONE */;\n    const hexFlags = flags.toString(16);\n    const traceFlags = hexFlags.length === 1 ? `0${hexFlags}` : hexFlags;\n    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n    return `${VERSION}-${spanContext.traceId}-${spanContext.spanId}-${traceFlags}`;\n}\n\nexports.context = context;\nexports.createSpanFunction = createSpanFunction;\nexports.extractSpanContextFromTraceParentHeader = extractSpanContextFromTraceParentHeader;\nexports.getSpan = getSpan;\nexports.getSpanContext = getSpanContext;\nexports.getTraceParentHeader = getTraceParentHeader;\nexports.getTracer = getTracer;\nexports.isSpanContextValid = isSpanContextValid;\nexports.setSpan = setSpan;\nexports.setSpanContext = setSpanContext;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nconst isNode = typeof process !== \"undefined\" && Boolean(process.version) && Boolean((_a = process.versions) === null || _a === void 0 ? void 0 : _a.node);\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @returns Promise that is resolved after timeInMs\n */\nfunction delay(timeInMs) {\n    return new Promise((resolve) => setTimeout(() => resolve(), timeInMs));\n}\n\nexports.delay = delay;\nexports.isNode = isNode;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar msalNode = require('@azure/msal-node');\nvar coreTracing = require('@azure/core-tracing');\nvar coreClient = require('@azure/core-client');\nvar coreUtil = require('@azure/core-util');\nvar coreRestPipeline = require('@azure/core-rest-pipeline');\nvar abortController = require('@azure/abort-controller');\nvar logger$k = require('@azure/logger');\nvar msalCommon = require('@azure/msal-common');\nvar uuid = require('uuid');\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar child_process = require('child_process');\nvar crypto = require('crypto');\nvar util = require('util');\nvar https = require('https');\nvar http = require('http');\nvar open = require('open');\nvar stoppable = require('stoppable');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar msalNode__namespace = /*#__PURE__*/_interopNamespace(msalNode);\nvar msalCommon__namespace = /*#__PURE__*/_interopNamespace(msalCommon);\nvar fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);\nvar os__default = /*#__PURE__*/_interopDefaultLegacy(os);\nvar path__default = /*#__PURE__*/_interopDefaultLegacy(path);\nvar child_process__default = /*#__PURE__*/_interopDefaultLegacy(child_process);\nvar child_process__namespace = /*#__PURE__*/_interopNamespace(child_process);\nvar https__default = /*#__PURE__*/_interopDefaultLegacy(https);\nvar http__default = /*#__PURE__*/_interopDefaultLegacy(http);\nvar open__default = /*#__PURE__*/_interopDefaultLegacy(open);\nvar stoppable__default = /*#__PURE__*/_interopDefaultLegacy(stoppable);\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n    return (errorResponse &&\n        typeof errorResponse.error === \"string\" &&\n        typeof errorResponse.error_description === \"string\");\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\nconst CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nclass CredentialUnavailableError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = CredentialUnavailableErrorName;\n    }\n}\n/**\n * The Error.name value of an AuthenticationError\n */\nconst AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nclass AuthenticationError extends Error {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    constructor(statusCode, errorBody) {\n        let errorResponse = {\n            error: \"unknown\",\n            errorDescription: \"An unknown error occurred and no additional details are available.\",\n        };\n        if (isErrorResponse(errorBody)) {\n            errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n        }\n        else if (typeof errorBody === \"string\") {\n            try {\n                // Most error responses will contain JSON-formatted error details\n                // in the response body\n                const oauthErrorResponse = JSON.parse(errorBody);\n                errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n            }\n            catch (e) {\n                if (statusCode === 400) {\n                    errorResponse = {\n                        error: \"authority_not_found\",\n                        errorDescription: \"The specified authority URL was not found.\",\n                    };\n                }\n                else {\n                    errorResponse = {\n                        error: \"unknown_error\",\n                        errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n                    };\n                }\n            }\n        }\n        else {\n            errorResponse = {\n                error: \"unknown_error\",\n                errorDescription: \"An unknown error occurred and no additional details are available.\",\n            };\n        }\n        super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n        this.statusCode = statusCode;\n        this.errorResponse = errorResponse;\n        // Ensure that this type reports the correct name\n        this.name = AuthenticationErrorName;\n    }\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nconst AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nclass AggregateAuthenticationError extends Error {\n    constructor(errors, errorMessage) {\n        const errorDetail = errors.join(\"\\n\");\n        super(`${errorMessage}\\n${errorDetail}`);\n        this.errors = errors;\n        // Ensure that this type reports the correct name\n        this.name = AggregateAuthenticationErrorName;\n    }\n}\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n    return {\n        error: errorBody.error,\n        errorDescription: errorBody.error_description,\n        correlationId: errorBody.correlation_id,\n        errorCodes: errorBody.error_codes,\n        timestamp: errorBody.timestamp,\n        traceId: errorBody.trace_id,\n    };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nclass AuthenticationRequiredError extends Error {\n    constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options) {\n        super(options.message);\n        this.scopes = options.scopes;\n        this.getTokenOptions = options.getTokenOptions;\n        this.name = \"AuthenticationRequiredError\";\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction getIdentityTokenEndpointSuffix(tenantId) {\n    if (tenantId === \"adfs\") {\n        return \"oauth2/token\";\n    }\n    else {\n        return \"oauth2/v2.0/token\";\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The default client ID for authentication\n * @internal\n */\n// TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n// Developer Sign On application is available\n// https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/Constants.cs#L9\nconst DeveloperSignOnClientId = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";\n/**\n * The default tenant for authentication\n * @internal\n */\nconst DefaultTenantId = \"common\";\n/**\n * A list of known Azure authority hosts\n */\nexports.AzureAuthorityHosts = void 0;\n(function (AzureAuthorityHosts) {\n    /**\n     * China-based Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzureChina\"] = \"https://login.chinacloudapi.cn\";\n    /**\n     * Germany-based Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzureGermany\"] = \"https://login.microsoftonline.de\";\n    /**\n     * US Government Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzureGovernment\"] = \"https://login.microsoftonline.us\";\n    /**\n     * Public Cloud Azure Authority Host\n     */\n    AzureAuthorityHosts[\"AzurePublicCloud\"] = \"https://login.microsoftonline.com\";\n})(exports.AzureAuthorityHosts || (exports.AzureAuthorityHosts = {}));\n/**\n * The default authority host.\n */\nconst DefaultAuthorityHost = exports.AzureAuthorityHosts.AzurePublicCloud;\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nconst createSpan = coreTracing.createSpanFunction({\n    packagePrefix: \"\",\n    namespace: \"Microsoft.AAD\",\n});\n/**\n * From: https://github.com/Azure/azure-sdk-for-js/blob/46139daa3317a0d12e8b55b02b9d9cdf1b2e762a/sdk/appconfiguration/app-configuration/src/internal/tracingHelpers.ts\n * Traces an operation and properly handles reporting start, end and errors for a given span\n *\n * @param operationName - Name of a method in the TClient type\n * @param options - An options class, typically derived from \\@azure/core-rest-pipeline/RequestOptionsBase\n * @param fn - The function to call with an options class that properly propagates the span context\n *\n * @internal\n */\nasync function trace(operationName, options, fn, createSpanFn = createSpan) {\n    const { updatedOptions, span } = createSpanFn(operationName, options);\n    try {\n        // NOTE: we really do need to await on this function here so we can handle any exceptions thrown and properly\n        // close the span.\n        const result = await fn(updatedOptions, span);\n        // otel 0.16+ needs this or else the code ends up being set as UNSET\n        span.setStatus({\n            code: coreTracing.SpanStatusCode.OK,\n        });\n        return result;\n    }\n    catch (err) {\n        span.setStatus({\n            code: coreTracing.SpanStatusCode.ERROR,\n            message: err.message,\n        });\n        throw err;\n    }\n    finally {\n        span.end();\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The AzureLogger used for all clients within the identity package\n */\nconst logger$j = logger$k.createClientLogger(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nfunction processEnvVars(supportedEnvVars) {\n    return supportedEnvVars.reduce((acc, envVariable) => {\n        if (process.env[envVariable]) {\n            acc.assigned.push(envVariable);\n        }\n        else {\n            acc.missing.push(envVariable);\n        }\n        return acc;\n    }, { missing: [], assigned: [] });\n}\n/**\n * Formatting the success event on the credentials\n */\nfunction formatSuccess(scope) {\n    return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\nfunction formatError(scope, error) {\n    let message = \"ERROR.\";\n    if (scope === null || scope === void 0 ? void 0 : scope.length) {\n        message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n    }\n    return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nfunction credentialLoggerInstance(title, parent, log = logger$j) {\n    const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n    function info(message) {\n        log.info(`${fullTitle} =>`, message);\n    }\n    function warning(message) {\n        log.warning(`${fullTitle} =>`, message);\n    }\n    return {\n        title,\n        fullTitle,\n        info,\n        warning,\n    };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nfunction credentialLogger(title, log = logger$j) {\n    const credLogger = credentialLoggerInstance(title, undefined, log);\n    return Object.assign(Object.assign({}, credLogger), { parent: log, getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log) });\n}\n\n// Copyright (c) Microsoft Corporation.\nconst noCorrelationId = \"noCorrelationId\";\n/**\n * @internal\n */\nfunction getIdentityClientAuthorityHost(options) {\n    // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.\n    let authorityHost = options === null || options === void 0 ? void 0 : options.authorityHost;\n    // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.\n    if (coreUtil.isNode) {\n        authorityHost = authorityHost !== null && authorityHost !== void 0 ? authorityHost : process.env.AZURE_AUTHORITY_HOST;\n    }\n    // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com\n    return authorityHost !== null && authorityHost !== void 0 ? authorityHost : DefaultAuthorityHost;\n}\n/**\n * The network module used by the Identity credentials.\n *\n * It allows for credentials to abort any pending request independently of the MSAL flow,\n * by calling to the `abortRequests()` method.\n *\n */\nclass IdentityClient extends coreClient.ServiceClient {\n    constructor(options) {\n        var _a;\n        const packageDetails = `azsdk-js-identity/2.0.4`;\n        const userAgentPrefix = ((_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix)\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const baseUri = getIdentityClientAuthorityHost(options);\n        if (!baseUri.startsWith(\"https:\")) {\n            throw new Error(\"The authorityHost address must use the 'https' protocol.\");\n        }\n        super(Object.assign(Object.assign({ requestContentType: \"application/json; charset=utf-8\", retryOptions: {\n                maxRetries: 3,\n            } }, options), { userAgentOptions: {\n                userAgentPrefix,\n            }, baseUri }));\n        this.authorityHost = baseUri;\n        this.abortControllers = new Map();\n    }\n    async sendTokenRequest(request, expiresOnParser) {\n        logger$j.info(`IdentityClient: sending token request to [${request.url}]`);\n        const response = await this.sendRequest(request);\n        expiresOnParser =\n            expiresOnParser ||\n                ((responseBody) => {\n                    return Date.now() + responseBody.expires_in * 1000;\n                });\n        if (response.bodyAsText && (response.status === 200 || response.status === 201)) {\n            const parsedBody = JSON.parse(response.bodyAsText);\n            if (!parsedBody.access_token) {\n                return null;\n            }\n            const token = {\n                accessToken: {\n                    token: parsedBody.access_token,\n                    expiresOnTimestamp: expiresOnParser(parsedBody),\n                },\n                refreshToken: parsedBody.refresh_token,\n            };\n            logger$j.info(`IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);\n            return token;\n        }\n        else {\n            const error = new AuthenticationError(response.status, response.bodyAsText);\n            logger$j.warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);\n            throw error;\n        }\n    }\n    async refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, expiresOnParser, options) {\n        if (refreshToken === undefined) {\n            return null;\n        }\n        logger$j.info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);\n        const { span, updatedOptions } = createSpan(\"IdentityClient-refreshAccessToken\", options);\n        const refreshParams = {\n            grant_type: \"refresh_token\",\n            client_id: clientId,\n            refresh_token: refreshToken,\n            scope: scopes,\n        };\n        if (clientSecret !== undefined) {\n            refreshParams.client_secret = clientSecret;\n        }\n        const query = new URLSearchParams(refreshParams);\n        try {\n            const urlSuffix = getIdentityTokenEndpointSuffix(tenantId);\n            const request = coreRestPipeline.createPipelineRequest({\n                url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,\n                method: \"POST\",\n                body: query.toString(),\n                abortSignal: options && options.abortSignal,\n                headers: coreRestPipeline.createHttpHeaders({\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                }),\n                tracingOptions: updatedOptions === null || updatedOptions === void 0 ? void 0 : updatedOptions.tracingOptions,\n            });\n            const response = await this.sendTokenRequest(request, expiresOnParser);\n            logger$j.info(`IdentityClient: refreshed token for client ID: ${clientId}`);\n            return response;\n        }\n        catch (err) {\n            if (err.name === AuthenticationErrorName &&\n                err.errorResponse.error === \"interaction_required\") {\n                // It's likely that the refresh token has expired, so\n                // return null so that the credential implementation will\n                // initiate the authentication flow again.\n                logger$j.info(`IdentityClient: interaction required for client ID: ${clientId}`);\n                span.setStatus({\n                    code: coreTracing.SpanStatusCode.ERROR,\n                    message: err.message,\n                });\n                return null;\n            }\n            else {\n                logger$j.warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);\n                span.setStatus({\n                    code: coreTracing.SpanStatusCode.ERROR,\n                    message: err.message,\n                });\n                throw err;\n            }\n        }\n        finally {\n            span.end();\n        }\n    }\n    // Here is a custom layer that allows us to abort requests that go through MSAL,\n    // since MSAL doesn't allow us to pass options all the way through.\n    generateAbortSignal(correlationId) {\n        const controller = new abortController.AbortController();\n        const controllers = this.abortControllers.get(correlationId) || [];\n        controllers.push(controller);\n        this.abortControllers.set(correlationId, controllers);\n        const existingOnAbort = controller.signal.onabort;\n        controller.signal.onabort = (...params) => {\n            this.abortControllers.set(correlationId, undefined);\n            if (existingOnAbort) {\n                existingOnAbort(...params);\n            }\n        };\n        return controller.signal;\n    }\n    abortRequests(correlationId) {\n        const key = correlationId || noCorrelationId;\n        const controllers = [\n            ...(this.abortControllers.get(key) || []),\n            // MSAL passes no correlation ID to the get requests...\n            ...(this.abortControllers.get(noCorrelationId) || []),\n        ];\n        if (!controllers.length) {\n            return;\n        }\n        for (const controller of controllers) {\n            controller.abort();\n        }\n        this.abortControllers.set(key, undefined);\n    }\n    getCorrelationId(options) {\n        var _a;\n        const parameter = (_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.split(\"&\").map((part) => part.split(\"=\")).find(([key]) => key === \"client-request-id\");\n        return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;\n    }\n    // The MSAL network module methods follow\n    async sendGetRequestAsync(url, options) {\n        const request = coreRestPipeline.createPipelineRequest({\n            url,\n            method: \"GET\",\n            body: options === null || options === void 0 ? void 0 : options.body,\n            headers: coreRestPipeline.createHttpHeaders(options === null || options === void 0 ? void 0 : options.headers),\n            abortSignal: this.generateAbortSignal(noCorrelationId),\n        });\n        const response = await this.sendRequest(request);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status,\n        };\n    }\n    async sendPostRequestAsync(url, options) {\n        const request = coreRestPipeline.createPipelineRequest({\n            url,\n            method: \"POST\",\n            body: options === null || options === void 0 ? void 0 : options.body,\n            headers: coreRestPipeline.createHttpHeaders(options === null || options === void 0 ? void 0 : options.headers),\n            // MSAL doesn't send the correlation ID on the get requests.\n            abortSignal: this.generateAbortSignal(this.getCorrelationId(options)),\n        });\n        const response = await this.sendRequest(request);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status,\n        };\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nfunction checkTenantId(logger, tenantId) {\n    if (!tenantId.match(/^[0-9a-zA-Z-.:/]+$/)) {\n        const error = new Error(\"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://docs.microsoft.com/partner-center/find-ids-and-domain-names.\");\n        logger.info(formatError(\"\", error));\n        throw error;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nfunction resolveTenantId(logger, tenantId, clientId) {\n    if (tenantId) {\n        checkTenantId(logger, tenantId);\n        return tenantId;\n    }\n    if (!clientId) {\n        clientId = DeveloperSignOnClientId;\n    }\n    if (clientId !== DeveloperSignOnClientId) {\n        return \"common\";\n    }\n    return \"organizations\";\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nfunction ensureValidMsalToken(scopes, logger, msalToken, getTokenOptions) {\n    const error = (message) => {\n        logger.getToken.info(message);\n        return new AuthenticationRequiredError({\n            scopes: Array.isArray(scopes) ? scopes : [scopes],\n            getTokenOptions,\n            message,\n        });\n    };\n    if (!msalToken) {\n        throw error(\"No response\");\n    }\n    if (!msalToken.expiresOn) {\n        throw error(`Response had no \"expiresOn\" property.`);\n    }\n    if (!msalToken.accessToken) {\n        throw error(`Response had no \"accessToken\" property.`);\n    }\n}\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nfunction getAuthority(tenantId, host) {\n    if (!host) {\n        host = DefaultAuthorityHost;\n    }\n    if (new RegExp(`${tenantId}/?$`).test(host)) {\n        return host;\n    }\n    if (host.endsWith(\"/\")) {\n        return host + tenantId;\n    }\n    else {\n        return `${host}/${tenantId}`;\n    }\n}\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nfunction getKnownAuthorities(tenantId, authorityHost) {\n    if (tenantId === \"adfs\" && authorityHost) {\n        return [authorityHost];\n    }\n    return [];\n}\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param logger - The logger of the credential.\n * @internal\n */\nconst defaultLoggerCallback = (logger, platform = coreUtil.isNode ? \"Node\" : \"Browser\") => (level, message, containsPii) => {\n    if (containsPii) {\n        return;\n    }\n    switch (level) {\n        case msalCommon__namespace.LogLevel.Error:\n            logger.info(`MSAL ${platform} V2 error: ${message}`);\n            return;\n        case msalCommon__namespace.LogLevel.Info:\n            logger.info(`MSAL ${platform} V2 info message: ${message}`);\n            return;\n        case msalCommon__namespace.LogLevel.Verbose:\n            logger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n            return;\n        case msalCommon__namespace.LogLevel.Warning:\n            logger.info(`MSAL ${platform} V2 warning: ${message}`);\n            return;\n    }\n};\n/**\n * The common utility functions for the MSAL clients.\n * Defined as a class so that the classes extending this one can have access to its methods and protected properties.\n *\n * It keeps track of a logger and an in-memory copy of the AuthenticationRecord.\n *\n * @internal\n */\nclass MsalBaseUtilities {\n    constructor(options) {\n        this.logger = options.logger;\n        this.account = options.authenticationRecord;\n    }\n    /**\n     * Generates a UUID\n     */\n    generateUuid() {\n        return uuid.v4();\n    }\n    /**\n     * Handles the MSAL authentication result.\n     * If the result has an account, we update the local account reference.\n     * If the token received is invalid, an error will be thrown depending on what's missing.\n     */\n    handleResult(scopes, clientId, result, getTokenOptions) {\n        if (result === null || result === void 0 ? void 0 : result.account) {\n            this.account = msalToPublic(clientId, result.account);\n        }\n        ensureValidMsalToken(scopes, this.logger, result, getTokenOptions);\n        this.logger.getToken.info(formatSuccess(scopes));\n        return {\n            token: result.accessToken,\n            expiresOnTimestamp: result.expiresOn.getTime(),\n        };\n    }\n    /**\n     * Handles MSAL errors.\n     */\n    handleError(scopes, error, getTokenOptions) {\n        if (error.name === \"AuthError\" ||\n            error.name === \"ClientAuthError\" ||\n            error.name === \"BrowserAuthError\") {\n            const msalError = error;\n            switch (msalError.errorCode) {\n                case \"endpoints_resolution_error\":\n                    this.logger.info(formatError(scopes, error.message));\n                    return new CredentialUnavailableError(error.message);\n                case \"device_code_polling_cancelled\":\n                    return new abortController.AbortError(\"The authentication has been aborted by the caller.\");\n                case \"consent_required\":\n                case \"interaction_required\":\n                case \"login_required\":\n                    this.logger.info(formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`));\n                    break;\n                default:\n                    this.logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n                    break;\n            }\n        }\n        if (error.name === \"ClientConfigurationError\" ||\n            error.name === \"BrowserConfigurationAuthError\" ||\n            error.name === \"AbortError\") {\n            return error;\n        }\n        return new AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n    }\n}\n// transformations.ts\nfunction publicToMsal(account) {\n    const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [];\n    return Object.assign(Object.assign({}, account), { localAccountId: account.homeAccountId, environment });\n}\nfunction msalToPublic(clientId, account) {\n    const record = {\n        authority: getAuthority(account.tenantId, account.environment),\n        homeAccountId: account.homeAccountId,\n        tenantId: account.tenantId || DefaultTenantId,\n        username: account.username,\n        clientId,\n        version: LatestAuthenticationRecordVersion,\n    };\n    return record;\n}\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nfunction serializeAuthenticationRecord(record) {\n    return JSON.stringify(record);\n}\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nfunction deserializeAuthenticationRecord(serializedRecord) {\n    const parsed = JSON.parse(serializedRecord);\n    if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n        throw Error(\"Unsupported AuthenticationRecord version\");\n    }\n    return parsed;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n */\nconst multiTenantDisabledErrorMessage = \"A getToken request was attempted with a tenant different than the tenant configured at the initialization of the credential, but multi-tenant authentication has been disabled by the environment variable AZURE_IDENTITY_DISABLE_MULTITENANTAUTH.\";\n/**\n * @internal\n */\nconst multiTenantADFSErrorMessage = \"A new tenant Id can't be assigned through the GetTokenOptions when a credential has been originally configured to use the tenant `adfs`.\";\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nfunction processMultiTenantRequest(tenantId, getTokenOptions) {\n    if (!(getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId)) {\n        return tenantId;\n    }\n    if (process.env.AZURE_IDENTITY_DISABLE_MULTITENANTAUTH) {\n        throw new Error(multiTenantDisabledErrorMessage);\n    }\n    if (tenantId === \"adfs\") {\n        throw new Error(multiTenantADFSErrorMessage);\n    }\n    return getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helps specify a regional authority, or \"AutoDiscoverRegion\" to auto-detect the region.\n */\nvar RegionalAuthority;\n(function (RegionalAuthority) {\n    /** Instructs MSAL to attempt to discover the region */\n    RegionalAuthority[\"AutoDiscoverRegion\"] = \"AutoDiscoverRegion\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus' region. */\n    RegionalAuthority[\"USWest\"] = \"westus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus2' region. */\n    RegionalAuthority[\"USWest2\"] = \"westus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralus' region. */\n    RegionalAuthority[\"USCentral\"] = \"centralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus' region. */\n    RegionalAuthority[\"USEast\"] = \"eastus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus2' region. */\n    RegionalAuthority[\"USEast2\"] = \"eastus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northcentralus' region. */\n    RegionalAuthority[\"USNorthCentral\"] = \"northcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southcentralus' region. */\n    RegionalAuthority[\"USSouthCentral\"] = \"southcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westcentralus' region. */\n    RegionalAuthority[\"USWestCentral\"] = \"westcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadacentral' region. */\n    RegionalAuthority[\"CanadaCentral\"] = \"canadacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadaeast' region. */\n    RegionalAuthority[\"CanadaEast\"] = \"canadaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'brazilsouth' region. */\n    RegionalAuthority[\"BrazilSouth\"] = \"brazilsouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northeurope' region. */\n    RegionalAuthority[\"EuropeNorth\"] = \"northeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westeurope' region. */\n    RegionalAuthority[\"EuropeWest\"] = \"westeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uksouth' region. */\n    RegionalAuthority[\"UKSouth\"] = \"uksouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'ukwest' region. */\n    RegionalAuthority[\"UKWest\"] = \"ukwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francecentral' region. */\n    RegionalAuthority[\"FranceCentral\"] = \"francecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francesouth' region. */\n    RegionalAuthority[\"FranceSouth\"] = \"francesouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandnorth' region. */\n    RegionalAuthority[\"SwitzerlandNorth\"] = \"switzerlandnorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandwest' region. */\n    RegionalAuthority[\"SwitzerlandWest\"] = \"switzerlandwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynorth' region. */\n    RegionalAuthority[\"GermanyNorth\"] = \"germanynorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanywestcentral' region. */\n    RegionalAuthority[\"GermanyWestCentral\"] = \"germanywestcentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwaywest' region. */\n    RegionalAuthority[\"NorwayWest\"] = \"norwaywest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwayeast' region. */\n    RegionalAuthority[\"NorwayEast\"] = \"norwayeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastasia' region. */\n    RegionalAuthority[\"AsiaEast\"] = \"eastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southeastasia' region. */\n    RegionalAuthority[\"AsiaSouthEast\"] = \"southeastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japaneast' region. */\n    RegionalAuthority[\"JapanEast\"] = \"japaneast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japanwest' region. */\n    RegionalAuthority[\"JapanWest\"] = \"japanwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiaeast' region. */\n    RegionalAuthority[\"AustraliaEast\"] = \"australiaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiasoutheast' region. */\n    RegionalAuthority[\"AustraliaSouthEast\"] = \"australiasoutheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral' region. */\n    RegionalAuthority[\"AustraliaCentral\"] = \"australiacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral2' region. */\n    RegionalAuthority[\"AustraliaCentral2\"] = \"australiacentral2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralindia' region. */\n    RegionalAuthority[\"IndiaCentral\"] = \"centralindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southindia' region. */\n    RegionalAuthority[\"IndiaSouth\"] = \"southindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westindia' region. */\n    RegionalAuthority[\"IndiaWest\"] = \"westindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreasouth' region. */\n    RegionalAuthority[\"KoreaSouth\"] = \"koreasouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreacentral' region. */\n    RegionalAuthority[\"KoreaCentral\"] = \"koreacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaecentral' region. */\n    RegionalAuthority[\"UAECentral\"] = \"uaecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaenorth' region. */\n    RegionalAuthority[\"UAENorth\"] = \"uaenorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricanorth' region. */\n    RegionalAuthority[\"SouthAfricaNorth\"] = \"southafricanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricawest' region. */\n    RegionalAuthority[\"SouthAfricaWest\"] = \"southafricawest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth' region. */\n    RegionalAuthority[\"ChinaNorth\"] = \"chinanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast' region. */\n    RegionalAuthority[\"ChinaEast\"] = \"chinaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth2' region. */\n    RegionalAuthority[\"ChinaNorth2\"] = \"chinanorth2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast2' region. */\n    RegionalAuthority[\"ChinaEast2\"] = \"chinaeast2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanycentral' region. */\n    RegionalAuthority[\"GermanyCentral\"] = \"germanycentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynortheast' region. */\n    RegionalAuthority[\"GermanyNorthEast\"] = \"germanynortheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovvirginia' region. */\n    RegionalAuthority[\"GovernmentUSVirginia\"] = \"usgovvirginia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgoviowa' region. */\n    RegionalAuthority[\"GovernmentUSIowa\"] = \"usgoviowa\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovarizona' region. */\n    RegionalAuthority[\"GovernmentUSArizona\"] = \"usgovarizona\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovtexas' region. */\n    RegionalAuthority[\"GovernmentUSTexas\"] = \"usgovtexas\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodeast' region. */\n    RegionalAuthority[\"GovernmentUSDodEast\"] = \"usdodeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodcentral' region. */\n    RegionalAuthority[\"GovernmentUSDodCentral\"] = \"usdodcentral\";\n})(RegionalAuthority || (RegionalAuthority = {}));\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The current persistence provider, undefined by default.\n * @internal\n */\nlet persistenceProvider = undefined;\n/**\n * An object that allows setting the persistence provider.\n * @internal\n */\nconst msalNodeFlowCacheControl = {\n    setPersistence(pluginProvider) {\n        persistenceProvider = pluginProvider;\n    },\n};\n/**\n * MSAL partial base client for Node.js.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nclass MsalNode extends MsalBaseUtilities {\n    constructor(options) {\n        var _a, _b, _c;\n        super(options);\n        this.requiresConfidential = false;\n        this.msalConfig = this.defaultNodeMsalConfig(options);\n        this.tenantId = resolveTenantId(options.logger, options.tenantId, options.clientId);\n        this.clientId = this.msalConfig.auth.clientId;\n        // If persistence has been configured\n        if (persistenceProvider !== undefined && ((_a = options.tokenCachePersistenceOptions) === null || _a === void 0 ? void 0 : _a.enabled)) {\n            this.createCachePlugin = () => persistenceProvider(options.tokenCachePersistenceOptions);\n        }\n        else if ((_b = options.tokenCachePersistenceOptions) === null || _b === void 0 ? void 0 : _b.enabled) {\n            throw new Error([\n                \"Persistent token caching was requested, but no persistence provider was configured.\",\n                \"You must install the identity-cache-persistence plugin package (`npm install --save @azure/identity-cache-persistence`)\",\n                \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                \"`useIdentityPlugin(cachePersistencePlugin)` before using `tokenCachePersistenceOptions`.\",\n            ].join(\" \"));\n        }\n        this.azureRegion = (_c = options.regionalAuthority) !== null && _c !== void 0 ? _c : process.env.AZURE_REGIONAL_AUTHORITY_NAME;\n        if (this.azureRegion === RegionalAuthority.AutoDiscoverRegion) {\n            this.azureRegion = \"AUTO_DISCOVER\";\n        }\n    }\n    /**\n     * Generates a MSAL configuration that generally works for Node.js\n     */\n    defaultNodeMsalConfig(options) {\n        const clientId = options.clientId || DeveloperSignOnClientId;\n        const tenantId = resolveTenantId(options.logger, options.tenantId, options.clientId);\n        this.authorityHost = options.authorityHost || process.env.AZURE_AUTHORITY_HOST;\n        const authority = getAuthority(tenantId, this.authorityHost);\n        this.identityClient = new IdentityClient(Object.assign(Object.assign({}, options.tokenCredentialOptions), { authorityHost: authority }));\n        let clientCapabilities = [\"cp1\"];\n        if (process.env.AZURE_IDENTITY_DISABLE_CP1) {\n            clientCapabilities = [];\n        }\n        return {\n            auth: {\n                clientId,\n                authority,\n                knownAuthorities: getKnownAuthorities(tenantId, authority),\n                clientCapabilities,\n            },\n            // Cache is defined in this.prepare();\n            system: {\n                networkClient: this.identityClient,\n                loggerOptions: {\n                    loggerCallback: defaultLoggerCallback(options.logger),\n                },\n            },\n        };\n    }\n    /**\n     * Prepares the MSAL applications.\n     */\n    async init(options) {\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", () => {\n                // This will abort any pending request in the IdentityClient,\n                // based on the received or generated correlationId\n                this.identityClient.abortRequests(options.correlationId);\n            });\n        }\n        if (this.publicApp || this.confidentialApp) {\n            return;\n        }\n        if (this.createCachePlugin !== undefined) {\n            this.msalConfig.cache = {\n                cachePlugin: await this.createCachePlugin(),\n            };\n        }\n        this.publicApp = new msalNode__namespace.PublicClientApplication(this.msalConfig);\n        // The confidential client requires either a secret, assertion or certificate.\n        if (this.msalConfig.auth.clientSecret ||\n            this.msalConfig.auth.clientAssertion ||\n            this.msalConfig.auth.clientCertificate) {\n            this.confidentialApp = new msalNode__namespace.ConfidentialClientApplication(this.msalConfig);\n        }\n        else {\n            if (this.requiresConfidential) {\n                throw new Error(\"Unable to generate the MSAL confidential client. Missing either the client's secret, certificate or assertion.\");\n            }\n        }\n    }\n    /**\n     * Allows the cancellation of a MSAL request.\n     */\n    withCancellation(promise, abortSignal, onCancel) {\n        return new Promise((resolve, reject) => {\n            promise\n                .then((msalToken) => {\n                return resolve(msalToken);\n            })\n                .catch(reject);\n            if (abortSignal) {\n                abortSignal.addEventListener(\"abort\", () => {\n                    onCancel === null || onCancel === void 0 ? void 0 : onCancel();\n                });\n            }\n        });\n    }\n    /**\n     * Returns the existing account, attempts to load the account from MSAL.\n     */\n    async getActiveAccount() {\n        var _a, _b, _c;\n        if (this.account) {\n            return this.account;\n        }\n        const cache = (_b = (_a = this.confidentialApp) === null || _a === void 0 ? void 0 : _a.getTokenCache()) !== null && _b !== void 0 ? _b : (_c = this.publicApp) === null || _c === void 0 ? void 0 : _c.getTokenCache();\n        const accountsByTenant = await (cache === null || cache === void 0 ? void 0 : cache.getAllAccounts());\n        if (!accountsByTenant) {\n            return;\n        }\n        if (accountsByTenant.length === 1) {\n            this.account = msalToPublic(this.clientId, accountsByTenant[0]);\n        }\n        else {\n            this.logger\n                .info(`More than one account was found authenticated for this Client ID and Tenant ID.\nHowever, no \"authenticationRecord\" has been provided for this credential,\ntherefore we're unable to pick between these accounts.\nA new login attempt will be requested, to ensure the correct account is picked.\nTo work with multiple accounts for the same Client ID and Tenant ID, please provide an \"authenticationRecord\" when initializing a credential to prevent this from happening.`);\n            return;\n        }\n        return this.account;\n    }\n    /**\n     * Attempts to retrieve a token from cache.\n     */\n    async getTokenSilent(scopes, options) {\n        var _a, _b;\n        await this.getActiveAccount();\n        if (!this.account) {\n            throw new AuthenticationRequiredError({\n                scopes,\n                getTokenOptions: options,\n                message: \"Silent authentication failed. We couldn't retrieve an active account from the cache.\",\n            });\n        }\n        const silentRequest = {\n            // To be able to re-use the account, the Token Cache must also have been provided.\n            account: publicToMsal(this.account),\n            correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n            scopes,\n            authority: options === null || options === void 0 ? void 0 : options.authority,\n            claims: options === null || options === void 0 ? void 0 : options.claims,\n        };\n        try {\n            this.logger.info(\"Attempting to acquire token silently\");\n            const response = (_b = (await ((_a = this.confidentialApp) === null || _a === void 0 ? void 0 : _a.acquireTokenSilent(silentRequest)))) !== null && _b !== void 0 ? _b : (await this.publicApp.acquireTokenSilent(silentRequest));\n            return this.handleResult(scopes, this.clientId, response || undefined);\n        }\n        catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n    /**\n     * Wrapper around each MSAL flow get token operation: doGetToken.\n     * If disableAutomaticAuthentication is sent through the constructor, it will prevent MSAL from requesting the user input.\n     */\n    async getToken(scopes, options = {}) {\n        const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n        options.authority = getAuthority(tenantId, this.authorityHost);\n        options.correlationId = (options === null || options === void 0 ? void 0 : options.correlationId) || this.generateUuid();\n        await this.init(options);\n        try {\n            return await this.getTokenSilent(scopes, options);\n        }\n        catch (err) {\n            if (err.name !== \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n                throw new AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\",\n                });\n            }\n            this.logger.info(`Silent authentication failed, falling back to interactive method.`);\n            return this.doGetToken(scopes, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst CommonTenantId = \"common\";\nconst AzureAccountClientId = \"aebc6443-996d-45c2-90f0-388ff96faa56\"; // VSC: 'aebc6443-996d-45c2-90f0-388ff96faa56'\nconst logger$i = credentialLogger(\"VisualStudioCodeCredential\");\nlet findCredentials = undefined;\nconst vsCodeCredentialControl = {\n    setVsCodeCredentialFinder(finder) {\n        findCredentials = finder;\n    },\n};\n// Map of unsupported Tenant IDs and the errors we will be throwing.\nconst unsupportedTenantIds = {\n    adfs: \"The VisualStudioCodeCredential does not support authentication with ADFS tenants.\",\n};\nfunction checkUnsupportedTenant(tenantId) {\n    // If the Tenant ID isn't supported, we throw.\n    const unsupportedTenantError = unsupportedTenantIds[tenantId];\n    if (unsupportedTenantError) {\n        throw new CredentialUnavailableError(unsupportedTenantError);\n    }\n}\nconst mapVSCodeAuthorityHosts = {\n    AzureCloud: exports.AzureAuthorityHosts.AzurePublicCloud,\n    AzureChina: exports.AzureAuthorityHosts.AzureChina,\n    AzureGermanCloud: exports.AzureAuthorityHosts.AzureGermany,\n    AzureUSGovernment: exports.AzureAuthorityHosts.AzureGovernment,\n};\n/**\n * Attempts to load a specific property from the VSCode configurations of the current OS.\n * If it fails at any point, returns undefined.\n */\nfunction getPropertyFromVSCode(property) {\n    const settingsPath = [\"User\", \"settings.json\"];\n    // Eventually we can add more folders for more versions of VSCode.\n    const vsCodeFolder = \"Code\";\n    const homedir = os__default[\"default\"].homedir();\n    function loadProperty(...pathSegments) {\n        const fullPath = path__default[\"default\"].join(...pathSegments, vsCodeFolder, ...settingsPath);\n        const settings = JSON.parse(fs__default[\"default\"].readFileSync(fullPath, { encoding: \"utf8\" }));\n        return settings[property];\n    }\n    try {\n        let appData;\n        switch (process.platform) {\n            case \"win32\":\n                appData = process.env.APPDATA;\n                return appData ? loadProperty(appData) : undefined;\n            case \"darwin\":\n                return loadProperty(homedir, \"Library\", \"Application Support\");\n            case \"linux\":\n                return loadProperty(homedir, \".config\");\n            default:\n                return;\n        }\n    }\n    catch (e) {\n        logger$i.info(`Failed to load the Visual Studio Code configuration file. Error: ${e.message}`);\n        return;\n    }\n}\n/**\n * Connects to Azure using the credential provided by the VSCode extension 'Azure Account'.\n * Once the user has logged in via the extension, this credential can share the same refresh token\n * that is cached by the extension.\n */\nclass VisualStudioCodeCredential {\n    /**\n     * Creates an instance of VisualStudioCodeCredential to use for automatically authenticating via VSCode.\n     *\n     * **Note**: `VisualStudioCodeCredential` is provided by a plugin package:\n     * `@azure/identity-vscode`. If this package is not installed and registered\n     * using the plugin API (`useIdentityPlugin`), then authentication using\n     * `VisualStudioCodeCredential` will not be available.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        // We want to make sure we use the one assigned by the user on the VSCode settings.\n        // Or just `AzureCloud` by default.\n        this.cloudName = (getPropertyFromVSCode(\"azure.cloud\") || \"AzureCloud\");\n        // Picking an authority host based on the cloud name.\n        const authorityHost = mapVSCodeAuthorityHosts[this.cloudName];\n        this.identityClient = new IdentityClient(Object.assign({ authorityHost }, options));\n        if (options && options.tenantId) {\n            checkTenantId(logger$i, options.tenantId);\n            this.tenantId = options.tenantId;\n        }\n        else {\n            this.tenantId = CommonTenantId;\n        }\n        checkUnsupportedTenant(this.tenantId);\n    }\n    /**\n     * Runs preparations for any further getToken request.\n     */\n    async prepare() {\n        // Attempts to load the tenant from the VSCode configuration file.\n        const settingsTenant = getPropertyFromVSCode(\"azure.tenant\");\n        if (settingsTenant) {\n            this.tenantId = settingsTenant;\n        }\n        checkUnsupportedTenant(this.tenantId);\n    }\n    /**\n     * Runs preparations for any further getToken, but only once.\n     */\n    prepareOnce() {\n        if (!this.preparePromise) {\n            this.preparePromise = this.prepare();\n        }\n        return this.preparePromise;\n    }\n    /**\n     * Returns the token found by searching VSCode's authentication cache or\n     * returns null if no token could be found.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */\n    async getToken(scopes, options) {\n        var _a, _b;\n        await this.prepareOnce();\n        const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n        if (findCredentials === undefined) {\n            throw new CredentialUnavailableError([\n                \"No implementation of `VisualStudioCodeCredential` is available.\",\n                \"You must install the identity-vscode plugin package (`npm install --save-dev @azure/identity-vscode`)\",\n                \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                \"`useIdentityPlugin(vsCodePlugin)` before creating a `VisualStudioCodeCredential`.\",\n            ].join(\" \"));\n        }\n        let scopeString = typeof scopes === \"string\" ? scopes : scopes.join(\" \");\n        // Check to make sure the scope we get back is a valid scope\n        if (!scopeString.match(/^[0-9a-zA-Z-.:/]+$/)) {\n            const error = new Error(\"Invalid scope was specified by the user or calling client\");\n            logger$i.getToken.info(formatError(scopes, error));\n            throw error;\n        }\n        if (scopeString.indexOf(\"offline_access\") < 0) {\n            scopeString += \" offline_access\";\n        }\n        // findCredentials returns an array similar to:\n        // [\n        //   {\n        //     account: \"\",\n        //     password: \"\",\n        //   },\n        //   /* ... */\n        // ]\n        const credentials = await findCredentials();\n        // If we can't find the credential based on the name, we'll pick the first one available.\n        const { password: refreshToken } = (_b = (_a = credentials.find(({ account }) => account === this.cloudName)) !== null && _a !== void 0 ? _a : credentials[0]) !== null && _b !== void 0 ? _b : {};\n        if (refreshToken) {\n            const tokenResponse = await this.identityClient.refreshAccessToken(tenantId, AzureAccountClientId, scopeString, refreshToken, undefined);\n            if (tokenResponse) {\n                logger$i.getToken.info(formatSuccess(scopes));\n                return tokenResponse.accessToken;\n            }\n            else {\n                const error = new CredentialUnavailableError(\"Could not retrieve the token associated with Visual Studio Code. Have you connected using the 'Azure Account' extension recently? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.\");\n                logger$i.getToken.info(formatError(scopes, error));\n                throw error;\n            }\n        }\n        else {\n            const error = new CredentialUnavailableError(\"Could not retrieve the token associated with Visual Studio Code. Did you connect using the 'Azure Account' extension? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.\");\n            logger$i.getToken.info(formatError(scopes, error));\n            throw error;\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The context passed to an Identity plugin. This contains objects that\n * plugins can use to set backend implementations.\n * @internal\n */\nconst pluginContext = {\n    cachePluginControl: msalNodeFlowCacheControl,\n    vsCodeCredentialControl: vsCodeCredentialControl,\n};\n/**\n * Extend Azure Identity with additional functionality. Pass a plugin from\n * a plugin package, such as:\n *\n * - `@azure/identity-cache-persistence`: provides persistent token caching\n * - `@azure/identity-vscode`: provides the dependencies of\n *   `VisualStudioCodeCredential` and enables it\n *\n * Example:\n *\n * ```javascript\n * import { cachePersistencePlugin } from \"@azure/identity-cache-persistence\";\n *\n * import { useIdentityPlugin, DefaultAzureCredential } from \"@azure/identity\";\n * useIdentityPlugin(cachePersistencePlugin);\n *\n * // The plugin has the capability to extend `DefaultAzureCredential` and to\n * // add middleware to the underlying credentials, such as persistence.\n * const credential = new DefaultAzureCredential({\n *   tokenCachePersistenceOptions: {\n *     enabled: true\n *   }\n * });\n * ```\n *\n * @param plugin - the plugin to register\n */\nfunction useIdentityPlugin(plugin) {\n    plugin(pluginContext);\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * @internal\n */\nconst logger$h = credentialLogger(\"ChainedTokenCredential\");\n/**\n * Enables multiple `TokenCredential` implementations to be tried in order\n * until one of the getToken methods returns an access token.\n */\nclass ChainedTokenCredential {\n    /**\n     * Creates an instance of ChainedTokenCredential using the given credentials.\n     *\n     * @param sources - `TokenCredential` implementations to be tried in order.\n     *\n     * Example usage:\n     * ```javascript\n     * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n     * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\n     * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n     * ```\n     */\n    constructor(...sources) {\n        /**\n         * The message to use when the chained token fails to get a token\n         */\n        this.UnavailableMessage = \"ChainedTokenCredential => failed to retrieve a token from the included credentials\";\n        this._sources = [];\n        this._sources = sources;\n    }\n    /**\n     * Returns the first access token returned by one of the chained\n     * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}\n     * when one or more credentials throws an {@link AuthenticationError} and\n     * no credentials have returned an access token.\n     *\n     * This method is called automatically by Azure SDK client libraries. You may call this method\n     * directly, but you must also handle token caching and token refreshing.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */\n    async getToken(scopes, options) {\n        let token = null;\n        let successfulCredentialName = \"\";\n        const errors = [];\n        const { span, updatedOptions } = createSpan(\"ChainedTokenCredential.getToken\", options);\n        for (let i = 0; i < this._sources.length && token === null; i++) {\n            try {\n                token = await this._sources[i].getToken(scopes, updatedOptions);\n                successfulCredentialName = this._sources[i].constructor.name;\n            }\n            catch (err) {\n                if (err.name === \"CredentialUnavailableError\" ||\n                    err.name === \"AuthenticationRequiredError\") {\n                    errors.push(err);\n                }\n                else {\n                    logger$h.getToken.info(formatError(scopes, err));\n                    throw err;\n                }\n            }\n        }\n        if (!token && errors.length > 0) {\n            const err = new AggregateAuthenticationError(errors, \"ChainedTokenCredential authentication failed.\");\n            span.setStatus({\n                code: coreTracing.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            logger$h.getToken.info(formatError(scopes, err));\n            throw err;\n        }\n        span.end();\n        logger$h.getToken.info(`Result for ${successfulCredentialName}: ${formatSuccess(scopes)}`);\n        if (token === null) {\n            throw new CredentialUnavailableError(\"Failed to retrieve a valid token\");\n        }\n        return token;\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nfunction ensureValidScope(scope, logger) {\n    if (!scope.match(/^[0-9a-zA-Z-.:/]+$/)) {\n        const error = new Error(\"Invalid scope was specified by the user or calling client\");\n        logger.getToken.info(formatError(scope, error));\n        throw error;\n    }\n}\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nfunction getScopeResource(scope) {\n    return scope.replace(/\\/.default$/, \"\");\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Mockable reference to the CLI credential cliCredentialFunctions\n * @internal\n */\nconst cliCredentialInternals = {\n    /**\n     * @internal\n     */\n    getSafeWorkingDir() {\n        if (process.platform === \"win32\") {\n            if (!process.env.SystemRoot) {\n                throw new Error(\"Azure CLI credential expects a 'SystemRoot' environment variable\");\n            }\n            return process.env.SystemRoot;\n        }\n        else {\n            return \"/bin\";\n        }\n    },\n    /**\n     * Gets the access token from Azure CLI\n     * @param resource - The resource to use when getting the token\n     * @internal\n     */\n    async getAzureCliAccessToken(resource, tenantId) {\n        let tenantSection = [];\n        if (tenantId) {\n            tenantSection = [\"--tenant\", tenantId];\n        }\n        return new Promise((resolve, reject) => {\n            try {\n                child_process__default[\"default\"].execFile(\"az\", [\n                    \"account\",\n                    \"get-access-token\",\n                    \"--output\",\n                    \"json\",\n                    \"--resource\",\n                    resource,\n                    ...tenantSection,\n                ], { cwd: cliCredentialInternals.getSafeWorkingDir(), shell: true }, (error, stdout, stderr) => {\n                    resolve({ stdout: stdout, stderr: stderr, error });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    },\n};\nconst logger$g = credentialLogger(\"AzureCliCredential\");\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure CLI ('az') commandline tool.\n * To do so, it will read the user access token and expire time\n * with Azure CLI command \"az account get-access-token\".\n */\nclass AzureCliCredential {\n    /**\n     * Creates an instance of the {@link AzureCliCredential}.\n     *\n     * To use this credential, ensure that you have already logged\n     * in via the 'az' tool using the command \"az login\" from the commandline.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */\n    constructor(options) {\n        this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        const tenantId = processMultiTenantRequest(this.tenantId, options);\n        if (tenantId) {\n            checkTenantId(logger$g, tenantId);\n        }\n        const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n        logger$g.getToken.info(`Using the scope ${scope}`);\n        ensureValidScope(scope, logger$g);\n        const resource = getScopeResource(scope);\n        let responseData = \"\";\n        const { span } = createSpan(`${this.constructor.name}.getToken`, options);\n        try {\n            const obj = await cliCredentialInternals.getAzureCliAccessToken(resource, tenantId);\n            if (obj.stderr) {\n                const isLoginError = obj.stderr.match(\"(.*)az login(.*)\");\n                const isNotInstallError = obj.stderr.match(\"az:(.*)not found\") || obj.stderr.startsWith(\"'az' is not recognized\");\n                if (isNotInstallError) {\n                    const error = new CredentialUnavailableError(\"Azure CLI could not be found.  Please visit https://aka.ms/azure-cli for installation instructions and then, once installed, authenticate to your Azure account using 'az login'.\");\n                    logger$g.getToken.info(formatError(scopes, error));\n                    throw error;\n                }\n                else if (isLoginError) {\n                    const error = new CredentialUnavailableError(\"Please run 'az login' from a command prompt to authenticate before using this credential.\");\n                    logger$g.getToken.info(formatError(scopes, error));\n                    throw error;\n                }\n                const error = new CredentialUnavailableError(obj.stderr);\n                logger$g.getToken.info(formatError(scopes, error));\n                throw error;\n            }\n            else {\n                responseData = obj.stdout;\n                const response = JSON.parse(responseData);\n                logger$g.getToken.info(formatSuccess(scopes));\n                const returnValue = {\n                    token: response.accessToken,\n                    expiresOnTimestamp: new Date(response.expiresOn).getTime(),\n                };\n                return returnValue;\n            }\n        }\n        catch (err) {\n            const error = new Error(err.message || \"Unknown error while trying to retrieve the access token\");\n            span.setStatus({\n                code: coreTracing.SpanStatusCode.ERROR,\n                message: error.message,\n            });\n            logger$g.getToken.info(formatError(scopes, error));\n            throw error;\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Easy to mock childProcess utils.\n * @internal\n */\nconst processUtils = {\n    /**\n     * Promisifying childProcess.execFile\n     * @internal\n     */\n    execFile(file, params, options) {\n        return new Promise((resolve, reject) => {\n            child_process__namespace.execFile(file, params, options, (error, stdout, stderr) => {\n                if (Buffer.isBuffer(stdout)) {\n                    stdout = stdout.toString(\"utf8\");\n                }\n                if (Buffer.isBuffer(stderr)) {\n                    stderr = stderr.toString(\"utf8\");\n                }\n                if (stderr || error) {\n                    reject(stderr ? new Error(stderr) : error);\n                }\n                else {\n                    resolve(stdout);\n                }\n            });\n        });\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst logger$f = credentialLogger(\"AzurePowerShellCredential\");\nconst isWindows = process.platform === \"win32\";\n/**\n * Returns a platform-appropriate command name by appending \".exe\" on Windows.\n *\n * @internal\n */\nfunction formatCommand(commandName) {\n    if (isWindows) {\n        return `${commandName}.exe`;\n    }\n    else {\n        return commandName;\n    }\n}\n/**\n * Receives a list of commands to run, executes them, then returns the outputs.\n * If anything fails, an error is thrown.\n * @internal\n */\nasync function runCommands(commands) {\n    const results = [];\n    for (const command of commands) {\n        const [file, ...parameters] = command;\n        const result = (await processUtils.execFile(file, parameters, { encoding: \"utf8\" }));\n        results.push(result);\n    }\n    return results;\n}\n/**\n * Known PowerShell errors\n * @internal\n */\nconst powerShellErrors = {\n    login: \"Run Connect-AzAccount to login\",\n    installed: \"The specified module 'Az.Accounts' with version '2.2.0' was not loaded because no valid module file was found in any module directory\",\n};\n/**\n * Messages to use when throwing in this credential.\n * @internal\n */\nconst powerShellPublicErrorMessages = {\n    login: \"Please run 'Connect-AzAccount' from PowerShell to authenticate before using this credential.\",\n    installed: `The 'Az.Account' module >= 2.2.0 is not installed. Install the Azure Az PowerShell module with: \"Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force\".`,\n    troubleshoot: `To troubleshoot, visit https://aka.ms/azsdk/js/identity/powershellcredential/troubleshoot.`,\n};\n// PowerShell Azure User not logged in error check.\nconst isLoginError = (err) => err.message.match(`(.*)${powerShellErrors.login}(.*)`);\n// Az Module not Installed in Azure PowerShell check.\nconst isNotInstalledError = (err) => err.message.match(powerShellErrors.installed);\n/**\n * The PowerShell commands to be tried, in order.\n *\n * @internal\n */\nconst commandStack = [formatCommand(\"pwsh\")];\nif (isWindows) {\n    commandStack.push(formatCommand(\"powershell\"));\n}\n/**\n * This credential will use the currently logged-in user information from the\n * Azure PowerShell module. To do so, it will read the user access token and\n * expire time with Azure PowerShell command `Get-AzAccessToken -ResourceUrl {ResourceScope}`\n */\nclass AzurePowerShellCredential {\n    /**\n     * Creates an instance of the {@link AzurePowerShellCredential}.\n     *\n     * To use this credential:\n     * - Install the Azure Az PowerShell module with:\n     *   `Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force`.\n     * - You have already logged in to Azure PowerShell using the command\n     * `Connect-AzAccount` from the command line.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */\n    constructor(options) {\n        this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n    }\n    /**\n     * Gets the access token from Azure PowerShell\n     * @param resource - The resource to use when getting the token\n     */\n    async getAzurePowerShellAccessToken(resource, tenantId) {\n        // Clone the stack to avoid mutating it while iterating\n        for (const powerShellCommand of [...commandStack]) {\n            try {\n                await runCommands([[powerShellCommand, \"/?\"]]);\n            }\n            catch (e) {\n                // Remove this credential from the original stack so that we don't try it again.\n                commandStack.shift();\n                continue;\n            }\n            let tenantSection = \"\";\n            if (tenantId) {\n                tenantSection = `-TenantId \"${tenantId}\"`;\n            }\n            const results = await runCommands([\n                [\n                    powerShellCommand,\n                    \"-Command\",\n                    \"Import-Module Az.Accounts -MinimumVersion 2.2.0 -PassThru\",\n                ],\n                [\n                    powerShellCommand,\n                    \"-Command\",\n                    `Get-AzAccessToken ${tenantSection} -ResourceUrl \"${resource}\" | ConvertTo-Json`,\n                ],\n            ]);\n            const result = results[1];\n            try {\n                return JSON.parse(result);\n            }\n            catch (e) {\n                throw new Error(`Unable to parse the output of PowerShell. Received output: ${result}`);\n            }\n        }\n        throw new Error(`Unable to execute PowerShell. Ensure that it is installed in your system`);\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If the authentication cannot be performed through PowerShell, a {@link CredentialUnavailableError} will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async () => {\n            const tenantId = processMultiTenantRequest(this.tenantId, options);\n            if (tenantId) {\n                checkTenantId(logger$f, tenantId);\n            }\n            const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n            ensureValidScope(scope, logger$f);\n            logger$f.getToken.info(`Using the scope ${scope}`);\n            const resource = getScopeResource(scope);\n            try {\n                const response = await this.getAzurePowerShellAccessToken(resource, tenantId);\n                logger$f.getToken.info(formatSuccess(scopes));\n                return {\n                    token: response.Token,\n                    expiresOnTimestamp: new Date(response.ExpiresOn).getTime(),\n                };\n            }\n            catch (err) {\n                if (isNotInstalledError(err)) {\n                    const error = new CredentialUnavailableError(powerShellPublicErrorMessages.installed);\n                    logger$f.getToken.info(formatError(scope, error));\n                    throw error;\n                }\n                else if (isLoginError(err)) {\n                    const error = new CredentialUnavailableError(powerShellPublicErrorMessages.login);\n                    logger$f.getToken.info(formatError(scope, error));\n                    throw error;\n                }\n                const error = new CredentialUnavailableError(`${err}. ${powerShellPublicErrorMessages.troubleshoot}`);\n                logger$f.getToken.info(formatError(scope, error));\n                throw error;\n            }\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * MSAL client secret client. Calls to MSAL's confidential application's `acquireTokenByClientCredential` during `doGetToken`.\n * @internal\n */\nclass MsalClientSecret extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.requiresConfidential = true;\n        this.msalConfig.auth.clientSecret = options.clientSecret;\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const result = await this.confidentialApp.acquireTokenByClientCredential({\n                scopes,\n                correlationId: options.correlationId,\n                azureRegion: this.azureRegion,\n                authority: options.authority,\n                claims: options.claims,\n            });\n            // The Client Credential flow does not return an account,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        }\n        catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger$e = credentialLogger(\"ClientSecretCredential\");\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration. More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nclass ClientSecretCredential {\n    /**\n     * Creates an instance of the ClientSecretCredential with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * secret.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param clientSecret - A client secret that was generated for the App Registration.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, clientSecret, options = {}) {\n        if (!tenantId || !clientId || !clientSecret) {\n            throw new Error(\"ClientSecretCredential: tenantId, clientId, and clientSecret are required parameters. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.\");\n        }\n        this.msalFlow = new MsalClientSecret(Object.assign(Object.assign({}, options), { logger: logger$e,\n            clientId,\n            tenantId,\n            clientSecret, tokenCredentialOptions: options }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst readFileAsync$2 = util.promisify(fs.readFile);\n/**\n * Tries to asynchronously load a certificate from the given path.\n *\n * @param configuration - Either the PEM value or the path to the certificate.\n * @param sendCertificateChain - Option to include x5c header for SubjectName and Issuer name authorization.\n * @returns - The certificate parts, or `undefined` if the certificate could not be loaded.\n * @internal\n */\nasync function parseCertificate(configuration, sendCertificateChain) {\n    const certificateParts = {};\n    certificateParts.certificateContents =\n        configuration.certificate || (await readFileAsync$2(configuration.certificatePath, \"utf8\"));\n    if (sendCertificateChain) {\n        certificateParts.x5c = certificateParts.certificateContents;\n    }\n    const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9+/\\n\\r]+=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/g;\n    const publicKeys = [];\n    // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c\n    let match;\n    do {\n        match = certificatePattern.exec(certificateParts.certificateContents);\n        if (match) {\n            publicKeys.push(match[3]);\n        }\n    } while (match);\n    if (publicKeys.length === 0) {\n        throw new Error(\"The file at the specified path does not contain a PEM-encoded certificate.\");\n    }\n    certificateParts.thumbprint = crypto.createHash(\"sha1\")\n        .update(Buffer.from(publicKeys[0], \"base64\"))\n        .digest(\"hex\")\n        .toUpperCase();\n    return certificateParts;\n}\n/**\n * MSAL client certificate client. Calls to MSAL's confidential application's `acquireTokenByClientCredential` during `doGetToken`.\n * @internal\n */\nclass MsalClientCertificate extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.requiresConfidential = true;\n        this.configuration = options.configuration;\n        this.sendCertificateChain = options.sendCertificateChain;\n    }\n    // Changing the MSAL configuration asynchronously\n    async init(options) {\n        try {\n            const parts = await parseCertificate(this.configuration, this.sendCertificateChain);\n            this.msalConfig.auth.clientCertificate = {\n                thumbprint: parts.thumbprint,\n                privateKey: parts.certificateContents,\n                x5c: parts.x5c,\n            };\n        }\n        catch (error) {\n            this.logger.info(formatError(\"\", error));\n            throw error;\n        }\n        return super.init(options);\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const result = await this.confidentialApp.acquireTokenByClientCredential({\n                scopes,\n                correlationId: options.correlationId,\n                azureRegion: this.azureRegion,\n                authority: options.authority,\n                claims: options.claims,\n            });\n            // Even though we're providing the same default in memory persistence cache that we use for DeviceCodeCredential,\n            // The Client Credential flow does not return the account information from the authentication service,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        }\n        catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst credentialName$2 = \"ClientCertificateCredential\";\nconst logger$d = credentialLogger(credentialName$2);\n/**\n * Enables authentication to Azure Active Directory using a PEM-encoded\n * certificate that is assigned to an App Registration. More information\n * on how to configure certificate authentication can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-certificate-credentials#register-your-certificate-with-azure-ad\n *\n */\nclass ClientCertificateCredential {\n    constructor(tenantId, clientId, certificatePathOrConfiguration, options = {}) {\n        if (!tenantId || !clientId) {\n            throw new Error(`${credentialName$2}: tenantId and clientId are required parameters.`);\n        }\n        const configuration = Object.assign({}, (typeof certificatePathOrConfiguration === \"string\"\n            ? {\n                certificatePath: certificatePathOrConfiguration,\n            }\n            : certificatePathOrConfiguration));\n        if (!configuration || !(configuration.certificate || configuration.certificatePath)) {\n            throw new Error(`${credentialName$2}: Provide either a PEM certificate in string form, or the path to that certificate in the filesystem. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (configuration.certificate && configuration.certificatePath) {\n            throw new Error(`${credentialName$2}: To avoid unexpected behaviors, providing both the contents of a PEM certificate and the path to a PEM certificate is forbidden. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        this.msalFlow = new MsalClientCertificate(Object.assign(Object.assign({}, options), { configuration,\n            logger: logger$d,\n            clientId,\n            tenantId, sendCertificateChain: options.sendCertificateChain, tokenCredentialOptions: options }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${credentialName$2}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * MSAL username and password client. Calls to the MSAL's public application's `acquireTokenByUsernamePassword` during `doGetToken`.\n * @internal\n */\nclass MsalUsernamePassword extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.username = options.username;\n        this.password = options.password;\n    }\n    async doGetToken(scopes, options) {\n        try {\n            const requestOptions = {\n                scopes,\n                username: this.username,\n                password: this.password,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims,\n            };\n            const result = await this.publicApp.acquireTokenByUsernamePassword(requestOptions);\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        }\n        catch (error) {\n            throw this.handleError(scopes, error, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger$c = credentialLogger(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nclass UsernamePasswordCredential {\n    /**\n     * Creates an instance of the UsernamePasswordCredential with the details\n     * needed to authenticate against Azure Active Directory with a username\n     * and password.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory).\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param username - The user account's e-mail address (user name).\n     * @param password - The user account's account password\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, username, password, options = {}) {\n        if (!tenantId || !clientId || !username || !password) {\n            throw new Error(\"UsernamePasswordCredential: tenantId, clientId, username and password are required parameters. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        this.msalFlow = new MsalUsernamePassword(Object.assign(Object.assign({}, options), { logger: logger$c,\n            clientId,\n            tenantId,\n            username,\n            password, tokenCredentialOptions: options || {} }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Contains the list of all supported environment variable names so that an\n * appropriate error message can be generated when no credentials can be\n * configured.\n *\n * @internal\n */\nconst AllSupportedEnvironmentVariables = [\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_CLIENT_SECRET\",\n    \"AZURE_CLIENT_CERTIFICATE_PATH\",\n    \"AZURE_USERNAME\",\n    \"AZURE_PASSWORD\",\n];\nconst credentialName$1 = \"EnvironmentCredential\";\nconst logger$b = credentialLogger(credentialName$1);\n/**\n * Enables authentication to Azure Active Directory using client secret\n * details configured in environment variables\n */\nclass EnvironmentCredential {\n    /**\n     * Creates an instance of the EnvironmentCredential class and decides what credential to use depending on the available environment variables.\n     *\n     * Required environment variables:\n     * - `AZURE_TENANT_ID`: The Azure Active Directory tenant (directory) ID.\n     * - `AZURE_CLIENT_ID`: The client (application) ID of an App Registration in the tenant.\n     *\n     * Environment variables used for client credential authentication:\n     * - `AZURE_CLIENT_SECRET`: A client secret that was generated for the App Registration.\n     * - `AZURE_CLIENT_CERTIFICATE_PATH`: The path to a PEM certificate to use during the authentication, instead of the client secret.\n     *\n     * Alternatively, users can provide environment variables for username and password authentication:\n     * - `AZURE_USERNAME`: Username to authenticate with.\n     * - `AZURE_PASSWORD`: Password to authenticate with.\n     *\n     * If the environment variables required to perform the authentication are missing, a {@link CredentialUnavailableError} will be thrown.\n     * If the authentication fails, or if there's an unknown error, an {@link AuthenticationError} will be thrown.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        // Keep track of any missing environment variables for error details\n        this._credential = undefined;\n        const assigned = processEnvVars(AllSupportedEnvironmentVariables).assigned.join(\", \");\n        logger$b.info(`Found the following environment variables: ${assigned}`);\n        const tenantId = process.env.AZURE_TENANT_ID, clientId = process.env.AZURE_CLIENT_ID, clientSecret = process.env.AZURE_CLIENT_SECRET;\n        if (tenantId) {\n            checkTenantId(logger$b, tenantId);\n        }\n        if (tenantId && clientId && clientSecret) {\n            logger$b.info(`Invoking ClientSecretCredential with tenant ID: ${tenantId}, clientId: ${clientId} and clientSecret: [REDACTED]`);\n            this._credential = new ClientSecretCredential(tenantId, clientId, clientSecret, options);\n            return;\n        }\n        const certificatePath = process.env.AZURE_CLIENT_CERTIFICATE_PATH;\n        if (tenantId && clientId && certificatePath) {\n            logger$b.info(`Invoking ClientCertificateCredential with tenant ID: ${tenantId}, clientId: ${clientId} and certificatePath: ${certificatePath}`);\n            this._credential = new ClientCertificateCredential(tenantId, clientId, { certificatePath }, options);\n            return;\n        }\n        const username = process.env.AZURE_USERNAME;\n        const password = process.env.AZURE_PASSWORD;\n        if (tenantId && clientId && username && password) {\n            logger$b.info(`Invoking UsernamePasswordCredential with tenant ID: ${tenantId}, clientId: ${clientId} and username: ${username}`);\n            this._credential = new UsernamePasswordCredential(tenantId, clientId, username, password, options);\n        }\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - Optional parameters. See {@link GetTokenOptions}.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${credentialName$1}.getToken`, options, async (newOptions) => {\n            if (this._credential) {\n                try {\n                    const result = await this._credential.getToken(scopes, newOptions);\n                    logger$b.getToken.info(formatSuccess(scopes));\n                    return result;\n                }\n                catch (err) {\n                    const authenticationError = new AuthenticationError(400, {\n                        error: `${credentialName$1} authentication failed. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`,\n                        error_description: err.message.toString().split(\"More details:\").join(\"\"),\n                    });\n                    logger$b.getToken.info(formatError(scopes, authenticationError));\n                    throw authenticationError;\n                }\n            }\n            throw new CredentialUnavailableError(`${credentialName$1} is unavailable. No underlying credential could be used. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`);\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst DefaultScopeSuffix = \"/.default\";\nconst imdsHost = \"http://169.254.169.254\";\nconst imdsEndpointPath = \"/metadata/identity/oauth2/token\";\nconst imdsApiVersion = \"2018-02-01\";\nconst azureArcAPIVersion = \"2019-11-01\";\nconst azureFabricVersion = \"2019-07-01-preview\";\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Most MSIs send requests to the IMDS endpoint, or a similar endpoint.\n * These are GET requests that require sending a `resource` parameter on the query.\n * This resource can be derived from the scopes received through the getToken call, as long as only one scope is received.\n * Multiple scopes assume that the resulting token will have access to multiple resources, which won't be the case.\n *\n * For that reason, when we encounter multiple scopes, we return undefined.\n * It's up to the individual MSI implementations to throw the errors (which helps us provide less generic errors).\n */\nfunction mapScopesToResource(scopes) {\n    let scope = \"\";\n    if (Array.isArray(scopes)) {\n        if (scopes.length !== 1) {\n            return;\n        }\n        scope = scopes[0];\n    }\n    else if (typeof scopes === \"string\") {\n        scope = scopes;\n    }\n    if (!scope.endsWith(DefaultScopeSuffix)) {\n        return scope;\n    }\n    return scope.substr(0, scope.lastIndexOf(DefaultScopeSuffix));\n}\n\n// Copyright (c) Microsoft Corporation.\nconst msiName$5 = \"ManagedIdentityCredential - AppServiceMSI 2017\";\nconst logger$a = credentialLogger(msiName$5);\n/**\n * Formats the expiration date of the received token into the number of milliseconds between that date and midnight, January 1, 1970.\n */\nfunction expiresOnParser$2(requestBody) {\n    // App Service always returns string expires_on values.\n    return Date.parse(requestBody.expires_on);\n}\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions$5(scopes, clientId) {\n    const resource = mapScopesToResource(scopes);\n    if (!resource) {\n        throw new Error(`${msiName$5}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": \"2017-09-01\",\n    };\n    if (clientId) {\n        queryParameters.clientid = clientId;\n    }\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.MSI_ENDPOINT) {\n        throw new Error(`${msiName$5}: Missing environment variable: MSI_ENDPOINT`);\n    }\n    if (!process.env.MSI_SECRET) {\n        throw new Error(`${msiName$5}: Missing environment variable: MSI_SECRET`);\n    }\n    return {\n        url: `${process.env.MSI_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: coreRestPipeline.createHttpHeaders({\n            Accept: \"application/json\",\n            secret: process.env.MSI_SECRET,\n        }),\n    };\n}\n/**\n * Defines how to determine whether the Azure App Service MSI is available, and also how to retrieve a token from the Azure App Service MSI.\n */\nconst appServiceMsi2017 = {\n    async isAvailable(scopes) {\n        const resource = mapScopesToResource(scopes);\n        if (!resource) {\n            logger$a.info(`${msiName$5}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const env = process.env;\n        const result = Boolean(env.MSI_ENDPOINT && env.MSI_SECRET);\n        if (!result) {\n            logger$a.info(`${msiName$5}: Unavailable. The environment variables needed are: MSI_ENDPOINT and MSI_SECRET.`);\n        }\n        return result;\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId } = configuration;\n        logger$a.info(`${msiName$5}: Using the endpoint and the secret coming form the environment variables: MSI_ENDPOINT=${process.env.MSI_ENDPOINT} and MSI_SECRET=[REDACTED].`);\n        const request = coreRestPipeline.createPipelineRequest(Object.assign(Object.assign({ abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions$5(scopes, clientId)), { \n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true }));\n        const tokenResponse = await identityClient.sendTokenRequest(request, expiresOnParser$2);\n        return (tokenResponse && tokenResponse.accessToken) || null;\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst msiName$4 = \"ManagedIdentityCredential - CloudShellMSI\";\nconst logger$9 = credentialLogger(msiName$4);\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions$4(scopes, clientId) {\n    const resource = mapScopesToResource(scopes);\n    if (!resource) {\n        throw new Error(`${msiName$4}: Multiple scopes are not supported.`);\n    }\n    const body = {\n        resource,\n    };\n    if (clientId) {\n        body.client_id = clientId;\n    }\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.MSI_ENDPOINT) {\n        throw new Error(`${msiName$4}: Missing environment variable: MSI_ENDPOINT`);\n    }\n    const params = new URLSearchParams(body);\n    return {\n        url: process.env.MSI_ENDPOINT,\n        method: \"POST\",\n        body: params.toString(),\n        headers: coreRestPipeline.createHttpHeaders({\n            Accept: \"application/json\",\n            Metadata: \"true\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        }),\n    };\n}\n/**\n * Defines how to determine whether the Azure Cloud Shell MSI is available, and also how to retrieve a token from the Azure Cloud Shell MSI.\n * Since Azure Managed Identities aren't available in the Azure Cloud Shell, we log a warning for users that try to access cloud shell using user assigned identity.\n */\nconst cloudShellMsi = {\n    async isAvailable(scopes) {\n        const resource = mapScopesToResource(scopes);\n        if (!resource) {\n            logger$9.info(`${msiName$4}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const result = Boolean(process.env.MSI_ENDPOINT);\n        if (!result) {\n            logger$9.info(`${msiName$4}: Unavailable. The environment variable MSI_ENDPOINT is needed.`);\n        }\n        return result;\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId } = configuration;\n        if (clientId) {\n            logger$9.warning(`${msiName$4}: does not support user-assigned identities in the Cloud Shell environment. Argument clientId will be ignored.`);\n        }\n        logger$9.info(`${msiName$4}: Using the endpoint coming form the environment variable MSI_ENDPOINT = ${process.env.MSI_ENDPOINT}.`);\n        const request = coreRestPipeline.createPipelineRequest(Object.assign(Object.assign({ abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions$4(scopes, clientId)), { \n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return (tokenResponse && tokenResponse.accessToken) || null;\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst msiName$3 = \"ManagedIdentityCredential - IMDS\";\nconst logger$8 = credentialLogger(msiName$3);\n/**\n * Formats the expiration date of the received token into the number of milliseconds between that date and midnight, January 1, 1970.\n */\nfunction expiresOnParser$1(requestBody) {\n    if (requestBody.expires_on) {\n        // Use the expires_on timestamp if it's available\n        const expires = +requestBody.expires_on * 1000;\n        logger$8.info(`${msiName$3}: Using expires_on: ${expires} (original value: ${requestBody.expires_on})`);\n        return expires;\n    }\n    else {\n        // If these aren't possible, use expires_in and calculate a timestamp\n        const expires = Date.now() + requestBody.expires_in * 1000;\n        logger$8.info(`${msiName$3}: IMDS using expires_in: ${expires} (original value: ${requestBody.expires_in})`);\n        return expires;\n    }\n}\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions$3(scopes, clientId, options) {\n    var _a;\n    const resource = mapScopesToResource(scopes);\n    if (!resource) {\n        throw new Error(`${msiName$3}: Multiple scopes are not supported.`);\n    }\n    const { skipQuery, skipMetadataHeader } = options || {};\n    let query = \"\";\n    // Pod Identity will try to process this request even if the Metadata header is missing.\n    // We can exclude the request query to ensure no IMDS endpoint tries to process the ping request.\n    if (!skipQuery) {\n        const queryParameters = {\n            resource,\n            \"api-version\": imdsApiVersion,\n        };\n        if (clientId) {\n            queryParameters.client_id = clientId;\n        }\n        const params = new URLSearchParams(queryParameters);\n        query = `?${params.toString()}`;\n    }\n    const url = new URL(imdsEndpointPath, (_a = process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) !== null && _a !== void 0 ? _a : imdsHost);\n    const rawHeaders = {\n        Accept: \"application/json\",\n        Metadata: \"true\",\n    };\n    // Remove the Metadata header to invoke a request error from some IMDS endpoints.\n    if (skipMetadataHeader) {\n        delete rawHeaders.Metadata;\n    }\n    return {\n        // In this case, the `?` should be added in the \"query\" variable `skipQuery` is not set.\n        url: `${url}${query}`,\n        method: \"GET\",\n        headers: coreRestPipeline.createHttpHeaders(rawHeaders),\n    };\n}\n// 800ms -> 1600ms -> 3200ms\nconst imdsMsiRetryConfig = {\n    maxRetries: 3,\n    startDelayInMs: 800,\n    intervalIncrement: 2,\n};\n/**\n * Defines how to determine whether the Azure IMDS MSI is available, and also how to retrieve a token from the Azure IMDS MSI.\n */\nconst imdsMsi = {\n    async isAvailable(scopes, identityClient, clientId, getTokenOptions) {\n        var _a, _b;\n        const resource = mapScopesToResource(scopes);\n        if (!resource) {\n            logger$8.info(`${msiName$3}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const { span, updatedOptions: options } = createSpan(\"ManagedIdentityCredential-pingImdsEndpoint\", getTokenOptions);\n        // if the PodIdentityEndpoint environment variable was set no need to probe the endpoint, it can be assumed to exist\n        if (process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) {\n            return true;\n        }\n        const requestOptions = prepareRequestOptions$3(resource, clientId, {\n            skipMetadataHeader: true,\n            skipQuery: true,\n        });\n        requestOptions.tracingOptions = options.tracingOptions;\n        try {\n            // Create a request with a timeout since we expect that\n            // not having a \"Metadata\" header should cause an error to be\n            // returned quickly from the endpoint, proving its availability.\n            const request = coreRestPipeline.createPipelineRequest(requestOptions);\n            request.timeout = (_b = (_a = options.requestOptions) === null || _a === void 0 ? void 0 : _a.timeout) !== null && _b !== void 0 ? _b : 300;\n            // This MSI uses the imdsEndpoint to get the token, which only uses http://\n            request.allowInsecureConnection = true;\n            try {\n                logger$8.info(`${msiName$3}: Pinging the Azure IMDS endpoint`);\n                await identityClient.sendRequest(request);\n            }\n            catch (err) {\n                if ((err.name === \"RestError\" && err.code === coreRestPipeline.RestError.REQUEST_SEND_ERROR) ||\n                    err.name === \"AbortError\" ||\n                    err.code === \"ENETUNREACH\" || // Network unreachable\n                    err.code === \"ECONNREFUSED\" || // connection refused\n                    err.code === \"EHOSTDOWN\" // host is down\n                ) {\n                    // If the request failed, or Node.js was unable to establish a connection,\n                    // or the host was down, we'll assume the IMDS endpoint isn't available.\n                    logger$8.info(`${msiName$3}: The Azure IMDS endpoint is unavailable`);\n                    span.setStatus({\n                        code: coreTracing.SpanStatusCode.ERROR,\n                        message: err.message,\n                    });\n                    return false;\n                }\n            }\n            // If we received any response, the endpoint is available\n            logger$8.info(`${msiName$3}: The Azure IMDS endpoint is available`);\n            return true;\n        }\n        catch (err) {\n            // createWebResource failed.\n            // This error should bubble up to the user.\n            logger$8.info(`${msiName$3}: Error when creating the WebResource for the Azure IMDS endpoint: ${err.message}`);\n            span.setStatus({\n                code: coreTracing.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId } = configuration;\n        logger$8.info(`${msiName$3}: Using the Azure IMDS endpoint coming from the environment variable MSI_ENDPOINT=${process.env.MSI_ENDPOINT}, and using the cloud shell to proceed with the authentication.`);\n        let nextDelayInMs = imdsMsiRetryConfig.startDelayInMs;\n        for (let retries = 0; retries < imdsMsiRetryConfig.maxRetries; retries++) {\n            try {\n                const request = coreRestPipeline.createPipelineRequest(Object.assign(Object.assign({ abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions$3(scopes, clientId)), { allowInsecureConnection: true }));\n                const tokenResponse = await identityClient.sendTokenRequest(request, expiresOnParser$1);\n                return (tokenResponse && tokenResponse.accessToken) || null;\n            }\n            catch (error) {\n                if (error.statusCode === 404) {\n                    await coreUtil.delay(nextDelayInMs);\n                    nextDelayInMs *= imdsMsiRetryConfig.intervalIncrement;\n                    continue;\n                }\n                throw error;\n            }\n        }\n        throw new AuthenticationError(404, `${msiName$3}: Failed to retrieve IMDS token after ${imdsMsiRetryConfig.maxRetries} retries.`);\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst msiName$2 = \"ManagedIdentityCredential - Azure Arc MSI\";\nconst logger$7 = credentialLogger(msiName$2);\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions$2(scopes) {\n    const resource = mapScopesToResource(scopes);\n    if (!resource) {\n        throw new Error(`${msiName$2}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": azureArcAPIVersion,\n    };\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.IDENTITY_ENDPOINT) {\n        throw new Error(`${msiName$2}: Missing environment variable: IDENTITY_ENDPOINT`);\n    }\n    return coreRestPipeline.createPipelineRequest({\n        // Should be similar to: http://localhost:40342/metadata/identity/oauth2/token\n        url: `${process.env.IDENTITY_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: coreRestPipeline.createHttpHeaders({\n            Accept: \"application/json\",\n            Metadata: \"true\",\n        }),\n    });\n}\n/**\n * Retrieves the file contents at the given path using promises.\n * Useful since `fs`'s readFileSync locks the thread, and to avoid extra dependencies.\n */\nfunction readFileAsync$1(path, options) {\n    return new Promise((resolve, reject) => fs.readFile(path, options, (err, data) => {\n        if (err) {\n            reject(err);\n        }\n        resolve(data);\n    }));\n}\n/**\n * Does a request to the authentication provider that results in a file path.\n */\nasync function filePathRequest(identityClient, requestPrepareOptions) {\n    const response = await identityClient.sendRequest(coreRestPipeline.createPipelineRequest(requestPrepareOptions));\n    if (response.status !== 401) {\n        let message = \"\";\n        if (response.bodyAsText) {\n            message = ` Response: ${response.bodyAsText}`;\n        }\n        throw new AuthenticationError(response.status, `${msiName$2}: To authenticate with Azure Arc MSI, status code 401 is expected on the first request. ${message}`);\n    }\n    const authHeader = response.headers.get(\"www-authenticate\") || \"\";\n    try {\n        return authHeader.split(\"=\").slice(1)[0];\n    }\n    catch (e) {\n        throw Error(`Invalid www-authenticate header format: ${authHeader}`);\n    }\n}\n/**\n * Defines how to determine whether the Azure Arc MSI is available, and also how to retrieve a token from the Azure Arc MSI.\n */\nconst arcMsi = {\n    async isAvailable(scopes) {\n        const resource = mapScopesToResource(scopes);\n        if (!resource) {\n            logger$7.info(`${msiName$2}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const result = Boolean(process.env.IMDS_ENDPOINT && process.env.IDENTITY_ENDPOINT);\n        if (!result) {\n            logger$7.info(`${msiName$2}: The environment variables needed are: IMDS_ENDPOINT and IDENTITY_ENDPOINT`);\n        }\n        return result;\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        var _a;\n        const { identityClient, scopes, clientId } = configuration;\n        logger$7.info(`${msiName$2}: Authenticating.`);\n        if (clientId) {\n            throw new Error(`${msiName$2}: User assigned identity is not supported by the Azure Arc Managed Identity Endpoint. To authenticate with the system assigned identity, omit the client id when constructing the ManagedIdentityCredential, or if authenticating with the DefaultAzureCredential ensure the AZURE_CLIENT_ID environment variable is not set.`);\n        }\n        const requestOptions = Object.assign(Object.assign({ disableJsonStringifyOnBody: true, deserializationMapper: undefined, abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions$2(scopes)), { allowInsecureConnection: true });\n        const filePath = await filePathRequest(identityClient, requestOptions);\n        if (!filePath) {\n            throw new Error(`${msiName$2}: Failed to find the token file.`);\n        }\n        const key = await readFileAsync$1(filePath, { encoding: \"utf-8\" });\n        (_a = requestOptions.headers) === null || _a === void 0 ? void 0 : _a.set(\"Authorization\", `Basic ${key}`);\n        const request = coreRestPipeline.createPipelineRequest(Object.assign(Object.assign({}, requestOptions), { \n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return (tokenResponse && tokenResponse.accessToken) || null;\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst msiName$1 = \"ManagedIdentityCredential - Token Exchange\";\nconst logger$6 = credentialLogger(msiName$1);\nconst readFileAsync = util.promisify(fs__default[\"default\"].readFile);\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions$1(scopes, clientAssertion, clientId) {\n    var _a;\n    const bodyParams = {\n        scope: Array.isArray(scopes) ? scopes.join(\" \") : scopes,\n        client_assertion: clientAssertion,\n        client_assertion_type: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n        client_id: clientId,\n        grant_type: \"client_credentials\",\n    };\n    const urlParams = new URLSearchParams(bodyParams);\n    const url = new URL(`${process.env.AZURE_TENANT_ID}/oauth2/v2.0/token`, (_a = process.env.AZURE_AUTHORITY_HOST) !== null && _a !== void 0 ? _a : DefaultAuthorityHost);\n    return {\n        url: url.toString(),\n        method: \"POST\",\n        body: urlParams.toString(),\n        headers: coreRestPipeline.createHttpHeaders({\n            Accept: \"application/json\",\n        }),\n    };\n}\n/**\n * Defines how to determine whether the token exchange MSI is available, and also how to retrieve a token from the token exchange MSI.\n */\nfunction tokenExchangeMsi() {\n    const azureFederatedTokenFilePath = process.env.AZURE_FEDERATED_TOKEN_FILE;\n    let azureFederatedTokenFileContent = undefined;\n    let cacheDate = undefined;\n    // Only reads from the assertion file once every 5 minutes\n    async function readAssertion() {\n        // Cached assertions expire after 5 minutes\n        if (cacheDate !== undefined && Date.now() - cacheDate >= 1000 * 60 * 5) {\n            azureFederatedTokenFileContent = undefined;\n        }\n        if (!azureFederatedTokenFileContent) {\n            const file = await readFileAsync(azureFederatedTokenFilePath, \"utf8\");\n            const value = file.trim();\n            if (!value) {\n                throw new Error(`No content on the file ${azureFederatedTokenFilePath}, indicated by the environment variable AZURE_FEDERATED_TOKEN_FILE`);\n            }\n            else {\n                azureFederatedTokenFileContent = value;\n                cacheDate = Date.now();\n            }\n        }\n        return azureFederatedTokenFileContent;\n    }\n    return {\n        async isAvailable(_scopes, _identityClient, clientId) {\n            const env = process.env;\n            const result = Boolean((clientId || env.AZURE_CLIENT_ID) && env.AZURE_TENANT_ID && azureFederatedTokenFilePath);\n            if (!result) {\n                logger$6.info(`${msiName$1}: Unavailable. The environment variables needed are: AZURE_CLIENT_ID (or the client ID sent through the parameters), AZURE_TENANT_ID and AZURE_FEDERATED_TOKEN_FILE`);\n            }\n            return result;\n        },\n        async getToken(configuration, getTokenOptions = {}) {\n            const { identityClient, scopes, clientId } = configuration;\n            logger$6.info(`${msiName$1}: Using the client assertion coming from environment variables.`);\n            let assertion;\n            try {\n                assertion = await readAssertion();\n            }\n            catch (err) {\n                throw new Error(`${msiName$1}: Failed to read ${azureFederatedTokenFilePath}, indicated by the environment variable AZURE_FEDERATED_TOKEN_FILE`);\n            }\n            const request = coreRestPipeline.createPipelineRequest(Object.assign(Object.assign({ abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions$1(scopes, assertion, clientId || process.env.AZURE_CLIENT_ID)), { \n                // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n                allowInsecureConnection: true }));\n            const tokenResponse = await identityClient.sendTokenRequest(request);\n            return (tokenResponse && tokenResponse.accessToken) || null;\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// This MSI can be easily tested by deploying a container to Azure Service Fabric with the Dockerfile:\n//\n//   FROM node:12\n//   RUN wget https://host.any/path/bash.sh\n//   CMD [\"bash\", \"bash.sh\"]\n//\n// Where the bash script contains:\n//\n//   curl --insecure $IDENTITY_ENDPOINT'?api-version=2019-07-01-preview&resource=https://vault.azure.net/' -H \"Secret: $IDENTITY_HEADER\"\n//\nconst msiName = \"ManagedIdentityCredential - Fabric MSI\";\nconst logger$5 = credentialLogger(msiName);\n/**\n * Formats the expiration date of the received token into the number of milliseconds between that date and midnight, January 1, 1970.\n */\nfunction expiresOnParser(requestBody) {\n    // Parses a string representation of the milliseconds since epoch into a number value\n    return Number(requestBody.expires_on);\n}\n/**\n * Generates the options used on the request for an access token.\n */\nfunction prepareRequestOptions(scopes, clientId) {\n    const resource = mapScopesToResource(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": azureFabricVersion,\n    };\n    if (clientId) {\n        queryParameters.client_id = clientId;\n    }\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.IDENTITY_ENDPOINT) {\n        throw new Error(\"Missing environment variable: IDENTITY_ENDPOINT\");\n    }\n    if (!process.env.IDENTITY_HEADER) {\n        throw new Error(\"Missing environment variable: IDENTITY_HEADER\");\n    }\n    return {\n        url: `${process.env.IDENTITY_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: coreRestPipeline.createHttpHeaders({\n            Accept: \"application/json\",\n            secret: process.env.IDENTITY_HEADER,\n        }),\n    };\n}\n/**\n * Defines how to determine whether the Azure Service Fabric MSI is available, and also how to retrieve a token from the Azure Service Fabric MSI.\n */\nconst fabricMsi = {\n    async isAvailable(scopes) {\n        const resource = mapScopesToResource(scopes);\n        if (!resource) {\n            logger$5.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const env = process.env;\n        const result = Boolean(env.IDENTITY_ENDPOINT && env.IDENTITY_HEADER && env.IDENTITY_SERVER_THUMBPRINT);\n        if (!result) {\n            logger$5.info(`${msiName}: Unavailable. The environment variables needed are: IDENTITY_ENDPOINT, IDENTITY_HEADER and IDENTITY_SERVER_THUMBPRINT`);\n        }\n        return result;\n    },\n    async getToken(configuration, getTokenOptions = {}) {\n        const { scopes, identityClient, clientId } = configuration;\n        logger$5.info([\n            `${msiName}:`,\n            \"Using the endpoint and the secret coming from the environment variables:\",\n            `IDENTITY_ENDPOINT=${process.env.IDENTITY_ENDPOINT},`,\n            \"IDENTITY_HEADER=[REDACTED] and\",\n            \"IDENTITY_SERVER_THUMBPRINT=[REDACTED].\",\n        ].join(\" \"));\n        const request = coreRestPipeline.createPipelineRequest(Object.assign({ abortSignal: getTokenOptions.abortSignal }, prepareRequestOptions(scopes, clientId)));\n        request.agent = new https__default[\"default\"].Agent({\n            // This is necessary because Service Fabric provides a self-signed certificate.\n            // The alternative path is to verify the certificate using the IDENTITY_SERVER_THUMBPRINT env variable.\n            rejectUnauthorized: false,\n        });\n        const tokenResponse = await identityClient.sendTokenRequest(request, expiresOnParser);\n        return (tokenResponse && tokenResponse.accessToken) || null;\n    },\n};\n\n// Copyright (c) Microsoft Corporation.\nconst logger$4 = credentialLogger(\"ManagedIdentityCredential\");\n/**\n * Attempts authentication using a managed identity available at the deployment environment.\n * This authentication type works in Azure VMs, App Service instances, Azure Functions applications,\n * Azure Kubernetes Services, Azure Service Fabric instances and inside of the Azure Cloud Shell.\n *\n * More information about configuring managed identities can be found here:\n * https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\n */\nclass ManagedIdentityCredential {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(clientIdOrOptions, options) {\n        this.isEndpointUnavailable = null;\n        let _options;\n        if (typeof clientIdOrOptions === \"string\") {\n            // clientId, options constructor\n            this.clientId = clientIdOrOptions;\n            _options = options;\n        }\n        else {\n            // options only constructor\n            _options = clientIdOrOptions;\n        }\n        this.identityClient = new IdentityClient(_options);\n        this.isAvailableIdentityClient = new IdentityClient(Object.assign(Object.assign({}, _options), { retryOptions: {\n                maxRetries: 0,\n            } }));\n    }\n    async cachedAvailableMSI(scopes, clientId, getTokenOptions) {\n        if (this.cachedMSI) {\n            return this.cachedMSI;\n        }\n        const MSIs = [fabricMsi, appServiceMsi2017, cloudShellMsi, arcMsi, tokenExchangeMsi(), imdsMsi];\n        for (const msi of MSIs) {\n            if (await msi.isAvailable(scopes, this.isAvailableIdentityClient, clientId, getTokenOptions)) {\n                this.cachedMSI = msi;\n                return msi;\n            }\n        }\n        throw new CredentialUnavailableError(`${ManagedIdentityCredential.name} - No MSI credential available`);\n    }\n    async authenticateManagedIdentity(scopes, clientId, getTokenOptions) {\n        const { span, updatedOptions } = createSpan(`${ManagedIdentityCredential.name}.authenticateManagedIdentity`, getTokenOptions);\n        try {\n            // Determining the available MSI, and avoiding checking for other MSIs while the program is running.\n            const availableMSI = await this.cachedAvailableMSI(scopes, clientId, updatedOptions);\n            return availableMSI.getToken({\n                identityClient: this.identityClient,\n                scopes,\n                clientId,\n            }, updatedOptions);\n        }\n        catch (err) {\n            span.setStatus({\n                code: coreTracing.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     * If an unexpected error occurs, an {@link AuthenticationError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        let result = null;\n        const { span, updatedOptions } = createSpan(`${ManagedIdentityCredential.name}.getToken`, options);\n        try {\n            // isEndpointAvailable can be true, false, or null,\n            // If it's null, it means we don't yet know whether\n            // the endpoint is available and need to check for it.\n            if (this.isEndpointUnavailable !== true) {\n                result = await this.authenticateManagedIdentity(scopes, this.clientId, updatedOptions);\n                if (result === null) {\n                    // If authenticateManagedIdentity returns null,\n                    // it means no MSI endpoints are available.\n                    // If so, we avoid trying to reach to them in future requests.\n                    this.isEndpointUnavailable = true;\n                    // It also means that the endpoint answered with either 200 or 201 (see the sendTokenRequest method),\n                    // yet we had no access token. For this reason, we'll throw once with a specific message:\n                    const error = new CredentialUnavailableError(\"The managed identity endpoint was reached, yet no tokens were received.\");\n                    logger$4.getToken.info(formatError(scopes, error));\n                    throw error;\n                }\n                // Since `authenticateManagedIdentity` didn't throw, and the result was not null,\n                // We will assume that this endpoint is reachable from this point forward,\n                // and avoid pinging again to it.\n                this.isEndpointUnavailable = false;\n            }\n            else {\n                // We've previously determined that the endpoint was unavailable,\n                // either because it was unreachable or permanently unable to authenticate.\n                const error = new CredentialUnavailableError(\"The managed identity endpoint is not currently available\");\n                logger$4.getToken.info(formatError(scopes, error));\n                throw error;\n            }\n            logger$4.getToken.info(formatSuccess(scopes));\n            return result;\n        }\n        catch (err) {\n            // CredentialUnavailable errors are expected to reach here.\n            // We intend them to bubble up, so that DefaultAzureCredential can catch them.\n            if (err.name === \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            // Expected errors to reach this point:\n            // - Errors coming from a method unexpectedly breaking.\n            // - When identityClient.sendTokenRequest throws, in which case\n            //   if the status code was 400, it means that the endpoint is working,\n            //   but no identity is available.\n            span.setStatus({\n                code: coreTracing.SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            // If either the network is unreachable,\n            // we can safely assume the credential is unavailable.\n            if (err.code === \"ENETUNREACH\") {\n                const error = new CredentialUnavailableError(`${ManagedIdentityCredential.name}: Unavailable. Network unreachable. Message: ${err.message}`);\n                logger$4.getToken.info(formatError(scopes, error));\n                throw error;\n            }\n            // If either the host was unreachable,\n            // we can safely assume the credential is unavailable.\n            if (err.code === \"EHOSTUNREACH\") {\n                const error = new CredentialUnavailableError(`${ManagedIdentityCredential.name}: Unavailable. No managed identity endpoint found. Message: ${err.message}`);\n                logger$4.getToken.info(formatError(scopes, error));\n                throw error;\n            }\n            // If err.statusCode has a value of 400, it comes from sendTokenRequest,\n            // and it means that the endpoint is working, but that no identity is available.\n            if (err.statusCode === 400) {\n                throw new CredentialUnavailableError(`${ManagedIdentityCredential.name}: The managed identity endpoint is indicating there's no available identity. Message: ${err.message}`);\n            }\n            // If the error has no status code, we can assume there was no available identity.\n            // This will throw silently during any ChainedTokenCredential.\n            if (err.statusCode === undefined) {\n                throw new CredentialUnavailableError(`${ManagedIdentityCredential.name}: Authentication failed. Message ${err.message}`);\n            }\n            // Any other error should break the chain.\n            throw new AuthenticationError(err.statusCode, {\n                error: `${ManagedIdentityCredential.name} authentication failed.`,\n                error_description: err.message,\n            });\n        }\n        finally {\n            // Finally is always called, both if we return and if we throw in the above try/catch.\n            span.end();\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A shim around ManagedIdentityCredential that adapts it to accept\n * `DefaultAzureCredentialOptions`.\n *\n * @internal\n */\nclass DefaultManagedIdentityCredential extends ManagedIdentityCredential {\n    constructor(options) {\n        var _a;\n        const managedIdentityClientId = (_a = options === null || options === void 0 ? void 0 : options.managedIdentityClientId) !== null && _a !== void 0 ? _a : process.env.AZURE_CLIENT_ID;\n        if (managedIdentityClientId !== undefined) {\n            super(managedIdentityClientId, options);\n        }\n        else {\n            super(options);\n        }\n    }\n}\nconst defaultCredentials = [\n    EnvironmentCredential,\n    DefaultManagedIdentityCredential,\n    VisualStudioCodeCredential,\n    AzureCliCredential,\n    AzurePowerShellCredential,\n];\n/**\n * Provides a default {@link ChainedTokenCredential} configuration that should\n * work for most applications that use the Azure SDK.\n */\nclass DefaultAzureCredential extends ChainedTokenCredential {\n    /**\n     * Creates an instance of the DefaultAzureCredential class.\n     *\n     * This credential provides a default {@link ChainedTokenCredential} configuration that should\n     * work for most applications that use the Azure SDK.\n     *\n     * The following credential types will be tried, in order:\n     *\n     * - {@link EnvironmentCredential}\n     * - {@link ManagedIdentityCredential}\n     * - {@link VisualStudioCodeCredential}\n     * - {@link AzureCliCredential}\n     * - {@link AzurePowerShellCredential}\n     *\n     * Consult the documentation of these credential types for more information\n     * on how they attempt authentication.\n     *\n     * **Note**: `VisualStudioCodeCredential` is provided by a plugin package:\n     * `@azure/identity-vscode`. If this package is not installed and registered\n     * using the plugin API (`useIdentityPlugin`), then authentication using\n     * `VisualStudioCodeCredential` will not be available.\n     *\n     * @param options - Optional parameters. See {@link DefaultAzureCredentialOptions}.\n     */\n    constructor(options) {\n        super(...defaultCredentials.map((ctor) => new ctor(options)));\n        this.UnavailableMessage =\n            \"DefaultAzureCredential => failed to retrieve a token from the included credentials. To troubleshoot, visit https://aka.ms/azsdk/js/identity/defaultazurecredential/troubleshoot.\";\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * A call to open(), but mockable\n * @internal\n */\nconst interactiveBrowserMockable = {\n    open: open__default[\"default\"],\n};\n/**\n * This MSAL client sets up a web server to listen for redirect callbacks, then calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`\n * to trigger the authentication flow, and then respond based on the values obtained from the redirect callback\n * @internal\n */\nclass MsalOpenBrowser extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.logger = credentialLogger(\"Node.js MSAL Open Browser\");\n        this.redirectUri = options.redirectUri;\n        this.loginHint = options.loginHint;\n        const url = new URL(this.redirectUri);\n        this.port = parseInt(url.port);\n        if (isNaN(this.port)) {\n            this.port = 80;\n        }\n        this.hostname = url.hostname;\n    }\n    async acquireTokenByCode(request) {\n        return this.publicApp.acquireTokenByCode(request);\n    }\n    doGetToken(scopes, options) {\n        return new Promise((resolve, reject) => {\n            const socketToDestroy = [];\n            const requestListener = (req, res) => {\n                var _a;\n                if (!req.url) {\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    return;\n                }\n                let url;\n                try {\n                    url = new URL(req.url, this.redirectUri);\n                }\n                catch (e) {\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    return;\n                }\n                const tokenRequest = {\n                    code: url.searchParams.get(\"code\"),\n                    redirectUri: this.redirectUri,\n                    scopes: scopes,\n                    authority: options === null || options === void 0 ? void 0 : options.authority,\n                    codeVerifier: (_a = this.pkceCodes) === null || _a === void 0 ? void 0 : _a.verifier,\n                };\n                this.acquireTokenByCode(tokenRequest)\n                    .then((authResponse) => {\n                    if (authResponse === null || authResponse === void 0 ? void 0 : authResponse.account) {\n                        this.account = msalToPublic(this.clientId, authResponse.account);\n                    }\n                    const successMessage = `Authentication Complete. You can close the browser and return to the application.`;\n                    if (authResponse && authResponse.expiresOn) {\n                        const expiresOnTimestamp = authResponse === null || authResponse === void 0 ? void 0 : authResponse.expiresOn.valueOf();\n                        res.writeHead(200);\n                        res.end(successMessage);\n                        this.logger.getToken.info(formatSuccess(scopes));\n                        resolve({\n                            expiresOnTimestamp,\n                            token: authResponse.accessToken,\n                        });\n                    }\n                    else {\n                        const errorMessage = formatError(scopes, `${url.searchParams.get(\"error\")}. ${url.searchParams.get(\"error_description\")}`);\n                        res.writeHead(500);\n                        res.end(errorMessage);\n                        this.logger.getToken.info(errorMessage);\n                        reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    }\n                    cleanup();\n                    return;\n                })\n                    .catch(() => {\n                    const errorMessage = formatError(scopes, `${url.searchParams.get(\"error\")}. ${url.searchParams.get(\"error_description\")}`);\n                    res.writeHead(500);\n                    res.end(errorMessage);\n                    this.logger.getToken.info(errorMessage);\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    cleanup();\n                });\n            };\n            const app = http__default[\"default\"].createServer(requestListener);\n            const server = stoppable__default[\"default\"](app);\n            const listen = app.listen(this.port, this.hostname, () => this.logger.info(`InteractiveBrowserCredential listening on port ${this.port}!`));\n            function cleanup() {\n                if (listen) {\n                    listen.close();\n                }\n                for (const socket of socketToDestroy) {\n                    socket.destroy();\n                }\n                if (server) {\n                    server.close();\n                    server.stop();\n                }\n            }\n            app.on(\"connection\", (socket) => socketToDestroy.push(socket));\n            app.on(\"error\", (err) => {\n                cleanup();\n                const code = err.code;\n                if (code === \"EACCES\" || code === \"EADDRINUSE\") {\n                    reject(new CredentialUnavailableError([\n                        `InteractiveBrowserCredential: Access denied to port ${this.port}.`,\n                        `Try sending a redirect URI with a different port, as follows:`,\n                        '`new InteractiveBrowserCredential({ redirectUri: \"http://localhost:1337\" })`',\n                    ].join(\" \")));\n                }\n                else {\n                    reject(new CredentialUnavailableError(`InteractiveBrowserCredential: Failed to start the necessary web server. Error: ${err.message}`));\n                }\n            });\n            app.on(\"listening\", () => {\n                const openPromise = this.openAuthCodeUrl(scopes, options);\n                const abortSignal = options === null || options === void 0 ? void 0 : options.abortSignal;\n                if (abortSignal) {\n                    abortSignal.addEventListener(\"abort\", () => {\n                        cleanup();\n                        reject(new Error(\"Aborted\"));\n                    });\n                }\n                openPromise.then().catch((e) => {\n                    cleanup();\n                    reject(e);\n                });\n            });\n        });\n    }\n    async openAuthCodeUrl(scopeArray, options) {\n        // Initialize CryptoProvider instance\n        const cryptoProvider = new msalNode__namespace.CryptoProvider();\n        // Generate PKCE Codes before starting the authorization flow\n        this.pkceCodes = await cryptoProvider.generatePkceCodes();\n        const authCodeUrlParameters = {\n            scopes: scopeArray,\n            correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n            redirectUri: this.redirectUri,\n            authority: options === null || options === void 0 ? void 0 : options.authority,\n            claims: options === null || options === void 0 ? void 0 : options.claims,\n            loginHint: this.loginHint,\n            codeChallenge: this.pkceCodes.challenge,\n            codeChallengeMethod: \"S256\", // Use SHA256 Algorithm\n        };\n        const response = await this.publicApp.getAuthCodeUrl(authCodeUrlParameters);\n        try {\n            await interactiveBrowserMockable.open(response, { wait: true });\n        }\n        catch (e) {\n            throw new CredentialUnavailableError(`InteractiveBrowserCredential: Could not open a browser window. Error: ${e.message}`);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger$3 = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nclass InteractiveBrowserCredential {\n    /**\n     * Creates an instance of InteractiveBrowserCredential with the details needed.\n     *\n     * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n     *\n     * For Node.js, if a `clientId` is provided, the Azure Active Directory application will need to be configured to have a \"Mobile and desktop applications\" redirect endpoint.\n     * Follow our guide on [setting up Redirect URIs for Desktop apps that calls to web APIs](https://docs.microsoft.com/azure/active-directory/develop/scenario-desktop-app-registration#redirect-uris).\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */\n    constructor(options = {}) {\n        const redirectUri = typeof options.redirectUri === \"function\"\n            ? options.redirectUri()\n            : options.redirectUri || \"http://localhost\";\n        this.msalFlow = new MsalOpenBrowser(Object.assign(Object.assign({}, options), { tokenCredentialOptions: options, logger: logger$3,\n            redirectUri }));\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), { disableAutomaticAuthentication: this.disableAutomaticAuthentication }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * On Node.js, this credential has [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636) enabled by default.\n     * PKCE is a security feature that mitigates authentication code interception attacks.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return trace(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * MSAL device code client. Calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`.\n * @internal\n */\nclass MsalDeviceCode extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.userPromptCallback = options.userPromptCallback;\n    }\n    async doGetToken(scopes, options) {\n        try {\n            const requestOptions = {\n                deviceCodeCallback: this.userPromptCallback,\n                scopes,\n                cancel: false,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims,\n            };\n            const promise = this.publicApp.acquireTokenByDeviceCode(requestOptions);\n            // TODO:\n            // This should work, but it currently doesn't. I'm waiting for an answer from the MSAL team.\n            const deviceResponse = await this.withCancellation(promise, options === null || options === void 0 ? void 0 : options.abortSignal, () => {\n                requestOptions.cancel = true;\n            });\n            return this.handleResult(scopes, this.clientId, deviceResponse || undefined);\n        }\n        catch (error) {\n            throw this.handleError(scopes, error, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger$2 = credentialLogger(\"DeviceCodeCredential\");\n/**\n * Method that logs the user code from the DeviceCodeCredential.\n * @param deviceCodeInfo - The device code.\n */\nfunction defaultDeviceCodePromptCallback(deviceCodeInfo) {\n    console.log(deviceCodeInfo.message);\n}\n/**\n * Enables authentication to Azure Active Directory using a device code\n * that the user can enter into https://microsoft.com/devicelogin.\n */\nclass DeviceCodeCredential {\n    /**\n     * Creates an instance of DeviceCodeCredential with the details needed\n     * to initiate the device code authorization flow with Azure Active Directory.\n     *\n     * A message will be logged, giving users a code that they can use to authenticate once they go to https://microsoft.com/devicelogin\n     *\n     * Developers can configure how this message is shown by passing a custom `userPromptCallback`:\n     *\n     * ```js\n     * const credential = new DeviceCodeCredential({\n     *   tenantId: env.AZURE_TENANT_ID,\n     *   clientId: env.AZURE_CLIENT_ID,\n     *   userPromptCallback: (info) => {\n     *     console.log(\"CUSTOMIZED PROMPT CALLBACK\", info.message);\n     *   }\n     * });\n     * ```\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */\n    constructor(options) {\n        this.msalFlow = new MsalDeviceCode(Object.assign(Object.assign({}, options), { logger: logger$2, userPromptCallback: (options === null || options === void 0 ? void 0 : options.userPromptCallback) || defaultDeviceCodePromptCallback, tokenCredentialOptions: options || {} }));\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), { disableAutomaticAuthentication: this.disableAutomaticAuthentication }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return trace(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * This MSAL client sets up a web server to listen for redirect callbacks, then calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`\n * to trigger the authentication flow, and then respond based on the values obtained from the redirect callback\n * @internal\n */\nclass MsalAuthorizationCode extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.logger = credentialLogger(\"Node.js MSAL Authorization Code\");\n        this.redirectUri = options.redirectUri;\n        this.authorizationCode = options.authorizationCode;\n        if (options.clientSecret) {\n            this.msalConfig.auth.clientSecret = options.clientSecret;\n        }\n    }\n    async getAuthCodeUrl(options) {\n        await this.init();\n        return this.confidentialApp.getAuthCodeUrl(options);\n    }\n    async doGetToken(scopes, options) {\n        var _a;\n        try {\n            const result = await ((_a = this.confidentialApp) === null || _a === void 0 ? void 0 : _a.acquireTokenByCode({\n                scopes,\n                redirectUri: this.redirectUri,\n                code: this.authorizationCode,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims,\n            }));\n            // The Client Credential flow does not return an account,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        }\n        catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger$1 = credentialLogger(\"AuthorizationCodeCredential\");\n/**\n * Enables authentication to Azure Active Directory using an authorization code\n * that was obtained through the authorization code flow, described in more detail\n * in the Azure Active Directory documentation:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\n */\nclass AuthorizationCodeCredential {\n    /**\n     * @hidden\n     * @internal\n     */\n    constructor(tenantId, clientId, clientSecretOrAuthorizationCode, authorizationCodeOrRedirectUri, redirectUriOrOptions, options) {\n        checkTenantId(logger$1, tenantId);\n        let clientSecret = clientSecretOrAuthorizationCode;\n        if (typeof redirectUriOrOptions === \"string\") {\n            // the clientId+clientSecret constructor\n            this.authorizationCode = authorizationCodeOrRedirectUri;\n            this.redirectUri = redirectUriOrOptions;\n            // in this case, options are good as they come\n        }\n        else {\n            // clientId only\n            this.authorizationCode = clientSecretOrAuthorizationCode;\n            this.redirectUri = authorizationCodeOrRedirectUri;\n            clientSecret = undefined;\n            options = redirectUriOrOptions;\n        }\n        this.msalFlow = new MsalAuthorizationCode(Object.assign(Object.assign({}, options), { clientSecret,\n            clientId, tokenCredentialOptions: options || {}, logger: logger$1, redirectUri: this.redirectUri, authorizationCode: this.authorizationCode }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), { disableAutomaticAuthentication: this.disableAutomaticAuthentication }));\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * MSAL on behalf of flow. Calls to MSAL's confidential application's `acquireTokenOnBehalfOf` during `doGetToken`.\n * @internal\n */\nclass MsalOnBehalfOf extends MsalNode {\n    constructor(options) {\n        super(options);\n        this.logger.info(\"Initialized MSAL's On-Behalf-Of flow\");\n        this.requiresConfidential = true;\n        this.userAssertionToken = options.userAssertionToken;\n        this.certificatePath = options.certificatePath;\n        this.sendCertificateChain = options.sendCertificateChain;\n        this.clientSecret = options.clientSecret;\n    }\n    // Changing the MSAL configuration asynchronously\n    async init(options) {\n        if (this.certificatePath) {\n            try {\n                const parts = await parseCertificate({ certificatePath: this.certificatePath }, this.sendCertificateChain);\n                this.msalConfig.auth.clientCertificate = {\n                    thumbprint: parts.thumbprint,\n                    privateKey: parts.certificateContents,\n                    x5c: parts.x5c,\n                };\n            }\n            catch (error) {\n                this.logger.info(formatError(\"\", error));\n                throw error;\n            }\n        }\n        else {\n            this.msalConfig.auth.clientSecret = this.clientSecret;\n        }\n        return super.init(options);\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const result = await this.confidentialApp.acquireTokenOnBehalfOf({\n                scopes,\n                correlationId: options.correlationId,\n                authority: options.authority,\n                claims: options.claims,\n                oboAssertion: this.userAssertionToken,\n            });\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        }\n        catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst credentialName = \"OnBehalfOfCredential\";\nconst logger = credentialLogger(credentialName);\n/**\n * Enables authentication to Azure Active Directory using the [On Behalf Of flow](https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow).\n */\nclass OnBehalfOfCredential {\n    /**\n     * Creates an instance of the {@link OnBehalfOfCredential} with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * secret or a path to a PEM certificate, and an user assertion.\n     *\n     * Example using the `KeyClient` from [\\@azure/keyvault-keys](https://www.npmjs.com/package/\\@azure/keyvault-keys):\n     *\n     * ```ts\n     * const tokenCredential = new OnBehalfOfCredential({\n     *   tenantId,\n     *   clientId,\n     *   clientSecret, // or `certificatePath: \"/path/to/certificate.pem\"\n     *   userAssertionToken: \"access-token\"\n     * });\n     * const client = new KeyClient(\"vault-url\", tokenCredential);\n     *\n     * await client.getKey(\"key-name\");\n     * ```\n     *\n     * @param options - Optional parameters, generally common across credentials.\n     */\n    constructor(options) {\n        this.options = options;\n        const { clientSecret } = options;\n        const { certificatePath } = options;\n        const { tenantId, clientId, userAssertionToken } = options;\n        if (!tenantId || !clientId || !(clientSecret || certificatePath) || !userAssertionToken) {\n            throw new Error(`${credentialName}: tenantId, clientId, clientSecret (or certificatePath) and userAssertionToken are required parameters.`);\n        }\n        this.msalFlow = new MsalOnBehalfOf(Object.assign(Object.assign({}, this.options), { logger, tokenCredentialOptions: this.options }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure the underlying network requests.\n     */\n    async getToken(scopes, options = {}) {\n        return trace(`${credentialName}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Returns a new instance of the {@link DefaultAzureCredential}.\n */\nfunction getDefaultAzureCredential() {\n    return new DefaultAzureCredential();\n}\n\nexports.AggregateAuthenticationError = AggregateAuthenticationError;\nexports.AggregateAuthenticationErrorName = AggregateAuthenticationErrorName;\nexports.AuthenticationError = AuthenticationError;\nexports.AuthenticationErrorName = AuthenticationErrorName;\nexports.AuthenticationRequiredError = AuthenticationRequiredError;\nexports.AuthorizationCodeCredential = AuthorizationCodeCredential;\nexports.AzureCliCredential = AzureCliCredential;\nexports.AzurePowerShellCredential = AzurePowerShellCredential;\nexports.ChainedTokenCredential = ChainedTokenCredential;\nexports.ClientCertificateCredential = ClientCertificateCredential;\nexports.ClientSecretCredential = ClientSecretCredential;\nexports.CredentialUnavailableError = CredentialUnavailableError;\nexports.CredentialUnavailableErrorName = CredentialUnavailableErrorName;\nexports.DefaultAzureCredential = DefaultAzureCredential;\nexports.DeviceCodeCredential = DeviceCodeCredential;\nexports.EnvironmentCredential = EnvironmentCredential;\nexports.InteractiveBrowserCredential = InteractiveBrowserCredential;\nexports.ManagedIdentityCredential = ManagedIdentityCredential;\nexports.OnBehalfOfCredential = OnBehalfOfCredential;\nexports.UsernamePasswordCredential = UsernamePasswordCredential;\nexports.VisualStudioCodeCredential = VisualStudioCodeCredential;\nexports.deserializeAuthenticationRecord = deserializeAuthenticationRecord;\nexports.getDefaultAzureCredential = getDefaultAzureCredential;\nexports.logger = logger$j;\nexports.serializeAuthenticationRecord = serializeAuthenticationRecord;\nexports.useIdentityPlugin = useIdentityPlugin;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar coreRestPipeline = require('@azure/core-rest-pipeline');\nvar logger = require('@azure/logger');\nrequire('@azure/core-asynciterator-polyfill');\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    // Buffer.from accepts <ArrayBuffer> | <SharedArrayBuffer>-- the TypeScript definition is off here\n    // https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            // Validate Constraints if any\n            this.validateConstraints(mapper, object, objectName);\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY,\n            },\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" &&\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob)) {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, or NodeJS.ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!isDuration(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n                        parentObject[XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_a = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _a !== void 0 ? _a : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            for (const item of paths) {\n                if (!res)\n                    break;\n                res = res[item];\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            if (discriminatorValue !== undefined && discriminatorValue !== null) {\n                const typeName = mapper.type.uberParent || mapper.type.className;\n                const indexDiscriminator = discriminatorValue === typeName\n                    ? discriminatorValue\n                    : typeName + \".\" + discriminatorValue;\n                const polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nconst MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst operationRequestMap = new WeakMap();\nfunction getOperationRequestInfo(request) {\n    let info = operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        operationRequestMap.set(request, info);\n    }\n    return info;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nconst deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = getOperationRequestInfo(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = getOperationRequestInfo(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\");\n            }\n            catch (deserializeError) {\n                const restError = new coreRestPipeline.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new coreRestPipeline.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || coreRestPipeline.RestError.PARSE_ERROR;\n            const e = new coreRestPipeline.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nconst serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = getOperationRequestInfo(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = coreRestPipeline.createPipelineFromOptions(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n\n// Copyright (c) Microsoft Corporation.\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = coreRestPipeline.createDefaultHttpClient();\n    }\n    return cachedHttpClient;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = getPathStringFromParameter(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a;\n        this._requestContentType = options.requestContentType;\n        this._baseUri = options.baseUri;\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_a = options.additionalPolicies) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const baseUri = operationSpec.baseUrl || this._baseUri;\n        if (!baseUri) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = getRequestUrl(baseUri, operationSpec, operationArguments, this);\n        const request = coreRestPipeline.createPipelineRequest({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = getOperationRequestInfo(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        const scopes = options.credentialScopes;\n        return Array.isArray(scopes)\n            ? scopes.map((scope) => new URL(scope).toString())\n            : new URL(scopes).toString();\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a baseUri or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst defaultLogger = logger.createClientLogger(\"authorizeRequestOnClaimChallenge\");\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nfunction parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nasync function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || defaultLogger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: decodeStringToString(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    return true;\n}\n\nexports.MapperTypeNames = MapperTypeNames;\nexports.ServiceClient = ServiceClient;\nexports.XML_ATTRKEY = XML_ATTRKEY;\nexports.XML_CHARKEY = XML_CHARKEY;\nexports.authorizeRequestOnClaimChallenge = authorizeRequestOnClaimChallenge;\nexports.createClientPipeline = createClientPipeline;\nexports.createSerializer = createSerializer;\nexports.deserializationPolicy = deserializationPolicy;\nexports.deserializationPolicyName = deserializationPolicyName;\nexports.serializationPolicy = serializationPolicy;\nexports.serializationPolicyName = serializationPolicyName;\n//# sourceMappingURL=index.js.map\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar FormData = require('form-data');\nvar logger$1 = require('@azure/logger');\nvar url = require('url');\nvar httpsProxyAgent$1 = require('https-proxy-agent');\nvar httpProxyAgent$1 = require('http-proxy-agent');\nvar coreTracing = require('@azure/core-tracing');\nvar os = require('os');\nvar abortController = require('@azure/abort-controller');\nvar http = require('http');\nvar https = require('https');\nvar zlib = require('zlib');\nvar stream = require('stream');\nvar util = require('util');\nvar uuid = require('uuid');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function (k) {\n            if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function () { return e[k]; }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\n\nvar FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData);\nvar os__namespace = /*#__PURE__*/_interopNamespace(os);\nvar http__namespace = /*#__PURE__*/_interopNamespace(http);\nvar https__namespace = /*#__PURE__*/_interopNamespace(https);\nvar zlib__namespace = /*#__PURE__*/_interopNamespace(zlib);\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies = []) {\n        this._policies = [];\n        this._policies = policies;\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        async sendRequest(request, next) {\n            // HEAD requests have no body\n            if (request.method !== \"HEAD\") {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            return next(request);\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                    request.formData = undefined;\n                }\n                else {\n                    prepareFormData(request.formData, request);\n                }\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    const requestForm = new FormData__default[\"default\"]();\n    for (const formKey of Object.keys(formData)) {\n        const formValue = formData[formKey];\n        if (Array.isArray(formValue)) {\n            for (const subValue of formValue) {\n                requestForm.append(formKey, subValue);\n            }\n        }\n        else {\n            requestForm.append(formKey, formValue);\n        }\n    }\n    request.body = requestForm;\n    request.formData = undefined;\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && contentType.indexOf(\"multipart/form-data\") !== -1) {\n        request.headers.set(\"Content-Type\", `multipart/form-data; boundary=${requestForm.getBoundary()}`);\n    }\n    try {\n        const contentLength = await new Promise((resolve, reject) => {\n            requestForm.getLength((err, length) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(length);\n                }\n            });\n        });\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    catch (e) {\n        // ignore setting the length if this fails\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst logger = logger$1.createClientLogger(\"core-rest-pipeline\");\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar _a;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n * @internal\n */\nconst isNode = typeof process !== \"undefined\" && Boolean(process.version) && Boolean((_a = process.versions) === null || _a === void 0 ? void 0 : _a.node);\n/**\n * A wrapper for setTimeout that resolves a promise after t milliseconds.\n * @internal\n * @param t - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @returns Resolved promise\n */\nfunction delay(t, value) {\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\n}\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n * @internal\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n/**\n * @internal\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n\n// Copyright (c) Microsoft Corporation.\nconst RedactedString = \"REDACTED\";\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || isObject(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null) {\n            return value;\n        }\n        const url$1 = new url.URL(value);\n        if (!url$1.search) {\n            return value;\n        }\n        for (const [key] of url$1.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url$1.searchParams.set(key, RedactedString);\n            }\n        }\n        return url$1.toString();\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger$1 = (_a = options.logger) !== null && _a !== void 0 ? _a : logger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger$1.enabled) {\n                return next(request);\n            }\n            logger$1(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger$1(`Response status code: ${response.status}`);\n            logger$1(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nconst proxyPolicyName = \"proxyPolicy\";\n/**\n * Stores the patterns specified in NO_PROXY environment variable.\n * @internal\n */\nconst globalNoProxyList = [];\nlet noProxyListLoaded = false;\n/** A cache of whether a host should bypass the proxy. */\nconst globalBypassedMap = new Map();\nlet httpsProxyAgent;\nlet httpProxyAgent;\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n/**\n * Check whether the host of a given `uri` matches any pattern in the no proxy list.\n * If there's a match, any request sent to the same host shouldn't have the proxy settings set.\n * This implementation is a port of https://github.com/Azure/azure-sdk-for-net/blob/8cca811371159e527159c7eb65602477898683e2/sdk/core/Azure.Core/src/Pipeline/Internal/HttpEnvironmentProxy.cs#L210\n */\nfunction isBypassed(uri, noProxyList, bypassedMap) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new url.URL(uri).hostname;\n    if (bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.has(host)) {\n        return bypassedMap.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nfunction loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    noProxyListLoaded = true;\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new url.URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password,\n    };\n}\n/**\n * @internal\n */\nfunction getProxyAgentOptions(proxySettings, requestHeaders) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new url.URL(proxySettings.host);\n    }\n    catch (_error) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${proxySettings.host}\".`);\n    }\n    const proxyAgentOptions = {\n        hostname: parsedProxyUrl.hostname,\n        port: proxySettings.port,\n        protocol: parsedProxyUrl.protocol,\n        headers: requestHeaders.toJSON(),\n    };\n    if (proxySettings.username && proxySettings.password) {\n        proxyAgentOptions.auth = `${proxySettings.username}:${proxySettings.password}`;\n    }\n    else if (proxySettings.username) {\n        proxyAgentOptions.auth = `${proxySettings.username}`;\n    }\n    return proxyAgentOptions;\n}\nfunction setProxyAgentOnRequest(request) {\n    const url$1 = new url.URL(request.url);\n    const isInsecure = url$1.protocol !== \"https:\";\n    const proxySettings = request.proxySettings;\n    if (proxySettings) {\n        if (isInsecure) {\n            if (!httpProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpProxyAgent = new httpProxyAgent$1.HttpProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpProxyAgent;\n        }\n        else {\n            if (!httpsProxyAgent) {\n                const proxyAgentOptions = getProxyAgentOptions(proxySettings, request.headers);\n                httpsProxyAgent = new httpsProxyAgent$1.HttpsProxyAgent(proxyAgentOptions);\n            }\n            request.agent = httpsProxyAgent;\n        }\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nfunction proxyPolicy(proxySettings = getDefaultProxySettings(), options) {\n    if (!noProxyListLoaded) {\n        globalNoProxyList.push(...loadNoProxy());\n    }\n    return {\n        name: proxyPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.proxySettings &&\n                !isBypassed(request.url, (_a = options === null || options === void 0 ? void 0 : options.customNoProxyList) !== null && _a !== void 0 ? _a : globalNoProxyList, (options === null || options === void 0 ? void 0 : options.customNoProxyList) ? undefined : globalBypassedMap)) {\n                request.proxySettings = proxySettings;\n            }\n            if (request.proxySettings) {\n                setProxyAgentOnRequest(request);\n            }\n            return next(request);\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url$1 = new url.URL(locationHeader, request.url);\n        request.url = url$1.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nfunction setPlatformSpecificData(map) {\n    map.set(\"Node\", process.version);\n    map.set(\"OS\", `(${os__namespace.arch()}-${os__namespace.type()}-${os__namespace.release()})`);\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst SDK_VERSION = \"1.5.0\";\n\n// Copyright (c) Microsoft Corporation.\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return getHeaderName();\n}\n/**\n * @internal\n */\nfunction getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n    setPlatformSpecificData(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n\n// Copyright (c) Microsoft Corporation.\nconst createSpan = coreTracing.createSpanFunction({\n    packagePrefix: \"\",\n    namespace: \"\",\n});\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgent = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                return next(request);\n            }\n            const span = tryCreateSpan(request, userAgent);\n            if (!span) {\n                return next(request);\n            }\n            try {\n                const response = await next(request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateSpan(request, userAgent) {\n    var _a, _b, _c;\n    try {\n        const createSpanOptions = Object.assign(Object.assign({}, (_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.spanOptions), { kind: coreTracing.SpanKind.CLIENT });\n        // Passing spanOptions as part of tracingOptions to maintain compatibility @azure/core-tracing@preview.13 and earlier.\n        // We can pass this as a separate parameter once we upgrade to the latest core-tracing.\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span } = createSpan(`HTTP ${request.method}`, {\n            tracingOptions: Object.assign(Object.assign({}, request.tracingOptions), { spanOptions: createSpanOptions }),\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        const namespaceFromContext = (_c = (_b = request.tracingOptions) === null || _b === void 0 ? void 0 : _b.tracingContext) === null || _c === void 0 ? void 0 : _c.getValue(Symbol.for(\"az.namespace\"));\n        if (typeof namespaceFromContext === \"string\") {\n            span.setAttribute(\"az.namespace\", namespaceFromContext);\n        }\n        span.setAttributes({\n            \"http.method\": request.method,\n            \"http.url\": request.url,\n            requestId: request.requestId,\n        });\n        if (userAgent) {\n            span.setAttribute(\"http.user_agent\", userAgent);\n        }\n        // set headers\n        const spanContext = span.spanContext();\n        const traceParentHeader = coreTracing.getTraceParentHeader(spanContext);\n        if (traceParentHeader && coreTracing.isSpanContextValid(spanContext)) {\n            request.headers.set(\"traceparent\", traceParentHeader);\n            const traceState = spanContext.traceState && spanContext.traceState.serialize();\n            // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent\n            if (traceState) {\n                request.headers.set(\"tracestate\", traceState);\n            }\n        }\n        return span;\n    }\n    catch (error) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${error.message}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, err) {\n    try {\n        span.setStatus({\n            code: coreTracing.SpanStatusCode.ERROR,\n            message: err.message,\n        });\n        if (err.statusCode) {\n            span.setAttribute(\"http.status_code\", err.statusCode);\n        }\n        span.end();\n    }\n    catch (error) {\n        logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            code: coreTracing.SpanStatusCode.OK,\n        });\n        span.end();\n    }\n    catch (error) {\n        logger.warning(`Skipping tracing span processing due to an error: ${error.message}`);\n    }\n}\n\n// Copyright (c) Microsoft Corporation.\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Returns the number of milliseconds to wait based on a Retry-After header value.\n * Returns undefined if there is no valid value.\n * @param headerValue - An HTTP Retry-After header value.\n */\nfunction parseRetryAfterHeader(headerValue) {\n    try {\n        const retryAfterInSeconds = Number(headerValue);\n        if (!Number.isNaN(retryAfterInSeconds)) {\n            return retryAfterInSeconds * 1000;\n        }\n        else {\n            // It might be formatted as a date instead of a number of seconds\n            const now = Date.now();\n            const date = Date.parse(headerValue);\n            const diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as the Retry-After header has a valid value.\n */\nfunction isThrottlingRetryResponse(response) {\n    return Boolean(response &&\n        (response.status === 429 || response.status === 503) &&\n        response.headers.get(\"Retry-After\") &&\n        parseRetryAfterHeader(response.headers.get(\"Retry-After\")));\n}\nfunction throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            if (!isThrottlingRetryResponse(response)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs: parseRetryAfterHeader(response.headers.get(\"Retry-After\")),\n            };\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nfunction exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    let retryAfterInMs = retryInterval;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError) {\n                return { errorToThrow: responseError };\n            }\n            // Exponentially increase the delay each time\n            const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n            // Don't let the delay exceed the maximum\n            const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n            // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n            // that retries across multiple clients don't occur simultaneously.\n            retryAfterInMs =\n                clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n            return { retryAfterInMs };\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nfunction isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\");\n}\n\n// Copyright (c) Microsoft Corporation.\nconst retryPolicyLogger = logger$1.createClientLogger(\"core-rest-pipeline retryPolicy\");\nconst DEFAULT_MAX_RETRIES = 10;\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nfunction retryPolicy(strategies, options = { maxRetries: DEFAULT_MAX_RETRIES }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            // eslint-disable-next-line no-constant-condition\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new abortController.AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : DEFAULT_MAX_RETRIES)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (response !== undefined) {\n                        return response;\n                    }\n                    throw responseError;\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await delay(retryAfterInMs);\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (response) {\n                    logger.info(`Returning the last received response.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\nconst DEFAULT_RETRY_POLICY_COUNT = 10;\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nconst defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nfunction defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    const pipeline = createEmptyPipeline();\n    if (isNode) {\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy());\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy());\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Retry\" });\n    return pipeline;\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value) });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n\n// Copyright (c) Microsoft Corporation.\nconst custom = util.inspect.custom;\n\n// Copyright (c) Microsoft Corporation.\nconst errorSanitizer = new Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        this.request = options.request;\n        this.response = options.response;\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [custom]() {\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n\n// Copyright (c) Microsoft Corporation.\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    return new Promise((resolve) => {\n        stream.on(\"close\", resolve);\n        stream.on(\"end\", resolve);\n        stream.on(\"error\", resolve);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends stream.Transform {\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        var _a, _b, _c;\n        const abortController$1 = new abortController.AbortController();\n        let abortListener;\n        if (request.abortSignal) {\n            if (request.abortSignal.aborted) {\n                throw new abortController.AbortError(\"The operation was aborted.\");\n            }\n            abortListener = (event) => {\n                if (event.type === \"abort\") {\n                    abortController$1.abort();\n                }\n            };\n            request.abortSignal.addEventListener(\"abort\", abortListener);\n        }\n        if (request.timeout > 0) {\n            setTimeout(() => {\n                abortController$1.abort();\n            }, request.timeout);\n        }\n        const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n        let body = request.body;\n        if (body && !request.headers.has(\"Content-Length\")) {\n            const bodyLength = getBodyLength(body);\n            if (bodyLength !== null) {\n                request.headers.set(\"Content-Length\", bodyLength);\n            }\n        }\n        let responseStream;\n        try {\n            if (body && request.onUploadProgress) {\n                const onUploadProgress = request.onUploadProgress;\n                const uploadReportStream = new ReportTransform(onUploadProgress);\n                uploadReportStream.on(\"error\", (e) => {\n                    logger.error(\"Error in upload progress\", e);\n                });\n                if (isReadableStream(body)) {\n                    body.pipe(uploadReportStream);\n                }\n                else {\n                    uploadReportStream.end(body);\n                }\n                body = uploadReportStream;\n            }\n            const res = await this.makeRequest(request, abortController$1, body);\n            const headers = getResponseHeaders(res);\n            const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n            const response = {\n                status,\n                headers,\n                request,\n            };\n            // Responses to HEAD must not have a body.\n            // If they do return a body, that body must be ignored.\n            if (request.method === \"HEAD\") {\n                res.destroy();\n                return response;\n            }\n            responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n            const onDownloadProgress = request.onDownloadProgress;\n            if (onDownloadProgress) {\n                const downloadReportStream = new ReportTransform(onDownloadProgress);\n                downloadReportStream.on(\"error\", (e) => {\n                    logger.error(\"Error in download progress\", e);\n                });\n                responseStream.pipe(downloadReportStream);\n                responseStream = downloadReportStream;\n            }\n            if (\n            // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n            ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(Number.POSITIVE_INFINITY)) ||\n                ((_c = request.streamResponseStatusCodes) === null || _c === void 0 ? void 0 : _c.has(response.status))) {\n                response.readableStreamBody = responseStream;\n            }\n            else {\n                response.bodyAsText = await streamToText(responseStream);\n            }\n            return response;\n        }\n        finally {\n            // clean up event listener\n            if (request.abortSignal && abortListener) {\n                let uploadStreamDone = Promise.resolve();\n                if (isReadableStream(body)) {\n                    uploadStreamDone = isStreamComplete(body);\n                }\n                let downloadStreamDone = Promise.resolve();\n                if (isReadableStream(responseStream)) {\n                    downloadStreamDone = isStreamComplete(responseStream);\n                }\n                Promise.all([uploadStreamDone, downloadStreamDone])\n                    .then(() => {\n                    var _a;\n                    // eslint-disable-next-line promise/always-return\n                    if (abortListener) {\n                        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                    }\n                })\n                    .catch((e) => {\n                    logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                });\n            }\n        }\n    }\n    makeRequest(request, abortController$1, body) {\n        var _a;\n        const url$1 = new url.URL(request.url);\n        const isInsecure = url$1.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url$1.hostname,\n            path: `${url$1.pathname}${url$1.search}`,\n            port: url$1.port,\n            method: request.method,\n            headers: request.headers.toJSON({ preserveCase: true }),\n        };\n        return new Promise((resolve, reject) => {\n            const req = isInsecure ? http__namespace.request(options, resolve) : https__namespace.request(options, resolve);\n            req.once(\"error\", (err) => {\n                var _a;\n                reject(new RestError(err.message, { code: (_a = err.code) !== null && _a !== void 0 ? _a : RestError.REQUEST_SEND_ERROR, request }));\n            });\n            abortController$1.signal.addEventListener(\"abort\", () => {\n                const abortError = new abortController.AbortError(\"The operation was aborted.\");\n                req.destroy(abortError);\n                reject(abortError);\n            });\n            if (body && isReadableStream(body)) {\n                body.pipe(req);\n            }\n            else if (body) {\n                if (typeof body === \"string\" || Buffer.isBuffer(body)) {\n                    req.end(body);\n                }\n                else if (isArrayBuffer(body)) {\n                    req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body));\n                }\n                else {\n                    logger.error(\"Unrecognized body type\", body);\n                    reject(new RestError(\"Unrecognized body type\"));\n                }\n            }\n            else {\n                // streams don't like \"undefined\" being passed as data\n                req.end();\n            }\n        });\n    }\n    getOrCreateAgent(request, isInsecure) {\n        if (!request.disableKeepAlive) {\n            if (isInsecure) {\n                if (!this.httpKeepAliveAgent) {\n                    this.httpKeepAliveAgent = new http__namespace.Agent({\n                        keepAlive: true,\n                    });\n                }\n                return this.httpKeepAliveAgent;\n            }\n            else {\n                if (!this.httpsKeepAliveAgent) {\n                    this.httpsKeepAliveAgent = new https__namespace.Agent({\n                        keepAlive: true,\n                    });\n                }\n                return this.httpsKeepAliveAgent;\n            }\n        }\n        else if (isInsecure) {\n            return http__namespace.globalAgent;\n        }\n        else {\n            return https__namespace.globalAgent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = createHttpHeaders();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = zlib__namespace.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = zlib__namespace.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n                reject(e);\n            }\n            else {\n                reject(new RestError(`Error reading response as text: ${e.message}`, {\n                    code: RestError.PARSE_ERROR,\n                }));\n            }\n        });\n    });\n}\n/** @internal */\nfunction getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nfunction createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return createNodeHttpClient();\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n * @internal\n */\nfunction generateUuid() {\n    return uuid.v4();\n}\n\n// Copyright (c) Microsoft Corporation.\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : createHttpHeaders();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || generateUuid();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a;\n    return retryPolicy([\n        exponentialRetryStrategy(Object.assign(Object.assign({}, options), { ignoreSystemErrors: true })),\n    ], {\n        maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : 10,\n    });\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest: retryPolicy([\n            exponentialRetryStrategy(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true })),\n        ], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : 10,\n        }).sendRequest,\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * Maximum number of retries for the throttling retry policy\n */\nconst DEFAULT_CLIENT_MAX_RETRY_COUNT = 10;\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nfunction throttlingRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: throttlingRetryPolicyName,\n        sendRequest: retryPolicy([throttlingRetryStrategy()], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_MAX_RETRY_COUNT,\n        }).sendRequest,\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        if (cycler.mustRefresh)\n            return refresh(scopes, tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a;\n    const { credential, scopes, challengeCallbacks, logger } = options;\n    const callbacks = Object.assign({ authorizeRequest: (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a !== void 0 ? _a : defaultAuthorizeRequest, authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge }, challengeCallbacks);\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? createTokenCycler(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            try {\n                response = await next(request);\n            }\n            catch (err) {\n                error = err;\n                response = err.response;\n            }\n            if (callbacks.authorizeRequestOnChallenge &&\n                (response === null || response === void 0 ? void 0 : response.status) === 401 &&\n                getChallenge(response)) {\n                // processes challenge\n                const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    response,\n                    getAccessToken,\n                    logger,\n                });\n                if (shouldSendRequest) {\n                    return next(request);\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n\nexports.RestError = RestError;\nexports.bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy;\nexports.bearerTokenAuthenticationPolicyName = bearerTokenAuthenticationPolicyName;\nexports.createDefaultHttpClient = createDefaultHttpClient;\nexports.createEmptyPipeline = createEmptyPipeline;\nexports.createHttpHeaders = createHttpHeaders;\nexports.createPipelineFromOptions = createPipelineFromOptions;\nexports.createPipelineRequest = createPipelineRequest;\nexports.decompressResponsePolicy = decompressResponsePolicy;\nexports.decompressResponsePolicyName = decompressResponsePolicyName;\nexports.defaultRetryPolicy = defaultRetryPolicy;\nexports.exponentialRetryPolicy = exponentialRetryPolicy;\nexports.exponentialRetryPolicyName = exponentialRetryPolicyName;\nexports.formDataPolicy = formDataPolicy;\nexports.formDataPolicyName = formDataPolicyName;\nexports.getDefaultProxySettings = getDefaultProxySettings;\nexports.logPolicy = logPolicy;\nexports.logPolicyName = logPolicyName;\nexports.ndJsonPolicy = ndJsonPolicy;\nexports.ndJsonPolicyName = ndJsonPolicyName;\nexports.proxyPolicy = proxyPolicy;\nexports.proxyPolicyName = proxyPolicyName;\nexports.redirectPolicy = redirectPolicy;\nexports.redirectPolicyName = redirectPolicyName;\nexports.retryPolicy = retryPolicy;\nexports.setClientRequestIdPolicy = setClientRequestIdPolicy;\nexports.setClientRequestIdPolicyName = setClientRequestIdPolicyName;\nexports.systemErrorRetryPolicy = systemErrorRetryPolicy;\nexports.systemErrorRetryPolicyName = systemErrorRetryPolicyName;\nexports.throttlingRetryPolicy = throttlingRetryPolicy;\nexports.throttlingRetryPolicyName = throttlingRetryPolicyName;\nexports.tracingPolicy = tracingPolicy;\nexports.tracingPolicyName = tracingPolicyName;\nexports.userAgentPolicy = userAgentPolicy;\nexports.userAgentPolicyName = userAgentPolicyName;\n//# sourceMappingURL=index.js.map\n",
    "/*! @azure/msal-common v4.5.1 2021-08-02 */\n'use strict';\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    // Default response type for authorization code flow\r\n    CODE_RESPONSE_TYPE: \"code\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\r\n};\r\nvar OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE\r\n];\r\nvar OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [\r\n    Constants.EMAIL_SCOPE\r\n]);\r\n/**\r\n * Request header names\r\n */\r\nvar HeaderNames;\r\n(function (HeaderNames) {\r\n    HeaderNames[\"CONTENT_TYPE\"] = \"Content-Type\";\r\n    HeaderNames[\"RETRY_AFTER\"] = \"Retry-After\";\r\n    HeaderNames[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\r\n})(HeaderNames || (HeaderNames = {}));\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nexports.PersistentCacheKeys = void 0;\r\n(function (PersistentCacheKeys) {\r\n    PersistentCacheKeys[\"ID_TOKEN\"] = \"idtoken\";\r\n    PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\r\n    PersistentCacheKeys[\"ADAL_ID_TOKEN\"] = \"adal.idtoken\";\r\n    PersistentCacheKeys[\"ERROR\"] = \"error\";\r\n    PersistentCacheKeys[\"ERROR_DESC\"] = \"error.description\";\r\n    PersistentCacheKeys[\"ACTIVE_ACCOUNT\"] = \"active-account\";\r\n})(exports.PersistentCacheKeys || (exports.PersistentCacheKeys = {}));\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nvar AADAuthorityConstants;\r\n(function (AADAuthorityConstants) {\r\n    AADAuthorityConstants[\"COMMON\"] = \"common\";\r\n    AADAuthorityConstants[\"ORGANIZATIONS\"] = \"organizations\";\r\n    AADAuthorityConstants[\"CONSUMERS\"] = \"consumers\";\r\n})(AADAuthorityConstants || (AADAuthorityConstants = {}));\r\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\r\nvar AADServerParamKeys;\r\n(function (AADServerParamKeys) {\r\n    AADServerParamKeys[\"CLIENT_ID\"] = \"client_id\";\r\n    AADServerParamKeys[\"REDIRECT_URI\"] = \"redirect_uri\";\r\n    AADServerParamKeys[\"RESPONSE_TYPE\"] = \"response_type\";\r\n    AADServerParamKeys[\"RESPONSE_MODE\"] = \"response_mode\";\r\n    AADServerParamKeys[\"GRANT_TYPE\"] = \"grant_type\";\r\n    AADServerParamKeys[\"CLAIMS\"] = \"claims\";\r\n    AADServerParamKeys[\"SCOPE\"] = \"scope\";\r\n    AADServerParamKeys[\"ERROR\"] = \"error\";\r\n    AADServerParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\r\n    AADServerParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    AADServerParamKeys[\"ID_TOKEN\"] = \"id_token\";\r\n    AADServerParamKeys[\"REFRESH_TOKEN\"] = \"refresh_token\";\r\n    AADServerParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\r\n    AADServerParamKeys[\"STATE\"] = \"state\";\r\n    AADServerParamKeys[\"NONCE\"] = \"nonce\";\r\n    AADServerParamKeys[\"PROMPT\"] = \"prompt\";\r\n    AADServerParamKeys[\"SESSION_STATE\"] = \"session_state\";\r\n    AADServerParamKeys[\"CLIENT_INFO\"] = \"client_info\";\r\n    AADServerParamKeys[\"CODE\"] = \"code\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE\"] = \"code_challenge\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE_METHOD\"] = \"code_challenge_method\";\r\n    AADServerParamKeys[\"CODE_VERIFIER\"] = \"code_verifier\";\r\n    AADServerParamKeys[\"CLIENT_REQUEST_ID\"] = \"client-request-id\";\r\n    AADServerParamKeys[\"X_CLIENT_SKU\"] = \"x-client-SKU\";\r\n    AADServerParamKeys[\"X_CLIENT_VER\"] = \"x-client-VER\";\r\n    AADServerParamKeys[\"X_CLIENT_OS\"] = \"x-client-OS\";\r\n    AADServerParamKeys[\"X_CLIENT_CPU\"] = \"x-client-CPU\";\r\n    AADServerParamKeys[\"X_CLIENT_CURR_TELEM\"] = \"x-client-current-telemetry\";\r\n    AADServerParamKeys[\"X_CLIENT_LAST_TELEM\"] = \"x-client-last-telemetry\";\r\n    AADServerParamKeys[\"X_MS_LIB_CAPABILITY\"] = \"x-ms-lib-capability\";\r\n    AADServerParamKeys[\"POST_LOGOUT_URI\"] = \"post_logout_redirect_uri\";\r\n    AADServerParamKeys[\"ID_TOKEN_HINT\"] = \"id_token_hint\";\r\n    AADServerParamKeys[\"DEVICE_CODE\"] = \"device_code\";\r\n    AADServerParamKeys[\"CLIENT_SECRET\"] = \"client_secret\";\r\n    AADServerParamKeys[\"CLIENT_ASSERTION\"] = \"client_assertion\";\r\n    AADServerParamKeys[\"CLIENT_ASSERTION_TYPE\"] = \"client_assertion_type\";\r\n    AADServerParamKeys[\"TOKEN_TYPE\"] = \"token_type\";\r\n    AADServerParamKeys[\"REQ_CNF\"] = \"req_cnf\";\r\n    AADServerParamKeys[\"OBO_ASSERTION\"] = \"assertion\";\r\n    AADServerParamKeys[\"REQUESTED_TOKEN_USE\"] = \"requested_token_use\";\r\n    AADServerParamKeys[\"ON_BEHALF_OF\"] = \"on_behalf_of\";\r\n    AADServerParamKeys[\"FOCI\"] = \"foci\";\r\n    AADServerParamKeys[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\r\n})(AADServerParamKeys || (AADServerParamKeys = {}));\r\n/**\r\n * Claims request keys\r\n */\r\nvar ClaimsRequestKeys;\r\n(function (ClaimsRequestKeys) {\r\n    ClaimsRequestKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    ClaimsRequestKeys[\"XMS_CC\"] = \"xms_cc\";\r\n})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nvar PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\"\r\n};\r\n/**\r\n * SSO Types - generated to populate hints\r\n */\r\nvar SSOTypes;\r\n(function (SSOTypes) {\r\n    SSOTypes[\"ACCOUNT\"] = \"account\";\r\n    SSOTypes[\"SID\"] = \"sid\";\r\n    SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\r\n    SSOTypes[\"ID_TOKEN\"] = \"id_token\";\r\n    SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\r\n    SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\r\n    SSOTypes[\"CONSUMERS\"] = \"consumers\";\r\n    SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\r\n    SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\r\n})(SSOTypes || (SSOTypes = {}));\r\n/**\r\n * Disallowed extra query parameters.\r\n */\r\n[\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nvar CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\"\r\n};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nexports.ResponseMode = void 0;\r\n(function (ResponseMode) {\r\n    ResponseMode[\"QUERY\"] = \"query\";\r\n    ResponseMode[\"FRAGMENT\"] = \"fragment\";\r\n    ResponseMode[\"FORM_POST\"] = \"form_post\";\r\n})(exports.ResponseMode || (exports.ResponseMode = {}));\r\n/**\r\n * allowed grant_type\r\n */\r\nvar GrantType;\r\n(function (GrantType) {\r\n    GrantType[\"IMPLICIT_GRANT\"] = \"implicit\";\r\n    GrantType[\"AUTHORIZATION_CODE_GRANT\"] = \"authorization_code\";\r\n    GrantType[\"CLIENT_CREDENTIALS_GRANT\"] = \"client_credentials\";\r\n    GrantType[\"RESOURCE_OWNER_PASSWORD_GRANT\"] = \"password\";\r\n    GrantType[\"REFRESH_TOKEN_GRANT\"] = \"refresh_token\";\r\n    GrantType[\"DEVICE_CODE_GRANT\"] = \"device_code\";\r\n    GrantType[\"JWT_BEARER\"] = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\r\n})(GrantType || (GrantType = {}));\r\n/**\r\n * Account types in Cache\r\n */\r\nexports.CacheAccountType = void 0;\r\n(function (CacheAccountType) {\r\n    CacheAccountType[\"MSSTS_ACCOUNT_TYPE\"] = \"MSSTS\";\r\n    CacheAccountType[\"ADFS_ACCOUNT_TYPE\"] = \"ADFS\";\r\n    CacheAccountType[\"MSAV1_ACCOUNT_TYPE\"] = \"MSA\";\r\n    CacheAccountType[\"GENERIC_ACCOUNT_TYPE\"] = \"Generic\"; // NTLM, Kerberos, FBA, Basic etc\r\n})(exports.CacheAccountType || (exports.CacheAccountType = {}));\r\n/**\r\n * Separators used in cache\r\n */\r\nvar Separators;\r\n(function (Separators) {\r\n    Separators[\"CACHE_KEY_SEPARATOR\"] = \"-\";\r\n    Separators[\"CLIENT_INFO_SEPARATOR\"] = \".\";\r\n})(Separators || (Separators = {}));\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexports.CredentialType = void 0;\r\n(function (CredentialType) {\r\n    CredentialType[\"ID_TOKEN\"] = \"IdToken\";\r\n    CredentialType[\"ACCESS_TOKEN\"] = \"AccessToken\";\r\n    CredentialType[\"ACCESS_TOKEN_WITH_AUTH_SCHEME\"] = \"AccessToken_With_AuthScheme\";\r\n    CredentialType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\r\n})(exports.CredentialType || (exports.CredentialType = {}));\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexports.CacheSchemaType = void 0;\r\n(function (CacheSchemaType) {\r\n    CacheSchemaType[\"ACCOUNT\"] = \"Account\";\r\n    CacheSchemaType[\"CREDENTIAL\"] = \"Credential\";\r\n    CacheSchemaType[\"ID_TOKEN\"] = \"IdToken\";\r\n    CacheSchemaType[\"ACCESS_TOKEN\"] = \"AccessToken\";\r\n    CacheSchemaType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\r\n    CacheSchemaType[\"APP_METADATA\"] = \"AppMetadata\";\r\n    CacheSchemaType[\"TEMPORARY\"] = \"TempCache\";\r\n    CacheSchemaType[\"TELEMETRY\"] = \"Telemetry\";\r\n    CacheSchemaType[\"UNDEFINED\"] = \"Undefined\";\r\n    CacheSchemaType[\"THROTTLING\"] = \"Throttling\";\r\n})(exports.CacheSchemaType || (exports.CacheSchemaType = {}));\r\n/**\r\n * Combine all cache types\r\n */\r\nexports.CacheType = void 0;\r\n(function (CacheType) {\r\n    CacheType[CacheType[\"ADFS\"] = 1001] = \"ADFS\";\r\n    CacheType[CacheType[\"MSA\"] = 1002] = \"MSA\";\r\n    CacheType[CacheType[\"MSSTS\"] = 1003] = \"MSSTS\";\r\n    CacheType[CacheType[\"GENERIC\"] = 1004] = \"GENERIC\";\r\n    CacheType[CacheType[\"ACCESS_TOKEN\"] = 2001] = \"ACCESS_TOKEN\";\r\n    CacheType[CacheType[\"REFRESH_TOKEN\"] = 2002] = \"REFRESH_TOKEN\";\r\n    CacheType[CacheType[\"ID_TOKEN\"] = 2003] = \"ID_TOKEN\";\r\n    CacheType[CacheType[\"APP_METADATA\"] = 3001] = \"APP_METADATA\";\r\n    CacheType[CacheType[\"UNDEFINED\"] = 9999] = \"UNDEFINED\";\r\n})(exports.CacheType || (exports.CacheType = {}));\r\n/**\r\n * More Cache related constants\r\n */\r\nvar APP_METADATA = \"appmetadata\";\r\nvar CLIENT_INFO = \"client_info\";\r\nvar THE_FAMILY_ID = \"1\";\r\nvar AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\r\n};\r\nvar AuthorityMetadataSource;\r\n(function (AuthorityMetadataSource) {\r\n    AuthorityMetadataSource[\"CONFIG\"] = \"config\";\r\n    AuthorityMetadataSource[\"CACHE\"] = \"cache\";\r\n    AuthorityMetadataSource[\"NETWORK\"] = \"network\";\r\n})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));\r\nvar SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_CUR_HEADER_BYTES: 80,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\"\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nexports.AuthenticationScheme = void 0;\r\n(function (AuthenticationScheme) {\r\n    AuthenticationScheme[\"POP\"] = \"pop\";\r\n    AuthenticationScheme[\"BEARER\"] = \"Bearer\";\r\n})(exports.AuthenticationScheme || (exports.AuthenticationScheme = {}));\r\n/**\r\n * Constants related to throttling\r\n */\r\nvar ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\r\n};\r\nvar Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nvar PasswordGrantConstants;\r\n(function (PasswordGrantConstants) {\r\n    PasswordGrantConstants[\"username\"] = \"username\";\r\n    PasswordGrantConstants[\"password\"] = \"password\";\r\n})(PasswordGrantConstants || (PasswordGrantConstants = {}));\r\n/**\r\n * Response codes\r\n */\r\nvar ResponseCodes;\r\n(function (ResponseCodes) {\r\n    ResponseCodes[ResponseCodes[\"httpSuccess\"] = 200] = \"httpSuccess\";\r\n    ResponseCodes[ResponseCodes[\"httpBadRequest\"] = 400] = \"httpBadRequest\";\r\n})(ResponseCodes || (ResponseCodes = {}));\r\n/**\r\n * Region Discovery Sources\r\n */\r\nvar RegionDiscoverySources;\r\n(function (RegionDiscoverySources) {\r\n    RegionDiscoverySources[\"FAILED_AUTO_DETECTION\"] = \"1\";\r\n    RegionDiscoverySources[\"INTERNAL_CACHE\"] = \"2\";\r\n    RegionDiscoverySources[\"ENVIRONMENT_VARIABLE\"] = \"3\";\r\n    RegionDiscoverySources[\"IMDS\"] = \"4\";\r\n})(RegionDiscoverySources || (RegionDiscoverySources = {}));\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nvar RegionDiscoveryOutcomes;\r\n(function (RegionDiscoveryOutcomes) {\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_MATCHES_DETECTED\"] = \"1\";\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_NO_AUTO_DETECTION\"] = \"2\";\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_NOT_DETECTED\"] = \"3\";\r\n    RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_SUCCESSFUL\"] = \"4\";\r\n    RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_FAILED\"] = \"5\";\r\n})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));\r\nvar CacheOutcome;\r\n(function (CacheOutcome) {\r\n    CacheOutcome[\"NO_CACHE_HIT\"] = \"0\";\r\n    CacheOutcome[\"FORCE_REFRESH\"] = \"1\";\r\n    CacheOutcome[\"NO_CACHED_ACCESS_TOKEN\"] = \"2\";\r\n    CacheOutcome[\"CACHED_ACCESS_TOKEN_EXPIRED\"] = \"3\";\r\n    CacheOutcome[\"REFRESH_CACHED_ACCESS_TOKEN\"] = \"4\";\r\n})(CacheOutcome || (CacheOutcome = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: \"unexpected_error\",\r\n        desc: \"Unexpected error in authentication.\"\r\n    }\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nvar AuthError = /** @class */ (function (_super) {\r\n    __extends(AuthError, _super);\r\n    function AuthError(errorCode, errorMessage, suberror) {\r\n        var _this = this;\r\n        var errorString = errorMessage ? errorCode + \": \" + errorMessage : errorCode;\r\n        _this = _super.call(this, errorString) || this;\r\n        Object.setPrototypeOf(_this, AuthError.prototype);\r\n        _this.errorCode = errorCode || Constants.EMPTY_STRING;\r\n        _this.errorMessage = errorMessage || \"\";\r\n        _this.subError = suberror || \"\";\r\n        _this.name = \"AuthError\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error that is thrown when something unexpected happens in the library.\r\n     * @param errDesc\r\n     */\r\n    AuthError.createUnexpectedError = function (errDesc) {\r\n        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + \": \" + errDesc);\r\n    };\r\n    return AuthError;\r\n}(Error));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: function () {\r\n        var notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Decode: function () {\r\n        var notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Encode: function () {\r\n        var notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    generatePkceCodes: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    getPublicKeyThumbprint: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    signJwt: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - signJwt() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    ClientAuthError.createClientInfoEmptyError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    ClientAuthError.createNetworkError = function (endpoint, errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    ClientAuthError.createStateMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    ClientAuthError.createStateNotFoundError = function (missingState) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    ClientAuthError.createNonceMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    ClientAuthError.createNonceNotFoundError = function (missingNonce) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    ClientAuthError.createNoTokensFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    ClientAuthError.createTokenRequestCannotBeMadeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    ClientAuthError.createAppendScopeSetError = function (appendError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\r\n    };\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    ClientAuthError.createEmptyInputScopeSetError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\r\n    };\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    ClientAuthError.createDeviceCodeCancelledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeExpiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeUnknownError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\r\n    };\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    ClientAuthError.createNoAccountInSilentRequestError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    ClientAuthError.createNullOrUndefinedCacheRecord = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    ClientAuthError.createInvalidCacheEnvironmentError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    };\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    ClientAuthError.createNoAccountFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    };\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    ClientAuthError.createCachePluginError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\r\n    };\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    ClientAuthError.createNoCryptoObjectError = function (operationName) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\r\n    };\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    ClientAuthError.createInvalidCacheTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    ClientAuthError.createUnexpectedAccountTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    ClientAuthError.createUnexpectedCredentialTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidAssertionError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidCredentialError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\r\n    };\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    ClientAuthError.createRefreshRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    ClientAuthError.createUserTimeoutReachedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    };\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    ClientAuthError.createTokenClaimsRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    ClientAuthError.createNoAuthCodeInServerResponseError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    StringUtils.decodeAuthToken = function (authToken) {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    StringUtils.isEmptyObj = function (strObj) {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                var obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    };\r\n    StringUtils.startsWith = function (str, search) {\r\n        return str.indexOf(search) === 0;\r\n    };\r\n    StringUtils.endsWith = function (str, search) {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var match; // Regex for replacing addition symbol with a space\r\n        var pl = /\\+/g;\r\n        var search = /([^&=]+)=([^&]*)/g;\r\n        var decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); };\r\n        var obj = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimArrayEntries = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim(); });\r\n    };\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    StringUtils.removeEmptyStringsFromArray = function (arr) {\r\n        return arr.filter(function (entry) {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    };\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    StringUtils.jsonParseHelper = function (str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    StringUtils.matchPattern = function (pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\r\n        return regex.test(input);\r\n    };\r\n    return StringUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nexports.LogLevel = void 0;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\r\n})(exports.LogLevel || (exports.LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(loggerOptions, packageName, packageVersion) {\r\n        // Current log level, defaults to info.\r\n        this.level = exports.LogLevel.Info;\r\n        var defaultLoggerCallback = function () { };\r\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\r\n        this.level = loggerOptions.logLevel || exports.LogLevel.Info;\r\n        this.correlationId = loggerOptions.correlationId || \"\";\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\r\n        return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId }, packageName, packageVersion);\r\n    };\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    Logger.prototype.logMessage = function (logMessage, options) {\r\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        var timestamp = new Date().toUTCString();\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        var logHeader;\r\n        if (!StringUtils.isEmpty(options.correlationId)) {\r\n            logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\r\n        }\r\n        else if (!StringUtils.isEmpty(this.correlationId)) {\r\n            logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\r\n        }\r\n        else {\r\n            logHeader = \"[\" + timestamp + \"]\";\r\n        }\r\n        var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + exports.LogLevel[options.logLevel] + \" - \" + logMessage;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    };\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    Logger.prototype.executeCallback = function (level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    };\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    Logger.prototype.error = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    Logger.prototype.errorPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    Logger.prototype.warning = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    Logger.prototype.warningPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    Logger.prototype.info = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    Logger.prototype.infoPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    Logger.prototype.verbose = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    Logger.prototype.verbosePii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    Logger.prototype.trace = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    Logger.prototype.tracePii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    Logger.prototype.isPiiLoggingEnabled = function () {\r\n        return this.piiLoggingEnabled || false;\r\n    };\r\n    return Logger;\r\n}());\n\n/* eslint-disable header/header */\r\nvar name = \"@azure/msal-common\";\r\nvar version = \"4.5.1\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n * }\r\n */\r\nvar CredentialEntity = /** @class */ (function () {\r\n    function CredentialEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    CredentialEntity.prototype.generateAccountId = function () {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    };\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    CredentialEntity.prototype.generateCredentialId = function () {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.prototype.generateTarget = function () {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    };\r\n    /**\r\n     * generates credential key\r\n     */\r\n    CredentialEntity.prototype.generateCredentialKey = function () {\r\n        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    CredentialEntity.prototype.generateType = function () {\r\n        switch (this.credentialType) {\r\n            case exports.CredentialType.ID_TOKEN:\r\n                return exports.CacheType.ID_TOKEN;\r\n            case exports.CredentialType.ACCESS_TOKEN:\r\n                return exports.CacheType.ACCESS_TOKEN;\r\n            case exports.CredentialType.REFRESH_TOKEN:\r\n                return exports.CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * helper function to return `CredentialType`\r\n     * @param key\r\n     */\r\n    CredentialEntity.getCredentialType = function (key) {\r\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\r\n        if (key.indexOf(exports.CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\r\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\r\n            if (key.indexOf(exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\r\n                return exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            }\r\n            return exports.CredentialType.ACCESS_TOKEN;\r\n        }\r\n        else if (key.indexOf(exports.CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\r\n            return exports.CredentialType.ID_TOKEN;\r\n        }\r\n        else if (key.indexOf(exports.CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\r\n            return exports.CredentialType.REFRESH_TOKEN;\r\n        }\r\n        return Constants.NOT_DEFINED;\r\n    };\r\n    /**\r\n     * generates credential key\r\n     */\r\n    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {\r\n        var credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n        ];\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\r\n        var accountId = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\r\n        var clientOrFamilyId = credentialType === exports.CredentialType.REFRESH_TOKEN\r\n            ? familyId || clientId\r\n            : clientId;\r\n        var credentialId = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || \"\",\r\n        ];\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.generateTargetForCacheKey = function (scopes) {\r\n        return (scopes || \"\").toLowerCase();\r\n    };\r\n    return CredentialEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\r\n    },\r\n    urlParseError: {\r\n        code: \"url_parse_error\",\r\n        desc: \"URL could not be parsed into appropriate segments.\"\r\n    },\r\n    urlEmptyError: {\r\n        code: \"empty_url_error\",\r\n        desc: \"URL was empty or null.\"\r\n    },\r\n    emptyScopesError: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\r\n    },\r\n    nonArrayScopesError: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientIdSingleScopeError: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: \"invalid_claims\",\r\n        desc: \"Given claims parameter must be a stringified JSON object.\"\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: \"token_request_empty\",\r\n        desc: \"Token request was empty and not found in cache.\"\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: \"logout_request_empty\",\r\n        desc: \"The logout request was null or undefined.\"\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: \"invalid_code_challenge_method\",\r\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: \"pkce_params_missing\",\r\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: \"invalid_cloud_discovery_metadata\",\r\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields\"\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: \"invalid_authority_metadata\",\r\n        desc: \"Invalid authorityMetadata provided. Must by a JSON object containing authorization_endpoint, token_endpoint, end_session_endpoint, issuer fields.\"\r\n    },\r\n    untrustedAuthority: {\r\n        code: \"untrusted_authority\",\r\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nvar ClientConfigurationError = /** @class */ (function (_super) {\r\n    __extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the claims request could not be successfully parsed\r\n     */\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if authority uri is given an insecure protocol.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string does not parse into separate segments.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlParseError = function (urlParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string is empty or null.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when scopes are empty.\r\n     * @param scopesValue\r\n     */\r\n    ClientConfigurationError.createEmptyScopesArrayError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when client id scope is not provided as single scope.\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\r\n    };\r\n    /**\r\n     * Error thrown when prompt is not an allowed type.\r\n     * @param promptValue\r\n     */\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\r\n    };\r\n    /**\r\n     * Creates error thrown when claims parameter is not a stringified JSON object\r\n     */\r\n    ClientConfigurationError.createInvalidClaimsRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyLogoutRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyTokenRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when an invalid code_challenge_method is passed by the user\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\r\n    };\r\n    /**\r\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided authority is not a member of the trusted host list\r\n     */\r\n    ClientConfigurationError.createUntrustedAuthorityError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet(inputScopes) {\r\n        var _this = this;\r\n        // Filter empty string and null/undefined array items\r\n        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\r\n        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    ScopeSet.fromString = function (inputScopeString) {\r\n        var scopeString = inputScopeString || \"\";\r\n        var inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    };\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    ScopeSet.prototype.validateInputScopes = function (inputScopes) {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    };\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.containsScope = function (scope) {\r\n        var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    };\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    ScopeSet.prototype.containsScopeSet = function (scopeSet) {\r\n        var _this = this;\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));\r\n    };\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    ScopeSet.prototype.containsOnlyOIDCScopes = function () {\r\n        var _this = this;\r\n        var defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            if (_this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    };\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    ScopeSet.prototype.appendScope = function (newScope) {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    };\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    ScopeSet.prototype.appendScopes = function (newScopes) {\r\n        var _this = this;\r\n        try {\r\n            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.removeScope = function (scope) {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    };\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    ScopeSet.prototype.removeOIDCScopes = function () {\r\n        var _this = this;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            _this.scopes.delete(defaultScope);\r\n        });\r\n    };\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.unionScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        var unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        return unionScopes;\r\n    };\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        var unionScopes = this.unionScopeSets(otherScopes);\r\n        var sizeOtherScopes = otherScopes.getScopeCount();\r\n        var sizeThisScopes = this.getScopeCount();\r\n        var sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    };\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    ScopeSet.prototype.getScopeCount = function () {\r\n        return this.scopes.size;\r\n    };\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    ScopeSet.prototype.asArray = function () {\r\n        var array = [];\r\n        this.scopes.forEach(function (val) { return array.push(val); });\r\n        return array;\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    ScopeSet.prototype.printScopes = function () {\r\n        if (this.scopes) {\r\n            var scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    ScopeSet.prototype.printScopesLowerCase = function () {\r\n        return this.printScopes().toLowerCase();\r\n    };\r\n    return ScopeSet;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, crypto) {\r\n    if (StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError();\r\n    }\r\n    try {\r\n        var decodedClientInfo = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError(e);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (StringUtils.isEmpty(homeAccountId)) {\r\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\r\n    }\r\n    var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nexports.AuthorityType = void 0;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n})(exports.AuthorityType || (exports.AuthorityType = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\r\nvar AccountEntity = /** @class */ (function () {\r\n    function AccountEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    AccountEntity.prototype.generateAccountId = function () {\r\n        var accountId = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    AccountEntity.prototype.generateAccountKey = function () {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    AccountEntity.prototype.generateType = function () {\r\n        switch (this.authorityType) {\r\n            case exports.CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return exports.CacheType.ADFS;\r\n            case exports.CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return exports.CacheType.MSA;\r\n            case exports.CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return exports.CacheType.MSSTS;\r\n            case exports.CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return exports.CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    AccountEntity.prototype.getAccountInfo = function () {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims\r\n        };\r\n    };\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    AccountEntity.generateAccountCacheKey = function (accountInterface) {\r\n        var accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || \"\",\r\n            accountInterface.tenantId || \"\",\r\n        ];\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var account = new AccountEntity();\r\n        account.authorityType = exports.CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n             */\r\n            account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\r\n            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\r\n        }\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        return account;\r\n    };\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\r\n        var _a, _b, _c, _d;\r\n        var account = new AccountEntity();\r\n        account.authorityType = (authority.authorityType === exports.AuthorityType.Adfs) ? exports.CacheAccountType.ADFS_ACCOUNT_TYPE : exports.CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\";\r\n            // upn claim for most ADFS scenarios\r\n            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\r\n            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\r\n            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\r\n        }\r\n        account.environment = env;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n        return account;\r\n    };\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\r\n        var _a;\r\n        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === exports.AuthorityType.Adfs) {\r\n            return accountId;\r\n        }\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccountEntity.isAccountEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    };\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            var accountAClaims = (accountA.idTokenClaims || {});\r\n            var accountBClaims = (accountB.idTokenClaims || {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n                (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            claimsMatch;\r\n    };\r\n    return AccountEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nvar AuthToken = /** @class */ (function () {\r\n    function AuthToken(rawToken, crypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    AuthToken.extractTokenClaims = function (encodedToken, crypto) {\r\n        var decodedToken = StringUtils.decodeAuthToken(encodedToken);\r\n        // token will be decoded to get the username\r\n        try {\r\n            var base64TokenPayload = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    };\r\n    return AuthToken;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nvar CacheManager = /** @class */ (function () {\r\n    function CacheManager(clientId, cryptoImpl) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n    }\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    CacheManager.prototype.getAllAccounts = function () {\r\n        var _this = this;\r\n        var currentAccounts = this.getAccountsFilteredBy();\r\n        var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });\r\n        var numAccounts = accountValues.length;\r\n        if (numAccounts < 1) {\r\n            return [];\r\n        }\r\n        else {\r\n            var allAccounts = accountValues.map(function (value) {\r\n                var accountEntity = CacheManager.toObject(new AccountEntity(), value);\r\n                var accountInfo = accountEntity.getAccountInfo();\r\n                var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);\r\n                if (idToken && !accountInfo.idTokenClaims) {\r\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, _this.cryptoImpl).claims;\r\n                }\r\n                return accountInfo;\r\n            });\r\n            return allAccounts;\r\n        }\r\n    };\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\r\n        if (!cacheRecord) {\r\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n        }\r\n        if (!!cacheRecord.account) {\r\n            this.setAccount(cacheRecord.account);\r\n        }\r\n        if (!!cacheRecord.idToken) {\r\n            this.setIdTokenCredential(cacheRecord.idToken);\r\n        }\r\n        if (!!cacheRecord.accessToken) {\r\n            this.saveAccessToken(cacheRecord.accessToken);\r\n        }\r\n        if (!!cacheRecord.refreshToken) {\r\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n        }\r\n        if (!!cacheRecord.appMetadata) {\r\n            this.setAppMetadata(cacheRecord.appMetadata);\r\n        }\r\n    };\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.saveAccessToken = function (credential) {\r\n        var _this = this;\r\n        var currentTokenCache = this.getCredentialsFilteredBy({\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n        });\r\n        var currentScopes = ScopeSet.fromString(credential.target);\r\n        var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });\r\n        if (currentAccessTokens) {\r\n            currentAccessTokens.forEach(function (tokenEntity) {\r\n                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    _this.removeCredential(tokenEntity);\r\n                }\r\n            });\r\n        }\r\n        this.setAccessTokenCredential(credential);\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\r\n        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : \"\", accountFilter ? accountFilter.environment : \"\", accountFilter ? accountFilter.realm : \"\");\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAccounts = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            var entity = _this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!realm && !_this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n            matchingAccounts[cacheKey] = entity;\r\n        });\r\n        return matchingAccounts;\r\n    };\r\n    /**\r\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.getCredentialsFilteredBy = function (filter) {\r\n        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);\r\n    };\r\n    /**\r\n     * Support function to help match credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingCredentials = {\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n        };\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-credential type cache entities\r\n            var credType = CredentialEntity.getCredentialType(cacheKey);\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getSpecificCredential(cacheKey, credType);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {\r\n                return;\r\n            }\r\n            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!realm && !_this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n            if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            if (!!familyId && !_this.matchFamilyId(entity, familyId)) {\r\n                return;\r\n            }\r\n            /*\r\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n             */\r\n            if (!!target && !_this.matchTarget(entity, target)) {\r\n                return;\r\n            }\r\n            switch (credType) {\r\n                case exports.CredentialType.ID_TOKEN:\r\n                    matchingCredentials.idTokens[cacheKey] = entity;\r\n                    break;\r\n                case exports.CredentialType.ACCESS_TOKEN:\r\n                case exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                    matchingCredentials.accessTokens[cacheKey] = entity;\r\n                    break;\r\n                case exports.CredentialType.REFRESH_TOKEN:\r\n                    matchingCredentials.refreshTokens[cacheKey] = entity;\r\n                    break;\r\n            }\r\n        });\r\n        return matchingCredentials;\r\n    };\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\r\n        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\r\n    };\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAppMetadata = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!_this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    };\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getAuthorityMetadataKeys();\r\n        var matchedEntity = null;\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    };\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    CacheManager.prototype.removeAllAccounts = function () {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            var entity = _this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            _this.removeAccount(cacheKey);\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccount = function (accountKey) {\r\n        var account = this.getAccount(accountKey);\r\n        if (!account) {\r\n            throw ClientAuthError.createNoAccountFoundError();\r\n        }\r\n        return (this.removeAccountContext(account) && this.removeItem(accountKey, exports.CacheSchemaType.ACCOUNT));\r\n    };\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccountContext = function (account) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var accountId = account.generateAccountId();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-credential type cache entities\r\n            var credType = CredentialEntity.getCredentialType(cacheKey);\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n            var cacheEntity = _this.getSpecificCredential(cacheKey, credType);\r\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\r\n                _this.removeCredential(cacheEntity);\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.removeCredential = function (credential) {\r\n        var key = credential.generateCredentialKey();\r\n        return this.removeItem(key, exports.CacheSchemaType.CREDENTIAL);\r\n    };\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    CacheManager.prototype.removeAppMetadata = function () {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            if (_this.isAppMetadata(cacheKey)) {\r\n                _this.removeItem(cacheKey, exports.CacheSchemaType.APP_METADATA);\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment, authScheme) {\r\n        var cachedAccount = this.readAccountFromCache(account);\r\n        var cachedIdToken = this.readIdTokenFromCache(clientId, account);\r\n        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\r\n        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\r\n        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    };\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.readAccountFromCache = function (account) {\r\n        var accountKey = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    };\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {\r\n        var idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: exports.CredentialType.ID_TOKEN,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);\r\n        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });\r\n        var numIdTokens = idTokens.length;\r\n        if (numIdTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes, authScheme) {\r\n        var credentialType = (authScheme === exports.AuthenticationScheme.POP) ? exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : exports.CredentialType.ACCESS_TOKEN;\r\n        var accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n            target: scopes.printScopesLowerCase(),\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {\r\n        var id = familyRT ? THE_FAMILY_ID : undefined;\r\n        var refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: exports.CredentialType.REFRESH_TOKEN,\r\n            clientId: clientId,\r\n            familyId: id\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\r\n        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });\r\n        var numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        return refreshTokens[0];\r\n    };\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {\r\n        var appMetadataFilter = {\r\n            environment: environment,\r\n            clientId: clientId,\r\n        };\r\n        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });\r\n        var numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n        return appMetadataEntries[0];\r\n    };\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {\r\n        var appMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\r\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\r\n    };\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {\r\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\r\n    };\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    CacheManager.prototype.matchEnvironment = function (entity, environment) {\r\n        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    };\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.matchClientId = function (entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    };\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    CacheManager.prototype.matchFamilyId = function (entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    };\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.matchRealm = function (entity, realm) {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    };\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.matchTarget = function (entity, target) {\r\n        var isNotAccessTokenCredential = (entity.credentialType !== exports.CredentialType.ACCESS_TOKEN && entity.credentialType !== exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        var entityScopeSet = ScopeSet.fromString(entity.target);\r\n        var requestTargetScopeSet = ScopeSet.fromString(target);\r\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\r\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\r\n        }\r\n        else {\r\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAppMetadata = function (key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAuthorityMetadata = function (key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    };\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\r\n        return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\r\n    };\r\n    /**\r\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n     * @param key\r\n     * @param credType\r\n     */\r\n    CacheManager.prototype.getSpecificCredential = function (key, credType) {\r\n        switch (credType) {\r\n            case exports.CredentialType.ID_TOKEN: {\r\n                return this.getIdTokenCredential(key);\r\n            }\r\n            case exports.CredentialType.ACCESS_TOKEN:\r\n            case exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\r\n                return this.getAccessTokenCredential(key);\r\n            }\r\n            case exports.CredentialType.REFRESH_TOKEN: {\r\n                return this.getRefreshTokenCredential(key);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    CacheManager.toObject = function (obj, json) {\r\n        for (var propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    };\r\n    return CacheManager;\r\n}());\r\nvar DefaultStorageClass = /** @class */ (function (_super) {\r\n    __extends(DefaultStorageClass, _super);\r\n    function DefaultStorageClass() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultStorageClass.prototype.setAccount = function () {\r\n        var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccount = function () {\r\n        var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.removeItem = function () {\r\n        var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.containsKey = function () {\r\n        var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getKeys = function () {\r\n        var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.clear = function () {\r\n        var notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    return DefaultStorageClass;\r\n}(CacheManager));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Token renewal offset default in seconds\r\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nvar DEFAULT_SYSTEM_OPTIONS = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false\r\n};\r\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: function () {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: exports.LogLevel.Info,\r\n    correlationId: \"\"\r\n};\r\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    sendGetRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    sendPostRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\r\nvar DEFAULT_LIBRARY_INFO = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: \"\",\r\n    os: \"\"\r\n};\r\nvar DEFAULT_CLIENT_CREDENTIALS = {\r\n    clientSecret: \"\",\r\n    clientAssertion: undefined\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nfunction buildClientConfiguration(_a) {\r\n    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),\r\n        loggerOptions: __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption),\r\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null\r\n    };\r\n}\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions) {\r\n    return __assign({ clientCapabilities: [] }, authOptions);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nvar ServerError = /** @class */ (function (_super) {\r\n    __extends(ServerError, _super);\r\n    function ServerError(errorCode, errorMessage, subError) {\r\n        var _this = _super.call(this, errorCode, errorMessage, subError) || this;\r\n        _this.name = \"ServerError\";\r\n        Object.setPrototypeOf(_this, ServerError.prototype);\r\n        return _this;\r\n    }\r\n    return ServerError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingUtils = /** @class */ (function () {\r\n    function ThrottlingUtils() {\r\n    }\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\r\n        return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\r\n        var _a;\r\n        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        var value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);\r\n                return;\r\n            }\r\n            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            var thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseStatus = function (response) {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseForRetryAfter = function (response) {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\r\n        var time = throttleTime <= 0 ? 0 : throttleTime;\r\n        var currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    };\r\n    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {\r\n        var thumbprint = {\r\n            clientId: clientId,\r\n            authority: authority,\r\n            scopes: scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier\r\n        };\r\n        var key = this.generateThrottlingStorageKey(thumbprint);\r\n        return cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);\r\n    };\r\n    return ThrottlingUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar NetworkManager = /** @class */ (function () {\r\n    function NetworkManager(networkClient, cacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof AuthError) {\r\n                            throw e_1;\r\n                        }\r\n                        else {\r\n                            throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\r\n                        }\r\n                    case 4:\r\n                        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return NetworkManager;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nexports.CcsCredentialType = void 0;\r\n(function (CcsCredentialType) {\r\n    CcsCredentialType[\"HOME_ACCOUNT_ID\"] = \"home_account_id\";\r\n    CcsCredentialType[\"UPN\"] = \"UPN\";\r\n})(exports.CcsCredentialType || (exports.CcsCredentialType = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\r\nvar BaseClient = /** @class */ (function () {\r\n    function BaseClient(configuration) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set the NetworkManager\r\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\r\n        var headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case exports.CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\r\n                            // Telemetry data successfully logged by server, clear Telemetry cache\r\n                            this.config.serverTelemetryManager.clearTelemetryCache();\r\n                        }\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    BaseClient.prototype.updateAuthority = function (updatedAuthority) {\r\n        if (!updatedAuthority.discoveryComplete()) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\r\n        }\r\n        this.authority = updatedAuthority;\r\n    };\r\n    return BaseClient;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nvar RequestValidator = /** @class */ (function () {\r\n    function RequestValidator() {\r\n    }\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    RequestValidator.validateRedirectUri = function (redirectUri) {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    RequestValidator.validatePrompt = function (prompt) {\r\n        var promptValues = [];\r\n        for (var value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    RequestValidator.validateClaims = function (claims) {\r\n        try {\r\n            JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n        else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\r\n        if ([\r\n            CodeChallengeMethodValues.PLAIN,\r\n            CodeChallengeMethodValues.S256\r\n        ].indexOf(codeChallengeMethod) < 0) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    };\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach(function (value, key) {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    return RequestValidator;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RequestParameterBuilder = /** @class */ (function () {\r\n    function RequestParameterBuilder() {\r\n        this.parameters = new Map();\r\n    }\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseTypeCode = function () {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\r\n    };\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : exports.ResponseMode.QUERY));\r\n    };\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\r\n        if (addOidcScopes === void 0) { addOidcScopes = true; }\r\n        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\r\n        var scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    };\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    RequestParameterBuilder.prototype.addClientId = function (clientId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    };\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    };\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    };\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\r\n    };\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    RequestParameterBuilder.prototype.addSid = function (sid) {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    };\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    };\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    };\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    };\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    RequestParameterBuilder.prototype.addPrompt = function (prompt) {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\r\n    };\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    RequestParameterBuilder.prototype.addState = function (state) {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    };\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    RequestParameterBuilder.prototype.addNonce = function (nonce) {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    };\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        }\r\n        else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addDeviceCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    };\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    };\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    };\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    };\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    };\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addGrantType = function (grantType) {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    };\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    RequestParameterBuilder.prototype.addClientInfo = function () {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    };\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\r\n        var _this = this;\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach(function (key) {\r\n            _this.parameters.set(key, eQparams[key]);\r\n        });\r\n    };\r\n    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims;\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        }\r\n        else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n        return JSON.stringify(mergedClaims);\r\n    };\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    RequestParameterBuilder.prototype.addUsername = function (username) {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    };\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    RequestParameterBuilder.prototype.addPassword = function (password) {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    };\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    };\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */\r\n    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    };\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    RequestParameterBuilder.prototype.addThrottling = function () {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    };\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    RequestParameterBuilder.prototype.createQueryString = function () {\r\n        var queryParameterArray = new Array();\r\n        this.parameters.forEach(function (value, key) {\r\n            queryParameterArray.push(key + \"=\" + value);\r\n        });\r\n        return queryParameterArray.join(\"&\");\r\n    };\r\n    return RequestParameterBuilder;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ID_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n * }\r\n */\r\nvar IdTokenEntity = /** @class */ (function (_super) {\r\n    __extends(IdTokenEntity, _super);\r\n    function IdTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create IdTokenEntity\r\n     * @param homeAccountId\r\n     * @param authenticationResult\r\n     * @param clientId\r\n     * @param authority\r\n     */\r\n    IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {\r\n        var idTokenEntity = new IdTokenEntity();\r\n        idTokenEntity.credentialType = exports.CredentialType.ID_TOKEN;\r\n        idTokenEntity.homeAccountId = homeAccountId;\r\n        idTokenEntity.environment = environment;\r\n        idTokenEntity.clientId = clientId;\r\n        idTokenEntity.secret = idToken;\r\n        idTokenEntity.realm = tenantId;\r\n        idTokenEntity.oboAssertion = oboAssertion;\r\n        return idTokenEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    IdTokenEntity.isIdTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity[\"credentialType\"] === exports.CredentialType.ID_TOKEN);\r\n    };\r\n    return IdTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    TimeUtils.nowSeconds = function () {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    /**\r\n     * check if a token is expired based on given UTC time in seconds.\r\n     * @param expiresOn\r\n     */\r\n    TimeUtils.isTokenExpired = function (expiresOn, offset) {\r\n        // check for access token expiry\r\n        var expirationSec = Number(expiresOn) || 0;\r\n        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\r\n        // If current time + offset is greater than token expiration time, then token is expired.\r\n        return (offsetCurrentTimeSec > expirationSec);\r\n    };\r\n    /**\r\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n     * i.e. The system clock was turned back after acquiring the cached token\r\n     * @param cachedAt\r\n     * @param offset\r\n     */\r\n    TimeUtils.wasClockTurnedBack = function (cachedAt) {\r\n        var cachedAtSec = Number(cachedAt);\r\n        return cachedAtSec > TimeUtils.nowSeconds();\r\n    };\r\n    /**\r\n     * Waits for t number of milliseconds\r\n     * @param t number\r\n     * @param value T\r\n     */\r\n    TimeUtils.delay = function (t, value) {\r\n        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });\r\n    };\r\n    return TimeUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\r\nvar AccessTokenEntity = /** @class */ (function (_super) {\r\n    __extends(AccessTokenEntity, _super);\r\n    function AccessTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create AccessTokenEntity\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param accessToken\r\n     * @param clientId\r\n     * @param tenantId\r\n     * @param scopes\r\n     * @param expiresOn\r\n     * @param extExpiresOn\r\n     */\r\n    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion) {\r\n        var _a;\r\n        var atEntity = new AccessTokenEntity();\r\n        atEntity.homeAccountId = homeAccountId;\r\n        atEntity.credentialType = exports.CredentialType.ACCESS_TOKEN;\r\n        atEntity.secret = accessToken;\r\n        var currentTime = TimeUtils.nowSeconds();\r\n        atEntity.cachedAt = currentTime.toString();\r\n        /*\r\n         * Token expiry time.\r\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n         */\r\n        atEntity.expiresOn = expiresOn.toString();\r\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\r\n        if (refreshOn) {\r\n            atEntity.refreshOn = refreshOn.toString();\r\n        }\r\n        atEntity.environment = environment;\r\n        atEntity.clientId = clientId;\r\n        atEntity.realm = tenantId;\r\n        atEntity.target = scopes;\r\n        atEntity.oboAssertion = oboAssertion;\r\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? exports.AuthenticationScheme.BEARER : tokenType;\r\n        // Create Access Token With AuthScheme instead of regular access token\r\n        if (atEntity.tokenType === exports.AuthenticationScheme.POP) {\r\n            atEntity.credentialType = exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            // Make sure keyId is present and add it to credential\r\n            var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\r\n            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\r\n                throw ClientAuthError.createTokenClaimsRequiredError();\r\n            }\r\n            atEntity.keyId = tokenClaims.cnf.kid;\r\n        }\r\n        return atEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccessTokenEntity.isAccessTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity.hasOwnProperty(\"target\") &&\r\n            (entity[\"credentialType\"] === exports.CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n    };\r\n    return AccessTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * REFRESH_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\r\n *\r\n * Value:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n * }\r\n */\r\nvar RefreshTokenEntity = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenEntity, _super);\r\n    function RefreshTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create RefreshTokenEntity\r\n     * @param homeAccountId\r\n     * @param authenticationResult\r\n     * @param clientId\r\n     * @param authority\r\n     */\r\n    RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {\r\n        var rtEntity = new RefreshTokenEntity();\r\n        rtEntity.clientId = clientId;\r\n        rtEntity.credentialType = exports.CredentialType.REFRESH_TOKEN;\r\n        rtEntity.environment = environment;\r\n        rtEntity.homeAccountId = homeAccountId;\r\n        rtEntity.secret = refreshToken;\r\n        rtEntity.oboAssertion = oboAssertion;\r\n        if (familyId)\r\n            rtEntity.familyId = familyId;\r\n        return rtEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    RefreshTokenEntity.isRefreshTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity[\"credentialType\"] === exports.CredentialType.REFRESH_TOKEN);\r\n    };\r\n    return RefreshTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * InteractionRequiredAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar InteractionRequiredAuthErrorMessage = [\r\n    \"interaction_required\",\r\n    \"consent_required\",\r\n    \"login_required\"\r\n];\r\nvar InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\"\r\n];\r\n/**\r\n * Error thrown when user interaction is required at the auth server.\r\n */\r\nvar InteractionRequiredAuthError = /** @class */ (function (_super) {\r\n    __extends(InteractionRequiredAuthError, _super);\r\n    function InteractionRequiredAuthError(errorCode, errorMessage, subError) {\r\n        var _this = _super.call(this, errorCode, errorMessage, subError) || this;\r\n        _this.name = \"InteractionRequiredAuthError\";\r\n        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\r\n        return _this;\r\n    }\r\n    InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {\r\n        var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredAuthErrorMessage.indexOf(errorCode) > -1;\r\n        var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n        var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredAuthErrorMessage.some(function (irErrorCode) {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\r\n    };\r\n    return InteractionRequiredAuthError;\r\n}(ServerError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar CacheRecord = /** @class */ (function () {\r\n    function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {\r\n        this.account = accountEntity || null;\r\n        this.idToken = idTokenEntity || null;\r\n        this.accessToken = accessTokenEntity || null;\r\n        this.refreshToken = refreshTokenEntity || null;\r\n        this.appMetadata = appMetadataEntity || null;\r\n    }\r\n    return CacheRecord;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nvar ProtocolUtils = /** @class */ (function () {\r\n    function ProtocolUtils() {\r\n    }\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\r\n        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\r\n    };\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        var stateObj = {\r\n            id: cryptoObj.createNewGuid()\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        var stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    };\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.parseRequestState = function (cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\r\n        }\r\n        if (StringUtils.isEmpty(state)) {\r\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            var splitState = state.split(Constants.RESOURCE_DELIM);\r\n            var libraryState = splitState[0];\r\n            var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\r\n            var libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            var libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\r\n                libraryState: libraryStateObj\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    };\r\n    return ProtocolUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            var lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Function to remove query string params from url. Returns the new url.\r\n     * @param url\r\n     * @param name\r\n     */\r\n    UrlString.prototype.urlRemoveQueryStringParameter = function (name) {\r\n        var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        return this.urlString;\r\n    };\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    UrlString.appendQueryString = function (url, queryString) {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\r\n    };\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    UrlString.removeHashFromUrl = function (url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        return UrlString.parseHash(this.urlString);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    };\r\n    UrlString.getDomainFromUrl = function (url) {\r\n        var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        var match = url.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\r\n        }\r\n        return match[2];\r\n    };\r\n    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            var url = new UrlString(baseUrl);\r\n            var baseComponents = url.getUrlComponents();\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        return relativeUrl;\r\n    };\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    UrlString.parseHash = function (hashString) {\r\n        var hashIndex1 = hashString.indexOf(\"#\");\r\n        var hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return \"\";\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedHash = function (hash) {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        var parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (hash) {\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return false;\r\n        }\r\n        var parameters = UrlString.getDeserializedHash(hash);\r\n        return !!(parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar KeyLocation;\r\n(function (KeyLocation) {\r\n    KeyLocation[\"SW\"] = \"sw\";\r\n    KeyLocation[\"UHW\"] = \"uhw\";\r\n})(KeyLocation || (KeyLocation = {}));\r\nvar PopTokenGenerator = /** @class */ (function () {\r\n    function PopTokenGenerator(cryptoUtils) {\r\n        this.cryptoUtils = cryptoUtils;\r\n    }\r\n    PopTokenGenerator.prototype.generateCnf = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var kidThumbprint, reqCnf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];\r\n                    case 1:\r\n                        kidThumbprint = _a.sent();\r\n                        reqCnf = {\r\n                            kid: kidThumbprint,\r\n                            xms_ksl: KeyLocation.SW\r\n                        };\r\n                        return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenClaims, resourceRequestMethod, resourceRequestUri, shrClaims, resourceUrlString, resourceUrlComponents;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\r\n                        resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims;\r\n                        resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n                        resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\r\n                        if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\r\n                            throw ClientAuthError.createTokenClaimsRequiredError();\r\n                        }\r\n                        return [4 /*yield*/, this.cryptoUtils.signJwt({\r\n                                at: accessToken,\r\n                                ts: TimeUtils.nowSeconds(),\r\n                                m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\r\n                                u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\r\n                                nonce: this.cryptoUtils.createNewGuid(),\r\n                                p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\r\n                                q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\r\n                                client_claims: shrClaims || undefined\r\n                            }, tokenClaims.cnf.kid)];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PopTokenGenerator;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * APP_METADATA Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: appmetadata-<environment>-<client_id>\r\n *\r\n * Value:\r\n * {\r\n *      clientId: client ID of the application\r\n *      environment: entity that issued the token, represented as a full host\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n * }\r\n */\r\nvar AppMetadataEntity = /** @class */ (function () {\r\n    function AppMetadataEntity() {\r\n    }\r\n    /**\r\n     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n     */\r\n    AppMetadataEntity.prototype.generateAppMetadataKey = function () {\r\n        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);\r\n    };\r\n    /**\r\n     * Generate AppMetadata Cache Key\r\n     */\r\n    AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {\r\n        var appMetaDataKeyArray = [\r\n            APP_METADATA,\r\n            environment,\r\n            clientId,\r\n        ];\r\n        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Creates AppMetadataEntity\r\n     * @param clientId\r\n     * @param environment\r\n     * @param familyId\r\n     */\r\n    AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {\r\n        var appMetadata = new AppMetadataEntity();\r\n        appMetadata.clientId = clientId;\r\n        appMetadata.environment = environment;\r\n        if (familyId) {\r\n            appMetadata.familyId = familyId;\r\n        }\r\n        return appMetadata;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AppMetadataEntity.isAppMetadataEntity = function (key, entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (key.indexOf(APP_METADATA) === 0 &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"environment\"));\r\n    };\r\n    return AppMetadataEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ var TokenCacheContext = /** @class */ (function () {\r\n    function TokenCacheContext(tokenCache, hasChanged) {\r\n        this.cache = tokenCache;\r\n        this.hasChanged = hasChanged;\r\n    }\r\n    Object.defineProperty(TokenCacheContext.prototype, \"cacheHasChanged\", {\r\n        /**\r\n         * boolean which indicates the changes in cache\r\n         */\r\n        get: function () {\r\n            return this.hasChanged;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TokenCacheContext.prototype, \"tokenCache\", {\r\n        /**\r\n         * function to retrieve the token cache\r\n         */\r\n        get: function () {\r\n            return this.cache;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return TokenCacheContext;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class that handles response parsing.\r\n */\r\nvar ResponseHandler = /** @class */ (function () {\r\n    function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n    }\r\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param cachedState\r\n     * @param cryptoObj\r\n     */\r\n    ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\r\n        if (!serverResponseHash.state || !cachedState) {\r\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\r\n            throw ClientAuthError.createStateMismatchError();\r\n        }\r\n        // Check for error\r\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n            }\r\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n        }\r\n        if (serverResponseHash.client_info) {\r\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\r\n        }\r\n    };\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     */\r\n    ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\r\n        // Check for error\r\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\r\n            }\r\n            var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\r\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (serverTokenResponse.id_token) {\r\n                            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\r\n                            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n                            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\r\n                                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\r\n                                    throw ClientAuthError.createNonceMismatchError();\r\n                                }\r\n                            }\r\n                        }\r\n                        // generate homeAccountId\r\n                        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\r\n                        if (!!authCodePayload && !!authCodePayload.state) {\r\n                            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n                        }\r\n                        cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, , 4, 7]);\r\n                        if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];\r\n                        this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                        cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                        return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        /*\r\n                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n                         * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n                         */\r\n                        if (handlingRefreshTokenResponse && cacheRecord.account) {\r\n                            key = cacheRecord.account.generateAccountKey();\r\n                            account = this.cacheStorage.getAccount(key);\r\n                            if (!account) {\r\n                                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\r\n                            }\r\n                        }\r\n                        this.cacheStorage.saveCacheRecord(cacheRecord);\r\n                        return [3 /*break*/, 7];\r\n                    case 4:\r\n                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 6];\r\n                        this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                        return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];\r\n                    case 5:\r\n                        _a.sent();\r\n                        _a.label = 6;\r\n                    case 6: return [7 /*endfinally*/];\r\n                    case 7: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, idTokenObj, requestScopes, oboAssertion, authCodePayload) {\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        var cachedIdToken;\r\n        var cachedAccount;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\r\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING, oboAssertion);\r\n            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);\r\n        }\r\n        // AccessToken\r\n        var cachedAccessToken = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\r\n            // If scopes not returned in server response, use request scopes\r\n            var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\r\n            var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\r\n            var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\r\n            var tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion);\r\n        }\r\n        // refreshToken\r\n        var cachedRefreshToken = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\r\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);\r\n        }\r\n        // appMetadata\r\n        var cachedAppMetadata = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\r\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\r\n        }\r\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\r\n    };\r\n    /**\r\n     * Generate Account\r\n     * @param serverTokenResponse\r\n     * @param idToken\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {\r\n        var authorityType = authority.authorityType;\r\n        var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\r\n        var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\r\n        // ADFS does not require client_info in the response\r\n        if (authorityType === exports.AuthorityType.Adfs) {\r\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\r\n            return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\r\n        }\r\n        // This fallback applies to B2C as well as they fall under an AAD account type.\r\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\r\n            throw ClientAuthError.createClientInfoEmptyError();\r\n        }\r\n        return serverTokenResponse.client_info ?\r\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :\r\n            AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\r\n    };\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState) {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        accessToken = \"\";\r\n                        responseScopes = [];\r\n                        expiresOn = null;\r\n                        familyId = Constants.EMPTY_STRING;\r\n                        if (!cacheRecord.accessToken) return [3 /*break*/, 4];\r\n                        if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                        return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];\r\n                    case 1:\r\n                        accessToken = _d.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        accessToken = cacheRecord.accessToken.secret;\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n                        _d.label = 4;\r\n                    case 4:\r\n                        if (cacheRecord.appMetadata) {\r\n                            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\r\n                        }\r\n                        uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\r\n                        tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\r\n                        return [2 /*return*/, {\r\n                                authority: authority.canonicalAuthority,\r\n                                uniqueId: uid,\r\n                                tenantId: tid,\r\n                                scopes: responseScopes,\r\n                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\r\n                                idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n                                idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n                                accessToken: accessToken,\r\n                                fromCache: fromTokenCache,\r\n                                expiresOn: expiresOn,\r\n                                extExpiresOn: extExpiresOn,\r\n                                familyId: familyId,\r\n                                tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\r\n                                state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\r\n                                cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\r\n                                msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return ResponseHandler;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createAuthCodeUrlQueryString(request);\r\n                return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        if (!request || StringUtils.isEmpty(request.code)) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        if (logoutRequest.account) {\r\n            // Clear given account.\r\n            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\r\n        }\r\n        else {\r\n            // Clear all accounts and tokens\r\n            this.cacheManager.clear();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI.\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        cnfString = _a.sent();\r\n                        parameterBuilder.addPopToken(cnfString);\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case exports.CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n        parameterBuilder.addScopes(requestScopes);\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n        // generate the correlationId if not set by the user and add\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            }\r\n            else if (request.account) {\r\n                var accountSid = this.extractAccountSid(request.account);\r\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    // SessionId is only used in silent calls\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n                else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                }\r\n                else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        if (account.idTokenClaims) {\r\n            var tokenClaims = account.idTokenClaims;\r\n            return tokenClaims.sid || null;\r\n        }\r\n        return null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 6];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        // user authorization is pending. Sleep for polling interval and try again\r\n                        this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 5: return [3 /*break*/, 1];\r\n                    case 6:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nvar RefreshTokenClient = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenClient, _super);\r\n    function RefreshTokenClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    RefreshTokenClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\r\n            return __generator(this, function (_a) {\r\n                // Cannot renew token if no request object is given.\r\n                if (!request) {\r\n                    throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                }\r\n                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                if (!request.account) {\r\n                    throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                }\r\n                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n                if (isFOCI) {\r\n                    try {\r\n                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\r\n                    }\r\n                    catch (e) {\r\n                        noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\r\n                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n                            // throw in all other cases\r\n                        }\r\n                        else {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                }\r\n                // fall back to application refresh token acquisition\r\n                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var refreshToken, refreshTokenRequest;\r\n            return __generator(this, function (_a) {\r\n                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n                // no refresh Token\r\n                if (!refreshToken) {\r\n                    throw ClientAuthError.createNoTokensFoundError();\r\n                }\r\n                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || exports.AuthenticationScheme.BEARER, ccsCredential: {\r\n                        credential: request.account.homeAccountId,\r\n                        type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                    } });\r\n                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, queryParameters, headers, thumbprint, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b, clientInfo;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        parameterBuilder.addRefreshToken(request.refreshToken);\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        _b = (_a = parameterBuilder).addPopToken;\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        _b.apply(_a, [_c.sent()]);\r\n                        _c.label = 2;\r\n                    case 2:\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n                            switch (request.ccsCredential.type) {\r\n                                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case exports.CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RefreshTokenClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nvar ClientCredentialClient = /** @class */ (function (_super) {\r\n    __extends(ClientCredentialClient, _super);\r\n    function ClientCredentialClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken) {\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: null,\r\n                                idToken: null,\r\n                                accessToken: cachedAccessToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads access token from the cache\r\n     * TODO: Move this call to cacheManager instead\r\n     */\r\n    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            homeAccountId: \"\",\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase()\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return ClientCredentialClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nvar OnBehalfOfClient = /** @class */ (function (_super) {\r\n    __extends(OnBehalfOfClient, _super);\r\n    function OnBehalfOfClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * look up cache for tokens\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken ||\r\n                            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Update the server telemetry outcome\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        cachedIdToken = this.readIdTokenFromCache(request);\r\n                        cachedAccount = null;\r\n                        if (cachedIdToken) {\r\n                            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n                            localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n                            accountInfo = {\r\n                                homeAccountId: cachedIdToken.homeAccountId,\r\n                                environment: cachedIdToken.environment,\r\n                                tenantId: cachedIdToken.realm,\r\n                                username: Constants.EMPTY_STRING,\r\n                                localAccountId: localAccountId || \"\"\r\n                            };\r\n                            cachedAccount = this.readAccountFromCache(accountInfo);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: cachedAccount,\r\n                                accessToken: cachedAccessToken,\r\n                                idToken: cachedIdToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request, idTokenObject)];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * read access token from cache TODO: CacheManager API should be used here\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase(),\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * read idtoken from cache TODO: CacheManager API should be used here instead\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\r\n        var idTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            oboAssertion: request.oboAssertion\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\r\n        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * read account from cache, TODO: CacheManager API should be used here instead\r\n     * @param account\r\n     */\r\n    OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\r\n        return this.cacheManager.readAccountFromCache(account);\r\n    };\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return OnBehalfOfClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SilentFlowClient = /** @class */ (function (_super) {\r\n    __extends(SilentFlowClient, _super);\r\n    function SilentFlowClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1, refreshTokenClient;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.acquireCachedToken(request)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                            refreshTokenClient = new RefreshTokenClient(this.config);\r\n                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\r\n                        }\r\n                        else {\r\n                            throw e_1;\r\n                        }\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireCachedToken = function (request) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestScopes, environment, authScheme, cacheRecord;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                        if (!request.account) {\r\n                            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                        }\r\n                        requestScopes = new ScopeSet(request.scopes || []);\r\n                        environment = request.authority || this.authority.getPreferredCache();\r\n                        authScheme = request.authenticationScheme || exports.AuthenticationScheme.BEARER;\r\n                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\r\n                        if (request.forceRefresh) {\r\n                            // Must refresh due to present force_refresh flag.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!cacheRecord.accessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Must refresh due to expired access_token.\r\n                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n                            // Must refresh due to the refresh_in value.\r\n                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!StringUtils.isEmptyObj(request.claims)) {\r\n                            // Must refresh due to request parameters.\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (cacheRecord.idToken) {\r\n                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SilentFlowClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, headers;\r\n            return __generator(this, function (_a) {\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes\r\n                };\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: exports.CcsCredentialType.UPN\r\n                });\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isOpenIdConfigResponse(response) {\r\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\r\n        response.hasOwnProperty(\"token_endpoint\") &&\r\n        response.hasOwnProperty(\"end_session_endpoint\") &&\r\n        response.hasOwnProperty(\"issuer\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nexports.ProtocolMode = void 0;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(exports.ProtocolMode || (exports.ProtocolMode = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar AuthorityMetadataEntity = /** @class */ (function () {\r\n    function AuthorityMetadataEntity() {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n    /**\r\n     * Update the entity with new aliases, preferred_cache and preferred_network values\r\n     * @param metadata\r\n     * @param fromNetwork\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {\r\n        this.aliases = metadata.aliases;\r\n        this.preferred_cache = metadata.preferred_cache;\r\n        this.preferred_network = metadata.preferred_network;\r\n        this.aliasesFromNetwork = fromNetwork;\r\n    };\r\n    /**\r\n     * Update the entity with new endpoints\r\n     * @param metadata\r\n     * @param fromNetwork\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {\r\n        this.authorization_endpoint = metadata.authorization_endpoint;\r\n        this.token_endpoint = metadata.token_endpoint;\r\n        this.end_session_endpoint = metadata.end_session_endpoint;\r\n        this.issuer = metadata.issuer;\r\n        this.endpointsFromNetwork = fromNetwork;\r\n    };\r\n    /**\r\n     * Save the authority that was used to create this cache entry\r\n     * @param authority\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {\r\n        this.canonical_authority = authority;\r\n    };\r\n    /**\r\n     * Reset the exiresAt value\r\n     */\r\n    AuthorityMetadataEntity.prototype.resetExpiresAt = function () {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    };\r\n    /**\r\n     * Returns whether or not the data needs to be refreshed\r\n     */\r\n    AuthorityMetadataEntity.prototype.isExpired = function () {\r\n        return this.expiresAt <= TimeUtils.nowSeconds();\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n            entity.hasOwnProperty(\"aliases\") &&\r\n            entity.hasOwnProperty(\"preferred_cache\") &&\r\n            entity.hasOwnProperty(\"preferred_network\") &&\r\n            entity.hasOwnProperty(\"canonical_authority\") &&\r\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n            entity.hasOwnProperty(\"token_endpoint\") &&\r\n            entity.hasOwnProperty(\"end_session_endpoint\") &&\r\n            entity.hasOwnProperty(\"issuer\") &&\r\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n            entity.hasOwnProperty(\"expiresAt\"));\r\n    };\r\n    return AuthorityMetadataEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryResponse(response) {\r\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\r\n        response.hasOwnProperty(\"metadata\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 6, , 7]);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _a.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.getCurrentVersion()];\r\n                    case 3:\r\n                        currentIMDSVersion = _a.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _a.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _a.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _a.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = { headers: { \"Metadata\": \"true\" } };\r\n    return RegionDiscovery;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface, cacheManager, authorityOptions) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"authorityType\", {\r\n        // See above for AuthorityType\r\n        get: function () {\r\n            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\r\n            if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\r\n                return exports.AuthorityType.Adfs;\r\n            }\r\n            return exports.AuthorityType.Default;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"protocolMode\", {\r\n        /**\r\n         * ProtocolMode enum representing the way endpoints are constructed.\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions.protocolMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"options\", {\r\n        /**\r\n         * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthority.validateAsUri();\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\r\n        /**\r\n         * Get hostname and port i.e. login.microsoftonline.com\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.authorization_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.end_session_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.issuer);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    };\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replacePath = function (urlString) {\r\n        var endpoint = urlString;\r\n        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach(function (currentPart, index) {\r\n            var cachedPart = cachedAuthorityParts[index];\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\r\n            }\r\n        });\r\n        return endpoint;\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            if (this.authorityType === exports.AuthorityType.Adfs || this.protocolMode === exports.ProtocolMode.OIDC) {\r\n                return this.canonicalAuthority + \".well-known/openid-configuration\";\r\n            }\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.metadata;\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n                        if (!metadataEntity) {\r\n                            metadataEntity = new AuthorityMetadataEntity();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\r\n                    case 1:\r\n                        cloudDiscoverySource = _a.sent();\r\n                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\r\n                    case 2:\r\n                        endpointSource = _a.sent();\r\n                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n                            // Reset the expiration time unless both values came from a successful cache lookup\r\n                            metadataEntity.resetExpiresAt();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n                        this.metadata = metadataEntity;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, autodetectedRegionName, azureRegion;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        metadata = this.getEndpointMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateEndpointMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _b.sent();\r\n                        if (!metadata) return [3 /*break*/, 4];\r\n                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata)];\r\n                    case 2:\r\n                        autodetectedRegionName = _b.sent();\r\n                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\r\n                            ? autodetectedRegionName\r\n                            : this.authorityOptions.azureRegionConfiguration.azureRegion;\r\n                        if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                        }\r\n                        else {\r\n                            if (autodetectedRegionName) {\r\n                                this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\r\n                            }\r\n                            else {\r\n                                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                            }\r\n                        }\r\n                        if (azureRegion) {\r\n                            this.regionDiscoveryMetadata.region_used = azureRegion;\r\n                            metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\r\n                        }\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        metadataEntity.updateEndpointMetadata(metadata, true);\r\n                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                    case 4: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.isAuthoritySameType = function (metadataEntity) {\r\n        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    };\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromConfig = function () {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n     * @param cachedMetadata\r\n     * @param newMetadata\r\n     */\r\n    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                        }\r\n                        else {\r\n                            // Metadata could not be obtained from config, cache or network\r\n                            throw ClientConfigurationError.createUntrustedAuthorityError();\r\n                        }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            try {\r\n                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                if (metadata) {\r\n                    return metadata;\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     * @param networkInterface\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var instanceDiscoveryEndpoint, match, response, metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n                        match = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\r\n                        if (metadata.length === 0) {\r\n                            // If no metadata is returned, authority is untrusted\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4:\r\n                        if (!match) {\r\n                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \r\n                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n                        }\r\n                        return [2 /*return*/, match];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    Authority.prototype.isInKnownAuthorities = function () {\r\n        var _this = this;\r\n        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\r\n        });\r\n        return matches.length > 0;\r\n    };\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    Authority.createCloudDiscoveryMetadataFromHost = function (host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    };\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response\r\n     * @param authority\r\n     */\r\n    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\r\n        for (var i = 0; i < response.length; i++) {\r\n            var metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    Authority.prototype.getPreferredCache = function () {\r\n        if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    Authority.prototype.isAlias = function (host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    };\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    Authority.isPublicCloudAuthority = function (host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    };\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    Authority.buildRegionalAuthorityString = function (host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        var authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        var authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\r\n        }\r\n        // Include the query string portion of the url\r\n        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return url + \"?\" + queryString;\r\n        return url;\r\n    };\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\r\n        metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        return metadata;\r\n    };\r\n    return Authority;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var acquireTokenAuthority, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, acquireTokenAuthority];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions) {\r\n        // Throw error if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions);\r\n    };\r\n    return AuthorityFactory;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryEntity = /** @class */ (function () {\r\n    function ServerTelemetryEntity() {\r\n        this.failedRequests = [];\r\n        this.errors = [];\r\n        this.cacheHits = 0;\r\n    }\r\n    /**\r\n     * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n     * @param key\r\n     * @param entity\r\n     */\r\n    ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {\r\n        var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n        var validateEntity = true;\r\n        if (entity) {\r\n            validateEntity =\r\n                entity.hasOwnProperty(\"failedRequests\") &&\r\n                    entity.hasOwnProperty(\"errors\") &&\r\n                    entity.hasOwnProperty(\"cacheHits\");\r\n        }\r\n        return validateKey && validateEntity;\r\n    };\r\n    return ServerTelemetryEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingEntity = /** @class */ (function () {\r\n    function ThrottlingEntity() {\r\n    }\r\n    /**\r\n     * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n     * @param key\r\n     * @param entity\r\n     */\r\n    ThrottlingEntity.isThrottlingEntity = function (key, entity) {\r\n        var validateKey = false;\r\n        if (key) {\r\n            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\r\n        }\r\n        var validateEntity = true;\r\n        if (entity) {\r\n            validateEntity = entity.hasOwnProperty(\"throttleTime\");\r\n        }\r\n        return validateKey && validateEntity;\r\n    };\r\n    return ThrottlingEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar StubbedNetworkModule = {\r\n    sendGetRequestAsync: function () {\r\n        var notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented for the Network interface.\";\r\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\r\n    },\r\n    sendPostRequestAsync: function () {\r\n        var notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented for the Network interface.\";\r\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\r\n    }\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryManager = /** @class */ (function () {\r\n    function ServerTelemetryManager(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\r\n        var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\r\n        var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\r\n        var lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        }\r\n        else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        }\r\n        else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return;\r\n    };\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    ServerTelemetryManager.prototype.incrementCacheHits = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    };\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    ServerTelemetryManager.prototype.getLastRequests = function () {\r\n        var initialValue = new ServerTelemetryEntity();\r\n        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    };\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    ServerTelemetryManager.prototype.clearTelemetryCache = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            var serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\r\n        var i;\r\n        var maxErrors = 0;\r\n        var dataSize = 0;\r\n        var errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\r\n            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\r\n            var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    };\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\r\n        var regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || \"\");\r\n        regionDiscoveryFields.push(this.regionSource || \"\");\r\n        regionDiscoveryFields.push(this.regionOutcome || \"\");\r\n        return regionDiscoveryFields.join(\",\");\r\n    };\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    };\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    };\r\n    return ServerTelemetryManager;\r\n}());\n\nexports.AccessTokenEntity = AccessTokenEntity;\nexports.AccountEntity = AccountEntity;\nexports.AppMetadataEntity = AppMetadataEntity;\nexports.AuthError = AuthError;\nexports.AuthErrorMessage = AuthErrorMessage;\nexports.AuthToken = AuthToken;\nexports.Authority = Authority;\nexports.AuthorityFactory = AuthorityFactory;\nexports.AuthorityMetadataEntity = AuthorityMetadataEntity;\nexports.AuthorizationCodeClient = AuthorizationCodeClient;\nexports.CacheManager = CacheManager;\nexports.ClientAuthError = ClientAuthError;\nexports.ClientAuthErrorMessage = ClientAuthErrorMessage;\nexports.ClientConfigurationError = ClientConfigurationError;\nexports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;\nexports.ClientCredentialClient = ClientCredentialClient;\nexports.Constants = Constants;\nexports.CredentialEntity = CredentialEntity;\nexports.DEFAULT_CRYPTO_IMPLEMENTATION = DEFAULT_CRYPTO_IMPLEMENTATION;\nexports.DEFAULT_SYSTEM_OPTIONS = DEFAULT_SYSTEM_OPTIONS;\nexports.DefaultStorageClass = DefaultStorageClass;\nexports.DeviceCodeClient = DeviceCodeClient;\nexports.IdToken = AuthToken;\nexports.IdTokenEntity = IdTokenEntity;\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError;\nexports.Logger = Logger;\nexports.NetworkManager = NetworkManager;\nexports.OIDC_DEFAULT_SCOPES = OIDC_DEFAULT_SCOPES;\nexports.OnBehalfOfClient = OnBehalfOfClient;\nexports.PromptValue = PromptValue;\nexports.ProtocolUtils = ProtocolUtils;\nexports.RefreshTokenClient = RefreshTokenClient;\nexports.RefreshTokenEntity = RefreshTokenEntity;\nexports.ServerError = ServerError;\nexports.ServerTelemetryEntity = ServerTelemetryEntity;\nexports.ServerTelemetryManager = ServerTelemetryManager;\nexports.SilentFlowClient = SilentFlowClient;\nexports.StringUtils = StringUtils;\nexports.StubbedNetworkModule = StubbedNetworkModule;\nexports.ThrottlingEntity = ThrottlingEntity;\nexports.ThrottlingUtils = ThrottlingUtils;\nexports.TimeUtils = TimeUtils;\nexports.TokenCacheContext = TokenCacheContext;\nexports.UrlString = UrlString;\nexports.UsernamePasswordClient = UsernamePasswordClient;\n//# sourceMappingURL=index.cjs.js.map\n",
    "var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar Stream = require('stream').Stream;\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response or not a stream\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err && err !== 'Unknown stream') {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    if (length) {\n      request.setHeader('Content-Length', length);\n    }\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n",
    "// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar tslib = require('tslib');\nvar util = _interopDefault(require('util'));\nvar os = require('os');\n\n// Copyright (c) Microsoft Corporation.\nfunction log(message) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    process.stderr.write(\"\" + util.format.apply(util, tslib.__spread([message], args)) + os.EOL);\n}\n\n// Copyright (c) Microsoft Corporation.\nvar debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nvar debugObj = Object.assign(function (namespace) {\n    return createDebugger(namespace);\n}, {\n    enable: enable,\n    enabled: enabled,\n    disable: disable,\n    log: log\n});\nfunction enable(namespaces) {\n    var e_1, _a, e_2, _b;\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    var wildcard = /\\*/g;\n    var namespaceList = namespaces.split(\",\").map(function (ns) { return ns.trim().replace(wildcard, \".*?\"); });\n    try {\n        for (var namespaceList_1 = tslib.__values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {\n            var ns = namespaceList_1_1.value;\n            if (ns.startsWith(\"-\")) {\n                skippedNamespaces.push(new RegExp(\"^\" + ns.substr(1) + \"$\"));\n            }\n            else {\n                enabledNamespaces.push(new RegExp(\"^\" + ns + \"$\"));\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    try {\n        for (var debuggers_1 = tslib.__values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {\n            var instance = debuggers_1_1.value;\n            instance.enabled = enabled(instance.namespace);\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n}\nfunction enabled(namespace) {\n    var e_3, _a, e_4, _b;\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    try {\n        for (var skippedNamespaces_1 = tslib.__values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {\n            var skipped = skippedNamespaces_1_1.value;\n            if (skipped.test(namespace)) {\n                return false;\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    try {\n        for (var enabledNamespaces_1 = tslib.__values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {\n            var enabledNamespace = enabledNamespaces_1_1.value;\n            if (enabledNamespace.test(namespace)) {\n                return true;\n            }\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n    return false;\n}\nfunction disable() {\n    var result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    var newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy: destroy,\n        log: debugObj.log,\n        namespace: namespace,\n        extend: extend\n    });\n    function debug() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = namespace + \" \" + args[0];\n        }\n        newDebugger.log.apply(newDebugger, tslib.__spread(args));\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    var index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    var newDebugger = createDebugger(this.namespace + \":\" + namespace);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\n\n// Copyright (c) Microsoft Corporation.\nvar registeredLoggers = new Set();\nvar logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nvar azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nvar AzureLogger = debugObj(\"azure\");\nAzureLogger.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    debugObj.log.apply(debugObj, tslib.__spread(args));\n};\nvar AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(\"AZURE_LOG_LEVEL set to unknown log level '\" + logLevelFromEnv + \"'; logging is not enabled. Acceptable values: \" + AZURE_LOG_LEVELS.join(\", \") + \".\");\n    }\n}\n/**\n * Immediately enables logging at the specified log level.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nfunction setLogLevel(level) {\n    var e_1, _a;\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(\"Unknown log level '\" + level + \"'. Acceptable values: \" + AZURE_LOG_LEVELS.join(\",\"));\n    }\n    azureLogLevel = level;\n    var enabledNamespaces = [];\n    try {\n        for (var registeredLoggers_1 = tslib.__values(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {\n            var logger = registeredLoggers_1_1.value;\n            if (shouldEnable(logger)) {\n                enabledNamespaces.push(logger.namespace);\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    debugObj.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nfunction getLogLevel() {\n    return azureLogLevel;\n}\nvar levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nfunction createClientLogger(namespace) {\n    var clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\")\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        parent.log.apply(parent, tslib.__spread(args));\n    };\n}\nfunction createLogger(parent, level) {\n    var logger = Object.assign(parent.extend(level), {\n        level: level\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        var enabledNamespaces = debugObj.disable();\n        debugObj.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n\nexports.AzureLogger = AzureLogger;\nexports.createClientLogger = createClientLogger;\nexports.getLogLevel = getLogLevel;\nexports.setLogLevel = setLogLevel;\n//# sourceMappingURL=index.js.map\n",
    "/*! @azure/msal-common v5.1.0 2021-11-02 */\n'use strict';\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    // Default response type for authorization code flow\r\n    CODE_RESPONSE_TYPE: \"code\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\r\n};\r\nvar OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE\r\n];\r\nvar OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [\r\n    Constants.EMAIL_SCOPE\r\n]);\r\n/**\r\n * Request header names\r\n */\r\nvar HeaderNames;\r\n(function (HeaderNames) {\r\n    HeaderNames[\"CONTENT_TYPE\"] = \"Content-Type\";\r\n    HeaderNames[\"RETRY_AFTER\"] = \"Retry-After\";\r\n    HeaderNames[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\r\n    HeaderNames[\"WWWAuthenticate\"] = \"WWW-Authenticate\";\r\n    HeaderNames[\"AuthenticationInfo\"] = \"Authentication-Info\";\r\n})(HeaderNames || (HeaderNames = {}));\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nexports.PersistentCacheKeys = void 0;\r\n(function (PersistentCacheKeys) {\r\n    PersistentCacheKeys[\"ID_TOKEN\"] = \"idtoken\";\r\n    PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\r\n    PersistentCacheKeys[\"ADAL_ID_TOKEN\"] = \"adal.idtoken\";\r\n    PersistentCacheKeys[\"ERROR\"] = \"error\";\r\n    PersistentCacheKeys[\"ERROR_DESC\"] = \"error.description\";\r\n    PersistentCacheKeys[\"ACTIVE_ACCOUNT\"] = \"active-account\";\r\n})(exports.PersistentCacheKeys || (exports.PersistentCacheKeys = {}));\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nvar AADAuthorityConstants;\r\n(function (AADAuthorityConstants) {\r\n    AADAuthorityConstants[\"COMMON\"] = \"common\";\r\n    AADAuthorityConstants[\"ORGANIZATIONS\"] = \"organizations\";\r\n    AADAuthorityConstants[\"CONSUMERS\"] = \"consumers\";\r\n})(AADAuthorityConstants || (AADAuthorityConstants = {}));\r\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\r\nvar AADServerParamKeys;\r\n(function (AADServerParamKeys) {\r\n    AADServerParamKeys[\"CLIENT_ID\"] = \"client_id\";\r\n    AADServerParamKeys[\"REDIRECT_URI\"] = \"redirect_uri\";\r\n    AADServerParamKeys[\"RESPONSE_TYPE\"] = \"response_type\";\r\n    AADServerParamKeys[\"RESPONSE_MODE\"] = \"response_mode\";\r\n    AADServerParamKeys[\"GRANT_TYPE\"] = \"grant_type\";\r\n    AADServerParamKeys[\"CLAIMS\"] = \"claims\";\r\n    AADServerParamKeys[\"SCOPE\"] = \"scope\";\r\n    AADServerParamKeys[\"ERROR\"] = \"error\";\r\n    AADServerParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\r\n    AADServerParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    AADServerParamKeys[\"ID_TOKEN\"] = \"id_token\";\r\n    AADServerParamKeys[\"REFRESH_TOKEN\"] = \"refresh_token\";\r\n    AADServerParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\r\n    AADServerParamKeys[\"STATE\"] = \"state\";\r\n    AADServerParamKeys[\"NONCE\"] = \"nonce\";\r\n    AADServerParamKeys[\"PROMPT\"] = \"prompt\";\r\n    AADServerParamKeys[\"SESSION_STATE\"] = \"session_state\";\r\n    AADServerParamKeys[\"CLIENT_INFO\"] = \"client_info\";\r\n    AADServerParamKeys[\"CODE\"] = \"code\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE\"] = \"code_challenge\";\r\n    AADServerParamKeys[\"CODE_CHALLENGE_METHOD\"] = \"code_challenge_method\";\r\n    AADServerParamKeys[\"CODE_VERIFIER\"] = \"code_verifier\";\r\n    AADServerParamKeys[\"CLIENT_REQUEST_ID\"] = \"client-request-id\";\r\n    AADServerParamKeys[\"X_CLIENT_SKU\"] = \"x-client-SKU\";\r\n    AADServerParamKeys[\"X_CLIENT_VER\"] = \"x-client-VER\";\r\n    AADServerParamKeys[\"X_CLIENT_OS\"] = \"x-client-OS\";\r\n    AADServerParamKeys[\"X_CLIENT_CPU\"] = \"x-client-CPU\";\r\n    AADServerParamKeys[\"X_CLIENT_CURR_TELEM\"] = \"x-client-current-telemetry\";\r\n    AADServerParamKeys[\"X_CLIENT_LAST_TELEM\"] = \"x-client-last-telemetry\";\r\n    AADServerParamKeys[\"X_MS_LIB_CAPABILITY\"] = \"x-ms-lib-capability\";\r\n    AADServerParamKeys[\"POST_LOGOUT_URI\"] = \"post_logout_redirect_uri\";\r\n    AADServerParamKeys[\"ID_TOKEN_HINT\"] = \"id_token_hint\";\r\n    AADServerParamKeys[\"DEVICE_CODE\"] = \"device_code\";\r\n    AADServerParamKeys[\"CLIENT_SECRET\"] = \"client_secret\";\r\n    AADServerParamKeys[\"CLIENT_ASSERTION\"] = \"client_assertion\";\r\n    AADServerParamKeys[\"CLIENT_ASSERTION_TYPE\"] = \"client_assertion_type\";\r\n    AADServerParamKeys[\"TOKEN_TYPE\"] = \"token_type\";\r\n    AADServerParamKeys[\"REQ_CNF\"] = \"req_cnf\";\r\n    AADServerParamKeys[\"OBO_ASSERTION\"] = \"assertion\";\r\n    AADServerParamKeys[\"REQUESTED_TOKEN_USE\"] = \"requested_token_use\";\r\n    AADServerParamKeys[\"ON_BEHALF_OF\"] = \"on_behalf_of\";\r\n    AADServerParamKeys[\"FOCI\"] = \"foci\";\r\n    AADServerParamKeys[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\r\n})(AADServerParamKeys || (AADServerParamKeys = {}));\r\n/**\r\n * Claims request keys\r\n */\r\nvar ClaimsRequestKeys;\r\n(function (ClaimsRequestKeys) {\r\n    ClaimsRequestKeys[\"ACCESS_TOKEN\"] = \"access_token\";\r\n    ClaimsRequestKeys[\"XMS_CC\"] = \"xms_cc\";\r\n})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nvar PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\"\r\n};\r\n/**\r\n * SSO Types - generated to populate hints\r\n */\r\nvar SSOTypes;\r\n(function (SSOTypes) {\r\n    SSOTypes[\"ACCOUNT\"] = \"account\";\r\n    SSOTypes[\"SID\"] = \"sid\";\r\n    SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\r\n    SSOTypes[\"ID_TOKEN\"] = \"id_token\";\r\n    SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\r\n    SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\r\n    SSOTypes[\"CONSUMERS\"] = \"consumers\";\r\n    SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\r\n    SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\r\n})(SSOTypes || (SSOTypes = {}));\r\n/**\r\n * Disallowed extra query parameters.\r\n */\r\n[\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nvar CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\"\r\n};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nexports.ResponseMode = void 0;\r\n(function (ResponseMode) {\r\n    ResponseMode[\"QUERY\"] = \"query\";\r\n    ResponseMode[\"FRAGMENT\"] = \"fragment\";\r\n    ResponseMode[\"FORM_POST\"] = \"form_post\";\r\n})(exports.ResponseMode || (exports.ResponseMode = {}));\r\n/**\r\n * allowed grant_type\r\n */\r\nvar GrantType;\r\n(function (GrantType) {\r\n    GrantType[\"IMPLICIT_GRANT\"] = \"implicit\";\r\n    GrantType[\"AUTHORIZATION_CODE_GRANT\"] = \"authorization_code\";\r\n    GrantType[\"CLIENT_CREDENTIALS_GRANT\"] = \"client_credentials\";\r\n    GrantType[\"RESOURCE_OWNER_PASSWORD_GRANT\"] = \"password\";\r\n    GrantType[\"REFRESH_TOKEN_GRANT\"] = \"refresh_token\";\r\n    GrantType[\"DEVICE_CODE_GRANT\"] = \"device_code\";\r\n    GrantType[\"JWT_BEARER\"] = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\r\n})(GrantType || (GrantType = {}));\r\n/**\r\n * Account types in Cache\r\n */\r\nexports.CacheAccountType = void 0;\r\n(function (CacheAccountType) {\r\n    CacheAccountType[\"MSSTS_ACCOUNT_TYPE\"] = \"MSSTS\";\r\n    CacheAccountType[\"ADFS_ACCOUNT_TYPE\"] = \"ADFS\";\r\n    CacheAccountType[\"MSAV1_ACCOUNT_TYPE\"] = \"MSA\";\r\n    CacheAccountType[\"GENERIC_ACCOUNT_TYPE\"] = \"Generic\"; // NTLM, Kerberos, FBA, Basic etc\r\n})(exports.CacheAccountType || (exports.CacheAccountType = {}));\r\n/**\r\n * Separators used in cache\r\n */\r\nvar Separators;\r\n(function (Separators) {\r\n    Separators[\"CACHE_KEY_SEPARATOR\"] = \"-\";\r\n    Separators[\"CLIENT_INFO_SEPARATOR\"] = \".\";\r\n})(Separators || (Separators = {}));\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexports.CredentialType = void 0;\r\n(function (CredentialType) {\r\n    CredentialType[\"ID_TOKEN\"] = \"IdToken\";\r\n    CredentialType[\"ACCESS_TOKEN\"] = \"AccessToken\";\r\n    CredentialType[\"ACCESS_TOKEN_WITH_AUTH_SCHEME\"] = \"AccessToken_With_AuthScheme\";\r\n    CredentialType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\r\n})(exports.CredentialType || (exports.CredentialType = {}));\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexports.CacheSchemaType = void 0;\r\n(function (CacheSchemaType) {\r\n    CacheSchemaType[\"ACCOUNT\"] = \"Account\";\r\n    CacheSchemaType[\"CREDENTIAL\"] = \"Credential\";\r\n    CacheSchemaType[\"ID_TOKEN\"] = \"IdToken\";\r\n    CacheSchemaType[\"ACCESS_TOKEN\"] = \"AccessToken\";\r\n    CacheSchemaType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\r\n    CacheSchemaType[\"APP_METADATA\"] = \"AppMetadata\";\r\n    CacheSchemaType[\"TEMPORARY\"] = \"TempCache\";\r\n    CacheSchemaType[\"TELEMETRY\"] = \"Telemetry\";\r\n    CacheSchemaType[\"UNDEFINED\"] = \"Undefined\";\r\n    CacheSchemaType[\"THROTTLING\"] = \"Throttling\";\r\n})(exports.CacheSchemaType || (exports.CacheSchemaType = {}));\r\n/**\r\n * Combine all cache types\r\n */\r\nexports.CacheType = void 0;\r\n(function (CacheType) {\r\n    CacheType[CacheType[\"ADFS\"] = 1001] = \"ADFS\";\r\n    CacheType[CacheType[\"MSA\"] = 1002] = \"MSA\";\r\n    CacheType[CacheType[\"MSSTS\"] = 1003] = \"MSSTS\";\r\n    CacheType[CacheType[\"GENERIC\"] = 1004] = \"GENERIC\";\r\n    CacheType[CacheType[\"ACCESS_TOKEN\"] = 2001] = \"ACCESS_TOKEN\";\r\n    CacheType[CacheType[\"REFRESH_TOKEN\"] = 2002] = \"REFRESH_TOKEN\";\r\n    CacheType[CacheType[\"ID_TOKEN\"] = 2003] = \"ID_TOKEN\";\r\n    CacheType[CacheType[\"APP_METADATA\"] = 3001] = \"APP_METADATA\";\r\n    CacheType[CacheType[\"UNDEFINED\"] = 9999] = \"UNDEFINED\";\r\n})(exports.CacheType || (exports.CacheType = {}));\r\n/**\r\n * More Cache related constants\r\n */\r\nvar APP_METADATA = \"appmetadata\";\r\nvar CLIENT_INFO = \"client_info\";\r\nvar THE_FAMILY_ID = \"1\";\r\nvar AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\r\n};\r\nvar AuthorityMetadataSource;\r\n(function (AuthorityMetadataSource) {\r\n    AuthorityMetadataSource[\"CONFIG\"] = \"config\";\r\n    AuthorityMetadataSource[\"CACHE\"] = \"cache\";\r\n    AuthorityMetadataSource[\"NETWORK\"] = \"network\";\r\n})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));\r\nvar SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_CUR_HEADER_BYTES: 80,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\"\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nexports.AuthenticationScheme = void 0;\r\n(function (AuthenticationScheme) {\r\n    AuthenticationScheme[\"BEARER\"] = \"Bearer\";\r\n    AuthenticationScheme[\"POP\"] = \"pop\";\r\n    AuthenticationScheme[\"SSH\"] = \"ssh-cert\";\r\n})(exports.AuthenticationScheme || (exports.AuthenticationScheme = {}));\r\n/**\r\n * Constants related to throttling\r\n */\r\nvar ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\r\n};\r\nvar Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nvar PasswordGrantConstants;\r\n(function (PasswordGrantConstants) {\r\n    PasswordGrantConstants[\"username\"] = \"username\";\r\n    PasswordGrantConstants[\"password\"] = \"password\";\r\n})(PasswordGrantConstants || (PasswordGrantConstants = {}));\r\n/**\r\n * Response codes\r\n */\r\nvar ResponseCodes;\r\n(function (ResponseCodes) {\r\n    ResponseCodes[ResponseCodes[\"httpSuccess\"] = 200] = \"httpSuccess\";\r\n    ResponseCodes[ResponseCodes[\"httpBadRequest\"] = 400] = \"httpBadRequest\";\r\n})(ResponseCodes || (ResponseCodes = {}));\r\n/**\r\n * Region Discovery Sources\r\n */\r\nvar RegionDiscoverySources;\r\n(function (RegionDiscoverySources) {\r\n    RegionDiscoverySources[\"FAILED_AUTO_DETECTION\"] = \"1\";\r\n    RegionDiscoverySources[\"INTERNAL_CACHE\"] = \"2\";\r\n    RegionDiscoverySources[\"ENVIRONMENT_VARIABLE\"] = \"3\";\r\n    RegionDiscoverySources[\"IMDS\"] = \"4\";\r\n})(RegionDiscoverySources || (RegionDiscoverySources = {}));\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nvar RegionDiscoveryOutcomes;\r\n(function (RegionDiscoveryOutcomes) {\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_MATCHES_DETECTED\"] = \"1\";\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_NO_AUTO_DETECTION\"] = \"2\";\r\n    RegionDiscoveryOutcomes[\"CONFIGURED_NOT_DETECTED\"] = \"3\";\r\n    RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_SUCCESSFUL\"] = \"4\";\r\n    RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_FAILED\"] = \"5\";\r\n})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));\r\nvar CacheOutcome;\r\n(function (CacheOutcome) {\r\n    CacheOutcome[\"NO_CACHE_HIT\"] = \"0\";\r\n    CacheOutcome[\"FORCE_REFRESH\"] = \"1\";\r\n    CacheOutcome[\"NO_CACHED_ACCESS_TOKEN\"] = \"2\";\r\n    CacheOutcome[\"CACHED_ACCESS_TOKEN_EXPIRED\"] = \"3\";\r\n    CacheOutcome[\"REFRESH_CACHED_ACCESS_TOKEN\"] = \"4\";\r\n})(CacheOutcome || (CacheOutcome = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: \"unexpected_error\",\r\n        desc: \"Unexpected error in authentication.\"\r\n    }\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nvar AuthError = /** @class */ (function (_super) {\r\n    __extends(AuthError, _super);\r\n    function AuthError(errorCode, errorMessage, suberror) {\r\n        var _this = this;\r\n        var errorString = errorMessage ? errorCode + \": \" + errorMessage : errorCode;\r\n        _this = _super.call(this, errorString) || this;\r\n        Object.setPrototypeOf(_this, AuthError.prototype);\r\n        _this.errorCode = errorCode || Constants.EMPTY_STRING;\r\n        _this.errorMessage = errorMessage || \"\";\r\n        _this.subError = suberror || \"\";\r\n        _this.name = \"AuthError\";\r\n        return _this;\r\n    }\r\n    AuthError.prototype.setCorrelationId = function (correlationId) {\r\n        this.correlationId = correlationId;\r\n    };\r\n    /**\r\n     * Creates an error that is thrown when something unexpected happens in the library.\r\n     * @param errDesc\r\n     */\r\n    AuthError.createUnexpectedError = function (errDesc) {\r\n        return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + \": \" + errDesc);\r\n    };\r\n    return AuthError;\r\n}(Error));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: function () {\r\n        var notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Decode: function () {\r\n        var notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    base64Encode: function () {\r\n        var notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    },\r\n    generatePkceCodes: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    getPublicKeyThumbprint: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    removeTokenBindingKey: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    clearKeystore: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    signJwt: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Crypto interface - signJwt() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: \"binding_key_not_removed\",\r\n        desc: \"Could not remove the credential's binding key from storage.\"\r\n    },\r\n    logoutNotSupported: {\r\n        code: \"end_session_endpoint_not_supported\",\r\n        desc: \"Provided authority does not support logout.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    ClientAuthError.createClientInfoEmptyError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    ClientAuthError.createNetworkError = function (endpoint, errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    ClientAuthError.createStateMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    ClientAuthError.createStateNotFoundError = function (missingState) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    ClientAuthError.createNonceMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    ClientAuthError.createNonceNotFoundError = function (missingNonce) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\r\n    };\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    ClientAuthError.createTokenRequestCannotBeMadeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    ClientAuthError.createAppendScopeSetError = function (appendError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\r\n    };\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    ClientAuthError.createEmptyInputScopeSetError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\r\n    };\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    ClientAuthError.createDeviceCodeCancelledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeExpiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeUnknownError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\r\n    };\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    ClientAuthError.createNoAccountInSilentRequestError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    ClientAuthError.createNullOrUndefinedCacheRecord = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    ClientAuthError.createInvalidCacheEnvironmentError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    };\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    ClientAuthError.createNoAccountFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    };\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    ClientAuthError.createCachePluginError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\r\n    };\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    ClientAuthError.createNoCryptoObjectError = function (operationName) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\r\n    };\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    ClientAuthError.createInvalidCacheTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    ClientAuthError.createUnexpectedAccountTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    ClientAuthError.createUnexpectedCredentialTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidAssertionError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidCredentialError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\r\n    };\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    ClientAuthError.createRefreshRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    ClientAuthError.createUserTimeoutReachedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    };\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    ClientAuthError.createTokenClaimsRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    ClientAuthError.createNoAuthCodeInServerResponseError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    };\r\n    ClientAuthError.createBindingKeyNotRemovedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\r\n    };\r\n    /**\r\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\r\n     */\r\n    ClientAuthError.createLogoutNotSupportedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    StringUtils.decodeAuthToken = function (authToken) {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    StringUtils.isEmptyObj = function (strObj) {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                var obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    };\r\n    StringUtils.startsWith = function (str, search) {\r\n        return str.indexOf(search) === 0;\r\n    };\r\n    StringUtils.endsWith = function (str, search) {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var obj = {};\r\n        var params = query.split(\"&\");\r\n        var decode = function (s) { return decodeURIComponent(s.replace(/\\+/g, \" \")); };\r\n        params.forEach(function (pair) {\r\n            if (pair.trim()) {\r\n                var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimArrayEntries = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim(); });\r\n    };\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    StringUtils.removeEmptyStringsFromArray = function (arr) {\r\n        return arr.filter(function (entry) {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    };\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    StringUtils.jsonParseHelper = function (str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    StringUtils.matchPattern = function (pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\r\n        return regex.test(input);\r\n    };\r\n    return StringUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nexports.LogLevel = void 0;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\r\n})(exports.LogLevel || (exports.LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    function Logger(loggerOptions, packageName, packageVersion) {\r\n        // Current log level, defaults to info.\r\n        this.level = exports.LogLevel.Info;\r\n        var defaultLoggerCallback = function () {\r\n            return;\r\n        };\r\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\r\n        this.level = typeof (loggerOptions.logLevel) === \"number\" ? loggerOptions.logLevel : exports.LogLevel.Info;\r\n        this.correlationId = loggerOptions.correlationId || \"\";\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\r\n        return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId }, packageName, packageVersion);\r\n    };\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    Logger.prototype.logMessage = function (logMessage, options) {\r\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        var timestamp = new Date().toUTCString();\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        var logHeader;\r\n        if (!StringUtils.isEmpty(options.correlationId)) {\r\n            logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\r\n        }\r\n        else if (!StringUtils.isEmpty(this.correlationId)) {\r\n            logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\r\n        }\r\n        else {\r\n            logHeader = \"[\" + timestamp + \"]\";\r\n        }\r\n        var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + exports.LogLevel[options.logLevel] + \" - \" + logMessage;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    };\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    Logger.prototype.executeCallback = function (level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    };\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    Logger.prototype.error = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    Logger.prototype.errorPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    Logger.prototype.warning = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    Logger.prototype.warningPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    Logger.prototype.info = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    Logger.prototype.infoPii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    Logger.prototype.verbose = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    Logger.prototype.verbosePii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    Logger.prototype.trace = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    Logger.prototype.tracePii = function (message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: exports.LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    Logger.prototype.isPiiLoggingEnabled = function () {\r\n        return this.piiLoggingEnabled || false;\r\n    };\r\n    return Logger;\r\n}());\n\n/* eslint-disable header/header */\r\nvar name = \"@azure/msal-common\";\r\nvar version = \"5.1.0\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<scheme>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n * }\r\n */\r\nvar CredentialEntity = /** @class */ (function () {\r\n    function CredentialEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    CredentialEntity.prototype.generateAccountId = function () {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    };\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    CredentialEntity.prototype.generateCredentialId = function () {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.prototype.generateTarget = function () {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    };\r\n    /**\r\n     * generates credential key\r\n     */\r\n    CredentialEntity.prototype.generateCredentialKey = function () {\r\n        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType);\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    CredentialEntity.prototype.generateType = function () {\r\n        switch (this.credentialType) {\r\n            case exports.CredentialType.ID_TOKEN:\r\n                return exports.CacheType.ID_TOKEN;\r\n            case exports.CredentialType.ACCESS_TOKEN:\r\n            case exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return exports.CacheType.ACCESS_TOKEN;\r\n            case exports.CredentialType.REFRESH_TOKEN:\r\n                return exports.CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * helper function to return `CredentialType`\r\n     * @param key\r\n     */\r\n    CredentialEntity.getCredentialType = function (key) {\r\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\r\n        if (key.indexOf(exports.CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\r\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\r\n            if (key.indexOf(exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\r\n                return exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            }\r\n            return exports.CredentialType.ACCESS_TOKEN;\r\n        }\r\n        else if (key.indexOf(exports.CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\r\n            return exports.CredentialType.ID_TOKEN;\r\n        }\r\n        else if (key.indexOf(exports.CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\r\n            return exports.CredentialType.REFRESH_TOKEN;\r\n        }\r\n        return Constants.NOT_DEFINED;\r\n    };\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType) {\r\n        var credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target)\r\n        ];\r\n        // PoP Tokens and SSH certs include scheme in cache key\r\n        if (tokenType && tokenType !== exports.AuthenticationScheme.BEARER) {\r\n            credentialKey.push(tokenType.toLowerCase());\r\n        }\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\r\n        var accountId = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\r\n        var clientOrFamilyId = credentialType === exports.CredentialType.REFRESH_TOKEN\r\n            ? familyId || clientId\r\n            : clientId;\r\n        var credentialId = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || \"\",\r\n        ];\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.generateTargetForCacheKey = function (scopes) {\r\n        return (scopes || \"\").toLowerCase();\r\n    };\r\n    return CredentialEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\r\n    },\r\n    urlParseError: {\r\n        code: \"url_parse_error\",\r\n        desc: \"URL could not be parsed into appropriate segments.\"\r\n    },\r\n    urlEmptyError: {\r\n        code: \"empty_url_error\",\r\n        desc: \"URL was empty or null.\"\r\n    },\r\n    emptyScopesError: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\r\n    },\r\n    nonArrayScopesError: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientIdSingleScopeError: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: \"invalid_claims\",\r\n        desc: \"Given claims parameter must be a stringified JSON object.\"\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: \"token_request_empty\",\r\n        desc: \"Token request was empty and not found in cache.\"\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: \"logout_request_empty\",\r\n        desc: \"The logout request was null or undefined.\"\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: \"invalid_code_challenge_method\",\r\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: \"pkce_params_missing\",\r\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: \"invalid_cloud_discovery_metadata\",\r\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: \"invalid_authority_metadata\",\r\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\r\n    },\r\n    untrustedAuthority: {\r\n        code: \"untrusted_authority\",\r\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\r\n    },\r\n    missingSshJwk: {\r\n        code: \"missing_ssh_jwk\",\r\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\r\n    },\r\n    missingSshKid: {\r\n        code: \"missing_ssh_kid\",\r\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: \"missing_nonce_authentication_header\",\r\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: \"invalid_authentication_header\",\r\n        desc: \"Invalid authentication header provided\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nvar ClientConfigurationError = /** @class */ (function (_super) {\r\n    __extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the claims request could not be successfully parsed\r\n     */\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if authority uri is given an insecure protocol.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string does not parse into separate segments.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlParseError = function (urlParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string is empty or null.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when scopes are empty.\r\n     * @param scopesValue\r\n     */\r\n    ClientConfigurationError.createEmptyScopesArrayError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when client id scope is not provided as single scope.\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\r\n    };\r\n    /**\r\n     * Error thrown when prompt is not an allowed type.\r\n     * @param promptValue\r\n     */\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\r\n    };\r\n    /**\r\n     * Creates error thrown when claims parameter is not a stringified JSON object\r\n     */\r\n    ClientConfigurationError.createInvalidClaimsRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyLogoutRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyTokenRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when an invalid code_challenge_method is passed by the user\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\r\n    };\r\n    /**\r\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided authority is not a member of the trusted host list\r\n     */\r\n    ClientConfigurationError.createUntrustedAuthorityError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\r\n    };\r\n    /*\r\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\r\n     */\r\n    ClientConfigurationError.createMissingSshJwkError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\r\n     */\r\n    ClientConfigurationError.createMissingSshKidError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\r\n     */\r\n    ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\r\n    };\r\n    /**\r\n     * Throws error when a provided header is invalid in any way\r\n     */\r\n    ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + \". Invalid header: \" + invalidHeaderName + \". Details: \" + details);\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nvar ScopeSet = /** @class */ (function () {\r\n    function ScopeSet(inputScopes) {\r\n        var _this = this;\r\n        // Filter empty string and null/undefined array items\r\n        var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\r\n        var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    ScopeSet.fromString = function (inputScopeString) {\r\n        var scopeString = inputScopeString || \"\";\r\n        var inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    };\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    ScopeSet.prototype.validateInputScopes = function (inputScopes) {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    };\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.containsScope = function (scope) {\r\n        var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    };\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    ScopeSet.prototype.containsScopeSet = function (scopeSet) {\r\n        var _this = this;\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));\r\n    };\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    ScopeSet.prototype.containsOnlyOIDCScopes = function () {\r\n        var _this = this;\r\n        var defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            if (_this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    };\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    ScopeSet.prototype.appendScope = function (newScope) {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    };\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    ScopeSet.prototype.appendScopes = function (newScopes) {\r\n        var _this = this;\r\n        try {\r\n            newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    ScopeSet.prototype.removeScope = function (scope) {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    };\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    ScopeSet.prototype.removeOIDCScopes = function () {\r\n        var _this = this;\r\n        OIDC_SCOPES.forEach(function (defaultScope) {\r\n            _this.scopes.delete(defaultScope);\r\n        });\r\n    };\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.unionScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        var unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });\r\n        return unionScopes;\r\n    };\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        var unionScopes = this.unionScopeSets(otherScopes);\r\n        var sizeOtherScopes = otherScopes.getScopeCount();\r\n        var sizeThisScopes = this.getScopeCount();\r\n        var sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    };\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    ScopeSet.prototype.getScopeCount = function () {\r\n        return this.scopes.size;\r\n    };\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    ScopeSet.prototype.asArray = function () {\r\n        var array = [];\r\n        this.scopes.forEach(function (val) { return array.push(val); });\r\n        return array;\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    ScopeSet.prototype.printScopes = function () {\r\n        if (this.scopes) {\r\n            var scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    ScopeSet.prototype.printScopesLowerCase = function () {\r\n        return this.printScopes().toLowerCase();\r\n    };\r\n    return ScopeSet;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, crypto) {\r\n    if (StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError();\r\n    }\r\n    try {\r\n        var decodedClientInfo = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError(e);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (StringUtils.isEmpty(homeAccountId)) {\r\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\r\n    }\r\n    var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\r\n    };\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nexports.AuthorityType = void 0;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n})(exports.AuthorityType || (exports.AuthorityType = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\r\nvar AccountEntity = /** @class */ (function () {\r\n    function AccountEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    AccountEntity.prototype.generateAccountId = function () {\r\n        var accountId = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    AccountEntity.prototype.generateAccountKey = function () {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    AccountEntity.prototype.generateType = function () {\r\n        switch (this.authorityType) {\r\n            case exports.CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return exports.CacheType.ADFS;\r\n            case exports.CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return exports.CacheType.MSA;\r\n            case exports.CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return exports.CacheType.MSSTS;\r\n            case exports.CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return exports.CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    AccountEntity.prototype.getAccountInfo = function () {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims\r\n        };\r\n    };\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    AccountEntity.generateAccountCacheKey = function (accountInterface) {\r\n        var accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || \"\",\r\n            accountInterface.tenantId || \"\",\r\n        ];\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var account = new AccountEntity();\r\n        account.authorityType = exports.CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n        var env = environment || (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n             */\r\n            account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\r\n            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\r\n        }\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        return account;\r\n    };\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, oboAssertion, cloudGraphHostName, msGraphHost, environment) {\r\n        var _a, _b, _c, _d;\r\n        var account = new AccountEntity();\r\n        account.authorityType = (authority && authority.authorityType === exports.AuthorityType.Adfs) ? exports.CacheAccountType.ADFS_ACCOUNT_TYPE : exports.CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        var env = environment || authority && authority.getPreferredCache();\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\";\r\n            // upn claim for most ADFS scenarios\r\n            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\r\n            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\r\n            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\r\n        }\r\n        account.environment = env;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n        return account;\r\n    };\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\r\n        var _a;\r\n        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === exports.AuthorityType.Adfs) {\r\n            return accountId;\r\n        }\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccountEntity.isAccountEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    };\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            var accountAClaims = (accountA.idTokenClaims || {});\r\n            var accountBClaims = (accountB.idTokenClaims || {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n                (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            claimsMatch;\r\n    };\r\n    return AccountEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nvar AuthToken = /** @class */ (function () {\r\n    function AuthToken(rawToken, crypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    AuthToken.extractTokenClaims = function (encodedToken, crypto) {\r\n        var decodedToken = StringUtils.decodeAuthToken(encodedToken);\r\n        // token will be decoded to get the username\r\n        try {\r\n            var base64TokenPayload = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    };\r\n    return AuthToken;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nvar CacheManager = /** @class */ (function () {\r\n    function CacheManager(clientId, cryptoImpl) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n    }\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    CacheManager.prototype.getAllAccounts = function () {\r\n        var _this = this;\r\n        var currentAccounts = this.getAccountsFilteredBy();\r\n        var accountValues = Object.keys(currentAccounts).map(function (accountKey) { return currentAccounts[accountKey]; });\r\n        var numAccounts = accountValues.length;\r\n        if (numAccounts < 1) {\r\n            return [];\r\n        }\r\n        else {\r\n            var allAccounts = accountValues.map(function (value) {\r\n                var accountEntity = CacheManager.toObject(new AccountEntity(), value);\r\n                var accountInfo = accountEntity.getAccountInfo();\r\n                var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);\r\n                if (idToken && !accountInfo.idTokenClaims) {\r\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, _this.cryptoImpl).claims;\r\n                }\r\n                return accountInfo;\r\n            });\r\n            return allAccounts;\r\n        }\r\n    };\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!cacheRecord) {\r\n                            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n                        }\r\n                        if (!!cacheRecord.account) {\r\n                            this.setAccount(cacheRecord.account);\r\n                        }\r\n                        if (!!cacheRecord.idToken) {\r\n                            this.setIdTokenCredential(cacheRecord.idToken);\r\n                        }\r\n                        if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!!cacheRecord.refreshToken) {\r\n                            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n                        }\r\n                        if (!!cacheRecord.appMetadata) {\r\n                            this.setAppMetadata(cacheRecord.appMetadata);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.saveAccessToken = function (credential) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentTokenCache, currentScopes, currentAccessTokens, removedAccessTokens_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        currentTokenCache = this.getCredentialsFilteredBy({\r\n                            clientId: credential.clientId,\r\n                            credentialType: credential.credentialType,\r\n                            environment: credential.environment,\r\n                            homeAccountId: credential.homeAccountId,\r\n                            realm: credential.realm,\r\n                            tokenType: credential.tokenType\r\n                        });\r\n                        currentScopes = ScopeSet.fromString(credential.target);\r\n                        currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) { return currentTokenCache.accessTokens[key]; });\r\n                        if (!currentAccessTokens) return [3 /*break*/, 2];\r\n                        removedAccessTokens_1 = [];\r\n                        currentAccessTokens.forEach(function (tokenEntity) {\r\n                            var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                            if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                                removedAccessTokens_1.push(_this.removeCredential(tokenEntity));\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccessTokens_1)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        this.setAccessTokenCredential(credential);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\r\n        return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : \"\", accountFilter ? accountFilter.environment : \"\", accountFilter ? accountFilter.realm : \"\");\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAccounts = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            var entity = _this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!realm && !_this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n            matchingAccounts[cacheKey] = entity;\r\n        });\r\n        return matchingAccounts;\r\n    };\r\n    /**\r\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.getCredentialsFilteredBy = function (filter) {\r\n        return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion, filter.tokenType, filter.keyId);\r\n    };\r\n    /**\r\n     * Support function to help match credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     * @param oboAssertion\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion, tokenType, keyId) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingCredentials = {\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n        };\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-credential type cache entities\r\n            var credType = CredentialEntity.getCredentialType(cacheKey);\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getSpecificCredential(cacheKey, credType);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {\r\n                return;\r\n            }\r\n            if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!realm && !_this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n            if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            if (!!familyId && !_this.matchFamilyId(entity, familyId)) {\r\n                return;\r\n            }\r\n            /*\r\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n             */\r\n            if (!!target && !_this.matchTarget(entity, target)) {\r\n                return;\r\n            }\r\n            // Access Token with Auth Scheme specific matching\r\n            if (credentialType === exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n                if (!!tokenType && !_this.matchTokenType(entity, tokenType)) {\r\n                    return;\r\n                }\r\n                switch (tokenType) {\r\n                    case exports.AuthenticationScheme.POP:\r\n                        // This check avoids matching outdated POP tokens that don't have the <-scheme> in the cache key\r\n                        if (cacheKey.indexOf(exports.AuthenticationScheme.POP) === -1) {\r\n                            // AccessToken_With_AuthScheme that doesn't have \"-pop\" in the key is outdated and needs to be removed\r\n                            _this.removeItem(cacheKey, exports.CacheSchemaType.CREDENTIAL);\r\n                            return;\r\n                        }\r\n                        break;\r\n                    case exports.AuthenticationScheme.SSH:\r\n                        // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n                        if (keyId && !_this.matchKeyId(entity, keyId)) {\r\n                            return;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            switch (credType) {\r\n                case exports.CredentialType.ID_TOKEN:\r\n                    matchingCredentials.idTokens[cacheKey] = entity;\r\n                    break;\r\n                case exports.CredentialType.ACCESS_TOKEN:\r\n                case exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                    matchingCredentials.accessTokens[cacheKey] = entity;\r\n                    break;\r\n                case exports.CredentialType.REFRESH_TOKEN:\r\n                    matchingCredentials.refreshTokens[cacheKey] = entity;\r\n                    break;\r\n            }\r\n        });\r\n        return matchingCredentials;\r\n    };\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\r\n        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\r\n    };\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAppMetadata = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!_this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    };\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getAuthorityMetadataKeys();\r\n        var matchedEntity = null;\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    };\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    CacheManager.prototype.removeAllAccounts = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allCacheKeys, removedAccounts;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allCacheKeys = this.getKeys();\r\n                        removedAccounts = [];\r\n                        allCacheKeys.forEach(function (cacheKey) {\r\n                            var entity = _this.getAccount(cacheKey);\r\n                            if (!entity) {\r\n                                return;\r\n                            }\r\n                            removedAccounts.push(_this.removeAccount(cacheKey));\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccounts)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, true];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccount = function (accountKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var account;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        account = this.getAccount(accountKey);\r\n                        if (!account) {\r\n                            throw ClientAuthError.createNoAccountFoundError();\r\n                        }\r\n                        return [4 /*yield*/, this.removeAccountContext(account)];\r\n                    case 1: return [2 /*return*/, ((_a.sent()) && this.removeItem(accountKey, exports.CacheSchemaType.ACCOUNT))];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccountContext = function (account) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allCacheKeys, accountId, removedCredentials;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allCacheKeys = this.getKeys();\r\n                        accountId = account.generateAccountId();\r\n                        removedCredentials = [];\r\n                        allCacheKeys.forEach(function (cacheKey) {\r\n                            // don't parse any non-credential type cache entities\r\n                            var credType = CredentialEntity.getCredentialType(cacheKey);\r\n                            if (credType === Constants.NOT_DEFINED) {\r\n                                return;\r\n                            }\r\n                            var cacheEntity = _this.getSpecificCredential(cacheKey, credType);\r\n                            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\r\n                                removedCredentials.push(_this.removeCredential(cacheEntity));\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedCredentials)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, true];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.removeCredential = function (credential) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var key, accessTokenWithAuthSchemeEntity, kid;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        key = credential.generateCredentialKey();\r\n                        if (!(credential.credentialType.toLowerCase() === exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];\r\n                        if (!(credential.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 4];\r\n                        accessTokenWithAuthSchemeEntity = credential;\r\n                        kid = accessTokenWithAuthSchemeEntity.keyId;\r\n                        if (!kid) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\r\n                    case 4: return [2 /*return*/, this.removeItem(key, exports.CacheSchemaType.CREDENTIAL)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    CacheManager.prototype.removeAppMetadata = function () {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            if (_this.isAppMetadata(cacheKey)) {\r\n                _this.removeItem(cacheKey, exports.CacheSchemaType.APP_METADATA);\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment, authScheme, keyId) {\r\n        var cachedAccount = this.readAccountFromCache(account);\r\n        var cachedIdToken = this.readIdTokenFromCache(clientId, account);\r\n        var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme, keyId);\r\n        var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\r\n        var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    };\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.readAccountFromCache = function (account) {\r\n        var accountKey = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    };\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {\r\n        var idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: exports.CredentialType.ID_TOKEN,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);\r\n        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });\r\n        var numIdTokens = idTokens.length;\r\n        if (numIdTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes, authScheme, keyId) {\r\n        // Distinguish between Bearer and PoP/SSH token cache types\r\n        var credentialType = (authScheme && authScheme !== exports.AuthenticationScheme.BEARER) ? exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : exports.CredentialType.ACCESS_TOKEN;\r\n        var accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n            target: scopes.printScopesLowerCase(),\r\n            tokenType: authScheme,\r\n            keyId: keyId\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {\r\n        var id = familyRT ? THE_FAMILY_ID : undefined;\r\n        var refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: exports.CredentialType.REFRESH_TOKEN,\r\n            clientId: clientId,\r\n            familyId: id\r\n        };\r\n        var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\r\n        var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) { return credentialCache.refreshTokens[key]; });\r\n        var numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        return refreshTokens[0];\r\n    };\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {\r\n        var appMetadataFilter = {\r\n            environment: environment,\r\n            clientId: clientId,\r\n        };\r\n        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });\r\n        var numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n        return appMetadataEntries[0];\r\n    };\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {\r\n        var appMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\r\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\r\n    };\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {\r\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\r\n    };\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    CacheManager.prototype.matchEnvironment = function (entity, environment) {\r\n        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    };\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.matchClientId = function (entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    };\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    CacheManager.prototype.matchFamilyId = function (entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    };\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.matchRealm = function (entity, realm) {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    };\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.matchTarget = function (entity, target) {\r\n        var isNotAccessTokenCredential = (entity.credentialType !== exports.CredentialType.ACCESS_TOKEN && entity.credentialType !== exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        var entityScopeSet = ScopeSet.fromString(entity.target);\r\n        var requestTargetScopeSet = ScopeSet.fromString(target);\r\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\r\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\r\n        }\r\n        else {\r\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\r\n    };\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchTokenType = function (entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    };\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchKeyId = function (entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAppMetadata = function (key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAuthorityMetadata = function (key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    };\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\r\n        return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\r\n    };\r\n    /**\r\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n     * @param key\r\n     * @param credType\r\n     */\r\n    CacheManager.prototype.getSpecificCredential = function (key, credType) {\r\n        switch (credType) {\r\n            case exports.CredentialType.ID_TOKEN: {\r\n                return this.getIdTokenCredential(key);\r\n            }\r\n            case exports.CredentialType.ACCESS_TOKEN:\r\n            case exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\r\n                return this.getAccessTokenCredential(key);\r\n            }\r\n            case exports.CredentialType.REFRESH_TOKEN: {\r\n                return this.getRefreshTokenCredential(key);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    CacheManager.toObject = function (obj, json) {\r\n        for (var propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    };\r\n    return CacheManager;\r\n}());\r\nvar DefaultStorageClass = /** @class */ (function (_super) {\r\n    __extends(DefaultStorageClass, _super);\r\n    function DefaultStorageClass() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultStorageClass.prototype.setAccount = function () {\r\n        var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccount = function () {\r\n        var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.removeItem = function () {\r\n        var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.containsKey = function () {\r\n        var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getKeys = function () {\r\n        var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.clear = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    };\r\n    return DefaultStorageClass;\r\n}(CacheManager));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Token renewal offset default in seconds\r\nvar DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nvar DEFAULT_SYSTEM_OPTIONS = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false\r\n};\r\nvar DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: function () {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: exports.LogLevel.Info,\r\n    correlationId: \"\"\r\n};\r\nvar DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    sendGetRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    },\r\n    sendPostRequestAsync: function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    }\r\n};\r\nvar DEFAULT_LIBRARY_INFO = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: \"\",\r\n    os: \"\"\r\n};\r\nvar DEFAULT_CLIENT_CREDENTIALS = {\r\n    clientSecret: \"\",\r\n    clientAssertion: undefined\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nfunction buildClientConfiguration(_a) {\r\n    var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;\r\n    var loggerOptions = __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),\r\n        loggerOptions: loggerOptions,\r\n        storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null\r\n    };\r\n}\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions) {\r\n    return __assign({ clientCapabilities: [] }, authOptions);\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nvar ServerError = /** @class */ (function (_super) {\r\n    __extends(ServerError, _super);\r\n    function ServerError(errorCode, errorMessage, subError) {\r\n        var _this = _super.call(this, errorCode, errorMessage, subError) || this;\r\n        _this.name = \"ServerError\";\r\n        Object.setPrototypeOf(_this, ServerError.prototype);\r\n        return _this;\r\n    }\r\n    return ServerError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingUtils = /** @class */ (function () {\r\n    function ThrottlingUtils() {\r\n    }\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\r\n        return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\r\n        var _a;\r\n        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        var value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);\r\n                return;\r\n            }\r\n            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            var thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseStatus = function (response) {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseForRetryAfter = function (response) {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\r\n        var time = throttleTime <= 0 ? 0 : throttleTime;\r\n        var currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    };\r\n    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\r\n        var thumbprint = {\r\n            clientId: clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshJwk: request.sshJwk,\r\n            sshKid: request.sshKid\r\n        };\r\n        var key = this.generateThrottlingStorageKey(thumbprint);\r\n        return cacheManager.removeItem(key, exports.CacheSchemaType.THROTTLING);\r\n    };\r\n    return ThrottlingUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar NetworkManager = /** @class */ (function () {\r\n    function NetworkManager(networkClient, cacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof AuthError) {\r\n                            throw e_1;\r\n                        }\r\n                        else {\r\n                            throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);\r\n                        }\r\n                    case 4:\r\n                        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return NetworkManager;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nexports.CcsCredentialType = void 0;\r\n(function (CcsCredentialType) {\r\n    CcsCredentialType[\"HOME_ACCOUNT_ID\"] = \"home_account_id\";\r\n    CcsCredentialType[\"UPN\"] = \"UPN\";\r\n})(exports.CcsCredentialType || (exports.CcsCredentialType = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\r\nvar BaseClient = /** @class */ (function () {\r\n    function BaseClient(configuration) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set the NetworkManager\r\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\r\n        var headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case exports.CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\r\n                            // Telemetry data successfully logged by server, clear Telemetry cache\r\n                            this.config.serverTelemetryManager.clearTelemetryCache();\r\n                        }\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    BaseClient.prototype.updateAuthority = function (updatedAuthority) {\r\n        if (!updatedAuthority.discoveryComplete()) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\r\n        }\r\n        this.authority = updatedAuthority;\r\n    };\r\n    return BaseClient;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nvar RequestValidator = /** @class */ (function () {\r\n    function RequestValidator() {\r\n    }\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    RequestValidator.validateRedirectUri = function (redirectUri) {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    RequestValidator.validatePrompt = function (prompt) {\r\n        var promptValues = [];\r\n        for (var value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    RequestValidator.validateClaims = function (claims) {\r\n        try {\r\n            JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n        else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\r\n        if ([\r\n            CodeChallengeMethodValues.PLAIN,\r\n            CodeChallengeMethodValues.S256\r\n        ].indexOf(codeChallengeMethod) < 0) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    };\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach(function (value, key) {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n        return eQParams;\r\n    };\r\n    return RequestValidator;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RequestParameterBuilder = /** @class */ (function () {\r\n    function RequestParameterBuilder() {\r\n        this.parameters = new Map();\r\n    }\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseTypeCode = function () {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\r\n    };\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\r\n        this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : exports.ResponseMode.QUERY));\r\n    };\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\r\n        if (addOidcScopes === void 0) { addOidcScopes = true; }\r\n        var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\r\n        var scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    };\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    RequestParameterBuilder.prototype.addClientId = function (clientId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    };\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    };\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    };\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    };\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\r\n    };\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */\r\n    RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\r\n    };\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    RequestParameterBuilder.prototype.addSid = function (sid) {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    };\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    };\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    };\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    };\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    RequestParameterBuilder.prototype.addPrompt = function (prompt) {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\r\n    };\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    RequestParameterBuilder.prototype.addState = function (state) {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    };\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    RequestParameterBuilder.prototype.addNonce = function (nonce) {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    };\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        }\r\n        else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    RequestParameterBuilder.prototype.addDeviceCode = function (code) {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    };\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    };\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    };\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    };\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    };\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    };\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    };\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    RequestParameterBuilder.prototype.addGrantType = function (grantType) {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    };\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    RequestParameterBuilder.prototype.addClientInfo = function () {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    };\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\r\n        var _this = this;\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach(function (key) {\r\n            _this.parameters.set(key, eQparams[key]);\r\n        });\r\n    };\r\n    RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\r\n        var mergedClaims;\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        }\r\n        else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n        return JSON.stringify(mergedClaims);\r\n    };\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    RequestParameterBuilder.prototype.addUsername = function (username) {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    };\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    RequestParameterBuilder.prototype.addPassword = function (password) {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    };\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    };\r\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */\r\n    RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {\r\n        if (!StringUtils.isEmpty(sshJwkString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.SSH);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\r\n        }\r\n    };\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */\r\n    RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    };\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    RequestParameterBuilder.prototype.addThrottling = function () {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    };\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    RequestParameterBuilder.prototype.createQueryString = function () {\r\n        var queryParameterArray = new Array();\r\n        this.parameters.forEach(function (value, key) {\r\n            queryParameterArray.push(key + \"=\" + value);\r\n        });\r\n        return queryParameterArray.join(\"&\");\r\n    };\r\n    return RequestParameterBuilder;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ID_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n * }\r\n */\r\nvar IdTokenEntity = /** @class */ (function (_super) {\r\n    __extends(IdTokenEntity, _super);\r\n    function IdTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create IdTokenEntity\r\n     * @param homeAccountId\r\n     * @param authenticationResult\r\n     * @param clientId\r\n     * @param authority\r\n     */\r\n    IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {\r\n        var idTokenEntity = new IdTokenEntity();\r\n        idTokenEntity.credentialType = exports.CredentialType.ID_TOKEN;\r\n        idTokenEntity.homeAccountId = homeAccountId;\r\n        idTokenEntity.environment = environment;\r\n        idTokenEntity.clientId = clientId;\r\n        idTokenEntity.secret = idToken;\r\n        idTokenEntity.realm = tenantId;\r\n        idTokenEntity.oboAssertion = oboAssertion;\r\n        return idTokenEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    IdTokenEntity.isIdTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity[\"credentialType\"] === exports.CredentialType.ID_TOKEN);\r\n    };\r\n    return IdTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nvar TimeUtils = /** @class */ (function () {\r\n    function TimeUtils() {\r\n    }\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    TimeUtils.nowSeconds = function () {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    };\r\n    /**\r\n     * check if a token is expired based on given UTC time in seconds.\r\n     * @param expiresOn\r\n     */\r\n    TimeUtils.isTokenExpired = function (expiresOn, offset) {\r\n        // check for access token expiry\r\n        var expirationSec = Number(expiresOn) || 0;\r\n        var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\r\n        // If current time + offset is greater than token expiration time, then token is expired.\r\n        return (offsetCurrentTimeSec > expirationSec);\r\n    };\r\n    /**\r\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n     * i.e. The system clock was turned back after acquiring the cached token\r\n     * @param cachedAt\r\n     * @param offset\r\n     */\r\n    TimeUtils.wasClockTurnedBack = function (cachedAt) {\r\n        var cachedAtSec = Number(cachedAt);\r\n        return cachedAtSec > TimeUtils.nowSeconds();\r\n    };\r\n    /**\r\n     * Waits for t number of milliseconds\r\n     * @param t number\r\n     * @param value T\r\n     */\r\n    TimeUtils.delay = function (t, value) {\r\n        return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });\r\n    };\r\n    return TimeUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\r\nvar AccessTokenEntity = /** @class */ (function (_super) {\r\n    __extends(AccessTokenEntity, _super);\r\n    function AccessTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create AccessTokenEntity\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param accessToken\r\n     * @param clientId\r\n     * @param tenantId\r\n     * @param scopes\r\n     * @param expiresOn\r\n     * @param extExpiresOn\r\n     */\r\n    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, oboAssertion, keyId) {\r\n        var _a;\r\n        var atEntity = new AccessTokenEntity();\r\n        atEntity.homeAccountId = homeAccountId;\r\n        atEntity.credentialType = exports.CredentialType.ACCESS_TOKEN;\r\n        atEntity.secret = accessToken;\r\n        var currentTime = TimeUtils.nowSeconds();\r\n        atEntity.cachedAt = currentTime.toString();\r\n        /*\r\n         * Token expiry time.\r\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n         */\r\n        atEntity.expiresOn = expiresOn.toString();\r\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\r\n        if (refreshOn) {\r\n            atEntity.refreshOn = refreshOn.toString();\r\n        }\r\n        atEntity.environment = environment;\r\n        atEntity.clientId = clientId;\r\n        atEntity.realm = tenantId;\r\n        atEntity.target = scopes;\r\n        atEntity.oboAssertion = oboAssertion;\r\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? exports.AuthenticationScheme.BEARER : tokenType;\r\n        // Create Access Token With Auth Scheme instead of regular access token\r\n        if (atEntity.tokenType !== exports.AuthenticationScheme.BEARER) {\r\n            atEntity.credentialType = exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            switch (atEntity.tokenType) {\r\n                case exports.AuthenticationScheme.POP:\r\n                    // Make sure keyId is present and add it to credential\r\n                    var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\r\n                    if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\r\n                        throw ClientAuthError.createTokenClaimsRequiredError();\r\n                    }\r\n                    atEntity.keyId = tokenClaims.cnf.kid;\r\n                    break;\r\n                case exports.AuthenticationScheme.SSH:\r\n                    atEntity.keyId = keyId;\r\n            }\r\n        }\r\n        return atEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccessTokenEntity.isAccessTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity.hasOwnProperty(\"target\") &&\r\n            (entity[\"credentialType\"] === exports.CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === exports.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n    };\r\n    return AccessTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * REFRESH_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\r\n *\r\n * Value:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n * }\r\n */\r\nvar RefreshTokenEntity = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenEntity, _super);\r\n    function RefreshTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create RefreshTokenEntity\r\n     * @param homeAccountId\r\n     * @param authenticationResult\r\n     * @param clientId\r\n     * @param authority\r\n     */\r\n    RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {\r\n        var rtEntity = new RefreshTokenEntity();\r\n        rtEntity.clientId = clientId;\r\n        rtEntity.credentialType = exports.CredentialType.REFRESH_TOKEN;\r\n        rtEntity.environment = environment;\r\n        rtEntity.homeAccountId = homeAccountId;\r\n        rtEntity.secret = refreshToken;\r\n        rtEntity.oboAssertion = oboAssertion;\r\n        if (familyId)\r\n            rtEntity.familyId = familyId;\r\n        return rtEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    RefreshTokenEntity.isRefreshTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity[\"credentialType\"] === exports.CredentialType.REFRESH_TOKEN);\r\n    };\r\n    return RefreshTokenEntity;\r\n}(CredentialEntity));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\r\nvar InteractionRequiredServerErrorMessage = [\r\n    \"interaction_required\",\r\n    \"consent_required\",\r\n    \"login_required\"\r\n];\r\nvar InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\"\r\n];\r\n/**\r\n * Interaction required errors defined by the SDK\r\n */\r\nvar InteractionRequiredAuthErrorMessage = {\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No refresh token found in the cache. Please sign-in.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when user interaction is required.\r\n */\r\nvar InteractionRequiredAuthError = /** @class */ (function (_super) {\r\n    __extends(InteractionRequiredAuthError, _super);\r\n    function InteractionRequiredAuthError(errorCode, errorMessage, subError) {\r\n        var _this = _super.call(this, errorCode, errorMessage, subError) || this;\r\n        _this.name = \"InteractionRequiredAuthError\";\r\n        Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n     * @param errorCode\r\n     * @param errorString\r\n     * @param subError\r\n     */\r\n    InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {\r\n        var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\r\n        var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n        var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function (irErrorCode) {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n        return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\r\n    };\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    InteractionRequiredAuthError.createNoTokensFoundError = function () {\r\n        return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\r\n    };\r\n    return InteractionRequiredAuthError;\r\n}(AuthError));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar CacheRecord = /** @class */ (function () {\r\n    function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {\r\n        this.account = accountEntity || null;\r\n        this.idToken = idTokenEntity || null;\r\n        this.accessToken = accessTokenEntity || null;\r\n        this.refreshToken = refreshTokenEntity || null;\r\n        this.appMetadata = appMetadataEntity || null;\r\n    }\r\n    return CacheRecord;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nvar ProtocolUtils = /** @class */ (function () {\r\n    function ProtocolUtils() {\r\n    }\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {\r\n        var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return !StringUtils.isEmpty(userState) ? \"\" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;\r\n    };\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"generateLibraryState\");\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        var stateObj = {\r\n            id: cryptoObj.createNewGuid()\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        var stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    };\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    ProtocolUtils.parseRequestState = function (cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw ClientAuthError.createNoCryptoObjectError(\"parseRequestState\");\r\n        }\r\n        if (StringUtils.isEmpty(state)) {\r\n            throw ClientAuthError.createInvalidStateError(state, \"Null, undefined or empty state\");\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            var splitState = state.split(Constants.RESOURCE_DELIM);\r\n            var libraryState = splitState[0];\r\n            var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : \"\";\r\n            var libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            var libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: !StringUtils.isEmpty(userState) ? userState : \"\",\r\n                libraryState: libraryStateObj\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    };\r\n    return ProtocolUtils;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            var lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    UrlString.appendQueryString = function (url, queryString) {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\r\n    };\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    UrlString.removeHashFromUrl = function (url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        return UrlString.parseHash(this.urlString);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    };\r\n    UrlString.getDomainFromUrl = function (url) {\r\n        var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        var match = url.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\r\n        }\r\n        return match[2];\r\n    };\r\n    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            var url = new UrlString(baseUrl);\r\n            var baseComponents = url.getUrlComponents();\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        return relativeUrl;\r\n    };\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    UrlString.parseHash = function (hashString) {\r\n        var hashIndex1 = hashString.indexOf(\"#\");\r\n        var hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return \"\";\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedHash = function (hash) {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        var parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (hash) {\r\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\r\n            // Hash doesn't contain key/value pairs\r\n            return false;\r\n        }\r\n        var parameters = UrlString.getDeserializedHash(hash);\r\n        return !!(parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar KeyLocation;\r\n(function (KeyLocation) {\r\n    KeyLocation[\"SW\"] = \"sw\";\r\n    KeyLocation[\"UHW\"] = \"uhw\";\r\n})(KeyLocation || (KeyLocation = {}));\r\nvar PopTokenGenerator = /** @class */ (function () {\r\n    function PopTokenGenerator(cryptoUtils) {\r\n        this.cryptoUtils = cryptoUtils;\r\n    }\r\n    PopTokenGenerator.prototype.generateCnf = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqCnf;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.generateKid(request)];\r\n                    case 1:\r\n                        reqCnf = _a.sent();\r\n                        return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PopTokenGenerator.prototype.generateKid = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var kidThumbprint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];\r\n                    case 1:\r\n                        kidThumbprint = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                kid: kidThumbprint,\r\n                                xms_ksl: KeyLocation.SW\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tokenClaims;\r\n            return __generator(this, function (_b) {\r\n                tokenClaims = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\r\n                if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\r\n                    throw ClientAuthError.createTokenClaimsRequiredError();\r\n                }\r\n                return [2 /*return*/, this.signPayload(accessToken, tokenClaims.cnf.kid, request)];\r\n            });\r\n        });\r\n    };\r\n    PopTokenGenerator.prototype.signPayload = function (payload, kid, request, claims) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;\r\n                        resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n                        resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\r\n                        return [4 /*yield*/, this.cryptoUtils.signJwt(__assign({ at: payload, ts: TimeUtils.nowSeconds(), m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(), u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort, nonce: shrNonce || this.cryptoUtils.createNewGuid(), p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath, q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined, client_claims: shrClaims || undefined }, claims), kid)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PopTokenGenerator;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * APP_METADATA Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: appmetadata-<environment>-<client_id>\r\n *\r\n * Value:\r\n * {\r\n *      clientId: client ID of the application\r\n *      environment: entity that issued the token, represented as a full host\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n * }\r\n */\r\nvar AppMetadataEntity = /** @class */ (function () {\r\n    function AppMetadataEntity() {\r\n    }\r\n    /**\r\n     * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n     */\r\n    AppMetadataEntity.prototype.generateAppMetadataKey = function () {\r\n        return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);\r\n    };\r\n    /**\r\n     * Generate AppMetadata Cache Key\r\n     */\r\n    AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {\r\n        var appMetaDataKeyArray = [\r\n            APP_METADATA,\r\n            environment,\r\n            clientId,\r\n        ];\r\n        return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Creates AppMetadataEntity\r\n     * @param clientId\r\n     * @param environment\r\n     * @param familyId\r\n     */\r\n    AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {\r\n        var appMetadata = new AppMetadataEntity();\r\n        appMetadata.clientId = clientId;\r\n        appMetadata.environment = environment;\r\n        if (familyId) {\r\n            appMetadata.familyId = familyId;\r\n        }\r\n        return appMetadata;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AppMetadataEntity.isAppMetadataEntity = function (key, entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (key.indexOf(APP_METADATA) === 0 &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"environment\"));\r\n    };\r\n    return AppMetadataEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ var TokenCacheContext = /** @class */ (function () {\r\n    function TokenCacheContext(tokenCache, hasChanged) {\r\n        this.cache = tokenCache;\r\n        this.hasChanged = hasChanged;\r\n    }\r\n    Object.defineProperty(TokenCacheContext.prototype, \"cacheHasChanged\", {\r\n        /**\r\n         * boolean which indicates the changes in cache\r\n         */\r\n        get: function () {\r\n            return this.hasChanged;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TokenCacheContext.prototype, \"tokenCache\", {\r\n        /**\r\n         * function to retrieve the token cache\r\n         */\r\n        get: function () {\r\n            return this.cache;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return TokenCacheContext;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class that handles response parsing.\r\n */\r\nvar ResponseHandler = /** @class */ (function () {\r\n    function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n    }\r\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param cachedState\r\n     * @param cryptoObj\r\n     */\r\n    ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\r\n        if (!serverResponseHash.state || !cachedState) {\r\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\r\n            throw ClientAuthError.createStateMismatchError();\r\n        }\r\n        // Check for error\r\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n            }\r\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n        }\r\n        if (serverResponseHash.client_info) {\r\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\r\n        }\r\n    };\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     */\r\n    ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\r\n        // Check for error\r\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\r\n            }\r\n            var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\r\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (serverTokenResponse.id_token) {\r\n                            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\r\n                            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n                            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\r\n                                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\r\n                                    throw ClientAuthError.createNonceMismatchError();\r\n                                }\r\n                            }\r\n                        }\r\n                        // generate homeAccountId\r\n                        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\r\n                        if (!!authCodePayload && !!authCodePayload.state) {\r\n                            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n                        }\r\n                        // Add keyId from request to serverTokenResponse if defined\r\n                        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\r\n                        cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, , 5, 8]);\r\n                        if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];\r\n                        this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                        cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                        return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        /*\r\n                         * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n                         * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n                         * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n                         */\r\n                        if (handlingRefreshTokenResponse && cacheRecord.account) {\r\n                            key = cacheRecord.account.generateAccountKey();\r\n                            account = this.cacheStorage.getAccount(key);\r\n                            if (!account) {\r\n                                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, this.cacheStorage.saveCacheRecord(cacheRecord)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 5:\r\n                        if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 7];\r\n                        this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                        return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];\r\n                    case 6:\r\n                        _a.sent();\r\n                        _a.label = 7;\r\n                    case 7: return [7 /*endfinally*/];\r\n                    case 8: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, idTokenObj, requestScopes, oboAssertion, authCodePayload) {\r\n        var env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        var cachedIdToken;\r\n        var cachedAccount;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\r\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING, oboAssertion);\r\n            cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);\r\n        }\r\n        // AccessToken\r\n        var cachedAccessToken = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\r\n            // If scopes not returned in server response, use request scopes\r\n            var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\r\n            var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\r\n            var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\r\n            var tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion, serverTokenResponse.key_id);\r\n        }\r\n        // refreshToken\r\n        var cachedRefreshToken = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\r\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);\r\n        }\r\n        // appMetadata\r\n        var cachedAppMetadata = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\r\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\r\n        }\r\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\r\n    };\r\n    /**\r\n     * Generate Account\r\n     * @param serverTokenResponse\r\n     * @param idToken\r\n     * @param authority\r\n     */\r\n    ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {\r\n        var authorityType = authority.authorityType;\r\n        var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\r\n        var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\r\n        // ADFS does not require client_info in the response\r\n        if (authorityType === exports.AuthorityType.Adfs) {\r\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\r\n            return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\r\n        }\r\n        // This fallback applies to B2C as well as they fall under an AAD account type.\r\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\r\n            throw ClientAuthError.createClientInfoEmptyError();\r\n        }\r\n        return serverTokenResponse.client_info ?\r\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) :\r\n            AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);\r\n    };\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState) {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        accessToken = \"\";\r\n                        responseScopes = [];\r\n                        expiresOn = null;\r\n                        familyId = Constants.EMPTY_STRING;\r\n                        if (!cacheRecord.accessToken) return [3 /*break*/, 4];\r\n                        if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                        return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];\r\n                    case 1:\r\n                        accessToken = _d.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        accessToken = cacheRecord.accessToken.secret;\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n                        expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n                        extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n                        _d.label = 4;\r\n                    case 4:\r\n                        if (cacheRecord.appMetadata) {\r\n                            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\r\n                        }\r\n                        uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\r\n                        tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\r\n                        return [2 /*return*/, {\r\n                                authority: authority.canonicalAuthority,\r\n                                uniqueId: uid,\r\n                                tenantId: tid,\r\n                                scopes: responseScopes,\r\n                                account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\r\n                                idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n                                idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n                                accessToken: accessToken,\r\n                                fromCache: fromTokenCache,\r\n                                expiresOn: expiresOn,\r\n                                correlationId: request.correlationId,\r\n                                extExpiresOn: extExpiresOn,\r\n                                familyId: familyId,\r\n                                tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\r\n                                state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\r\n                                cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\r\n                                msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return ResponseHandler;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createAuthCodeUrlQueryString(request);\r\n                return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        if (!request || StringUtils.isEmpty(request.code)) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI.\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshJwk: request.sshJwk,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        cnfString = _a.sent();\r\n                        parameterBuilder.addPopToken(cnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case exports.CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n        parameterBuilder.addScopes(requestScopes);\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n        // generate the correlationId if not set by the user and add\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            }\r\n            else if (request.account) {\r\n                var accountSid = this.extractAccountSid(request.account);\r\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    // SessionId is only used in silent calls\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n                else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                }\r\n                else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        if (account.idTokenClaims) {\r\n            var tokenClaims = account.idTokenClaims;\r\n            return tokenClaims.sid || null;\r\n        }\r\n        return null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshJwk: request.sshJwk,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 6];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshJwk: request.sshJwk,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        // user authorization is pending. Sleep for polling interval and try again\r\n                        this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 5: return [3 /*break*/, 1];\r\n                    case 6:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nvar RefreshTokenClient = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenClient, _super);\r\n    function RefreshTokenClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    RefreshTokenClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\r\n            return __generator(this, function (_a) {\r\n                // Cannot renew token if no request object is given.\r\n                if (!request) {\r\n                    throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                }\r\n                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                if (!request.account) {\r\n                    throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                }\r\n                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n                if (isFOCI) {\r\n                    try {\r\n                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\r\n                    }\r\n                    catch (e) {\r\n                        noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\r\n                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n                            // throw in all other cases\r\n                        }\r\n                        else {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                }\r\n                // fall back to application refresh token acquisition\r\n                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var refreshToken, refreshTokenRequest;\r\n            return __generator(this, function (_a) {\r\n                refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n                // no refresh Token\r\n                if (!refreshToken) {\r\n                    throw InteractionRequiredAuthError.createNoTokensFoundError();\r\n                }\r\n                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || exports.AuthenticationScheme.BEARER, ccsCredential: {\r\n                        credential: request.account.homeAccountId,\r\n                        type: exports.CcsCredentialType.HOME_ACCOUNT_ID\r\n                    } });\r\n                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, queryParameters, headers, thumbprint, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshJwk: request.sshJwk,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, cnfString, clientInfo;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        parameterBuilder.addRefreshToken(request.refreshToken);\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        cnfString = _a.sent();\r\n                        parameterBuilder.addPopToken(cnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n                            switch (request.ccsCredential.type) {\r\n                                case exports.CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case exports.CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RefreshTokenClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nvar ClientCredentialClient = /** @class */ (function (_super) {\r\n    __extends(ClientCredentialClient, _super);\r\n    function ClientCredentialClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken) {\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: null,\r\n                                idToken: null,\r\n                                accessToken: cachedAccessToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads access token from the cache\r\n     * TODO: Move this call to cacheManager instead\r\n     */\r\n    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            homeAccountId: \"\",\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase()\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshJwk: request.sshJwk,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return ClientCredentialClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nvar OnBehalfOfClient = /** @class */ (function (_super) {\r\n    __extends(OnBehalfOfClient, _super);\r\n    function OnBehalfOfClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * look up cache for tokens\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken ||\r\n                            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Update the server telemetry outcome\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        cachedIdToken = this.readIdTokenFromCache(request);\r\n                        cachedAccount = null;\r\n                        if (cachedIdToken) {\r\n                            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n                            localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n                            accountInfo = {\r\n                                homeAccountId: cachedIdToken.homeAccountId,\r\n                                environment: cachedIdToken.environment,\r\n                                tenantId: cachedIdToken.realm,\r\n                                username: Constants.EMPTY_STRING,\r\n                                localAccountId: localAccountId || \"\"\r\n                            };\r\n                            cachedAccount = this.readAccountFromCache(accountInfo);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: cachedAccount,\r\n                                accessToken: cachedAccessToken,\r\n                                idToken: cachedIdToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request, idTokenObject)];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * read access token from cache TODO: CacheManager API should be used here\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase(),\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) { return credentialCache.accessTokens[key]; });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * read idtoken from cache TODO: CacheManager API should be used here instead\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\r\n        var idTokenFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: exports.CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            oboAssertion: request.oboAssertion\r\n        };\r\n        var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\r\n        var idTokens = Object.keys(credentialCache.idTokens).map(function (key) { return credentialCache.idTokens[key]; });\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * read account from cache, TODO: CacheManager API should be used here instead\r\n     * @param account\r\n     */\r\n    OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\r\n        return this.cacheManager.readAccountFromCache(account);\r\n    };\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshJwk: request.sshJwk,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\r\n                    case 2:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return OnBehalfOfClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SilentFlowClient = /** @class */ (function (_super) {\r\n    __extends(SilentFlowClient, _super);\r\n    function SilentFlowClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1, refreshTokenClient;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.acquireCachedToken(request)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                            refreshTokenClient = new RefreshTokenClient(this.config);\r\n                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\r\n                        }\r\n                        else {\r\n                            throw e_1;\r\n                        }\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireCachedToken = function (request) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestScopes, environment, authScheme, cacheRecord;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        if (request.forceRefresh) {\r\n                            // Must refresh due to present force_refresh flag.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (!StringUtils.isEmptyObj(request.claims)) {\r\n                            // Must refresh due to request parameters.\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because claims are requested.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                        if (!request.account) {\r\n                            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                        }\r\n                        requestScopes = new ScopeSet(request.scopes || []);\r\n                        environment = request.authority || this.authority.getPreferredCache();\r\n                        authScheme = request.authenticationScheme || exports.AuthenticationScheme.BEARER;\r\n                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme, request.sshKid);\r\n                        if (!cacheRecord.accessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Must refresh due to expired access_token.\r\n                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n                            // Must refresh due to the refresh_in value.\r\n                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (cacheRecord.idToken) {\r\n                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SilentFlowClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, headers;\r\n            return __generator(this, function (_a) {\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshJwk: request.sshJwk,\r\n                    sshKid: request.sshKid\r\n                };\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: exports.CcsCredentialType.UPN\r\n                });\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isOpenIdConfigResponse(response) {\r\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\r\n        response.hasOwnProperty(\"token_endpoint\") &&\r\n        response.hasOwnProperty(\"issuer\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nexports.ProtocolMode = void 0;\r\n(function (ProtocolMode) {\r\n    ProtocolMode[\"AAD\"] = \"AAD\";\r\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\r\n})(exports.ProtocolMode || (exports.ProtocolMode = {}));\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar AuthorityMetadataEntity = /** @class */ (function () {\r\n    function AuthorityMetadataEntity() {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n    /**\r\n     * Update the entity with new aliases, preferred_cache and preferred_network values\r\n     * @param metadata\r\n     * @param fromNetwork\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {\r\n        this.aliases = metadata.aliases;\r\n        this.preferred_cache = metadata.preferred_cache;\r\n        this.preferred_network = metadata.preferred_network;\r\n        this.aliasesFromNetwork = fromNetwork;\r\n    };\r\n    /**\r\n     * Update the entity with new endpoints\r\n     * @param metadata\r\n     * @param fromNetwork\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {\r\n        this.authorization_endpoint = metadata.authorization_endpoint;\r\n        this.token_endpoint = metadata.token_endpoint;\r\n        this.end_session_endpoint = metadata.end_session_endpoint;\r\n        this.issuer = metadata.issuer;\r\n        this.endpointsFromNetwork = fromNetwork;\r\n    };\r\n    /**\r\n     * Save the authority that was used to create this cache entry\r\n     * @param authority\r\n     */\r\n    AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {\r\n        this.canonical_authority = authority;\r\n    };\r\n    /**\r\n     * Reset the exiresAt value\r\n     */\r\n    AuthorityMetadataEntity.prototype.resetExpiresAt = function () {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    };\r\n    /**\r\n     * Returns whether or not the data needs to be refreshed\r\n     */\r\n    AuthorityMetadataEntity.prototype.isExpired = function () {\r\n        return this.expiresAt <= TimeUtils.nowSeconds();\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n            entity.hasOwnProperty(\"aliases\") &&\r\n            entity.hasOwnProperty(\"preferred_cache\") &&\r\n            entity.hasOwnProperty(\"preferred_network\") &&\r\n            entity.hasOwnProperty(\"canonical_authority\") &&\r\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n            entity.hasOwnProperty(\"token_endpoint\") &&\r\n            entity.hasOwnProperty(\"issuer\") &&\r\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n            entity.hasOwnProperty(\"expiresAt\"));\r\n    };\r\n    return AuthorityMetadataEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryResponse(response) {\r\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\r\n        response.hasOwnProperty(\"metadata\"));\r\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 6, , 7]);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _a.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.getCurrentVersion()];\r\n                    case 3:\r\n                        currentIMDSVersion = _a.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _a.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _a.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _a.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = { headers: { \"Metadata\": \"true\" } };\r\n    return RegionDiscovery;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface, cacheManager, authorityOptions) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"authorityType\", {\r\n        // See above for AuthorityType\r\n        get: function () {\r\n            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\r\n            if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\r\n                return exports.AuthorityType.Adfs;\r\n            }\r\n            return exports.AuthorityType.Default;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"protocolMode\", {\r\n        /**\r\n         * ProtocolMode enum representing the way endpoints are constructed.\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions.protocolMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"options\", {\r\n        /**\r\n         * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthority.validateAsUri();\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\r\n        /**\r\n         * Get hostname and port i.e. login.microsoftonline.com\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.authorization_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                // ROPC policies may not have end_session_endpoint set\r\n                if (!this.metadata.end_session_endpoint) {\r\n                    throw ClientAuthError.createLogoutNotSupportedError();\r\n                }\r\n                var endpoint = this.replacePath(this.metadata.end_session_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.issuer);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    };\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replacePath = function (urlString) {\r\n        var endpoint = urlString;\r\n        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach(function (currentPart, index) {\r\n            var cachedPart = cachedAuthorityParts[index];\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\r\n            }\r\n        });\r\n        return endpoint;\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            if (this.authorityType === exports.AuthorityType.Adfs || this.protocolMode === exports.ProtocolMode.OIDC) {\r\n                return this.canonicalAuthority + \".well-known/openid-configuration\";\r\n            }\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.metadata;\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n                        if (!metadataEntity) {\r\n                            metadataEntity = new AuthorityMetadataEntity();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\r\n                    case 1:\r\n                        cloudDiscoverySource = _a.sent();\r\n                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\r\n                    case 2:\r\n                        endpointSource = _a.sent();\r\n                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n                            // Reset the expiration time unless both values came from a successful cache lookup\r\n                            metadataEntity.resetExpiresAt();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n                        this.metadata = metadataEntity;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, autodetectedRegionName, azureRegion;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        metadata = this.getEndpointMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateEndpointMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _b.sent();\r\n                        if (!metadata) return [3 /*break*/, 4];\r\n                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata)];\r\n                    case 2:\r\n                        autodetectedRegionName = _b.sent();\r\n                        azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\r\n                            ? autodetectedRegionName\r\n                            : this.authorityOptions.azureRegionConfiguration.azureRegion;\r\n                        if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                        }\r\n                        else {\r\n                            if (autodetectedRegionName) {\r\n                                this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\r\n                            }\r\n                            else {\r\n                                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                            }\r\n                        }\r\n                        if (azureRegion) {\r\n                            this.regionDiscoveryMetadata.region_used = azureRegion;\r\n                            metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\r\n                        }\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        metadataEntity.updateEndpointMetadata(metadata, true);\r\n                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                    case 4: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.isAuthoritySameType = function (metadataEntity) {\r\n        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    };\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromConfig = function () {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n     * @param cachedMetadata\r\n     * @param newMetadata\r\n     */\r\n    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                        }\r\n                        else {\r\n                            // Metadata could not be obtained from config, cache or network\r\n                            throw ClientConfigurationError.createUntrustedAuthorityError();\r\n                        }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            try {\r\n                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                if (metadata) {\r\n                    return metadata;\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     * @param networkInterface\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var instanceDiscoveryEndpoint, match, response, metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n                        match = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\r\n                        if (metadata.length === 0) {\r\n                            // If no metadata is returned, authority is untrusted\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4:\r\n                        if (!match) {\r\n                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \r\n                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n                        }\r\n                        return [2 /*return*/, match];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    Authority.prototype.isInKnownAuthorities = function () {\r\n        var _this = this;\r\n        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\r\n        });\r\n        return matches.length > 0;\r\n    };\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    Authority.createCloudDiscoveryMetadataFromHost = function (host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    };\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response\r\n     * @param authority\r\n     */\r\n    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\r\n        for (var i = 0; i < response.length; i++) {\r\n            var metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    Authority.prototype.getPreferredCache = function () {\r\n        if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    Authority.prototype.isAlias = function (host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    };\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    Authority.isPublicCloudAuthority = function (host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    };\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    Authority.buildRegionalAuthorityString = function (host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        var authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        var authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\r\n        }\r\n        // Include the query string portion of the url\r\n        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return url + \"?\" + queryString;\r\n        return url;\r\n    };\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\r\n        if (metadata.end_session_endpoint) {\r\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return metadata;\r\n    };\r\n    return Authority;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var acquireTokenAuthority, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, acquireTokenAuthority];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions) {\r\n        // Throw error if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions);\r\n    };\r\n    return AuthorityFactory;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryEntity = /** @class */ (function () {\r\n    function ServerTelemetryEntity() {\r\n        this.failedRequests = [];\r\n        this.errors = [];\r\n        this.cacheHits = 0;\r\n    }\r\n    /**\r\n     * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n     * @param key\r\n     * @param entity\r\n     */\r\n    ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {\r\n        var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n        var validateEntity = true;\r\n        if (entity) {\r\n            validateEntity =\r\n                entity.hasOwnProperty(\"failedRequests\") &&\r\n                    entity.hasOwnProperty(\"errors\") &&\r\n                    entity.hasOwnProperty(\"cacheHits\");\r\n        }\r\n        return validateKey && validateEntity;\r\n    };\r\n    return ServerTelemetryEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingEntity = /** @class */ (function () {\r\n    function ThrottlingEntity() {\r\n    }\r\n    /**\r\n     * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n     * @param key\r\n     * @param entity\r\n     */\r\n    ThrottlingEntity.isThrottlingEntity = function (key, entity) {\r\n        var validateKey = false;\r\n        if (key) {\r\n            validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\r\n        }\r\n        var validateEntity = true;\r\n        if (entity) {\r\n            validateEntity = entity.hasOwnProperty(\"throttleTime\");\r\n        }\r\n        return validateKey && validateEntity;\r\n    };\r\n    return ThrottlingEntity;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar StubbedNetworkModule = {\r\n    sendGetRequestAsync: function () {\r\n        var notImplErr = \"Network interface - sendGetRequestAsync() has not been implemented for the Network interface.\";\r\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\r\n    },\r\n    sendPostRequestAsync: function () {\r\n        var notImplErr = \"Network interface - sendPostRequestAsync() has not been implemented for the Network interface.\";\r\n        return Promise.reject(AuthError.createUnexpectedError(notImplErr));\r\n    }\r\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nvar AuthenticationHeaderParser = /** @class */ (function () {\r\n    function AuthenticationHeaderParser(headers) {\r\n        this.headers = headers;\r\n    }\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.getShrNonce = function () {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\r\n        }\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\r\n            if (wwwAuthenticateChallenges.nonce) {\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\r\n        }\r\n        // If neither header is present, throw missing headers error\r\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\r\n    };\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\r\n        var schemeSeparator = header.indexOf(\" \");\r\n        var challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        var challengeMap = {};\r\n        challenges.forEach(function (challenge) {\r\n            var _a = challenge.split(\"=\"), key = _a[0], value = _a[1];\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, \"\"));\r\n        });\r\n        return challengeMap;\r\n    };\r\n    return AuthenticationHeaderParser;\r\n}());\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryManager = /** @class */ (function () {\r\n    function ServerTelemetryManager(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\r\n        var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\r\n        var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\r\n        var lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        }\r\n        else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        }\r\n        else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return;\r\n    };\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    ServerTelemetryManager.prototype.incrementCacheHits = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    };\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    ServerTelemetryManager.prototype.getLastRequests = function () {\r\n        var initialValue = new ServerTelemetryEntity();\r\n        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    };\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    ServerTelemetryManager.prototype.clearTelemetryCache = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            var serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\r\n        var i;\r\n        var maxErrors = 0;\r\n        var dataSize = 0;\r\n        var errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\r\n            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\r\n            var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    };\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\r\n        var regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || \"\");\r\n        regionDiscoveryFields.push(this.regionSource || \"\");\r\n        regionDiscoveryFields.push(this.regionOutcome || \"\");\r\n        return regionDiscoveryFields.join(\",\");\r\n    };\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    };\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    };\r\n    return ServerTelemetryManager;\r\n}());\n\nexports.AccessTokenEntity = AccessTokenEntity;\nexports.AccountEntity = AccountEntity;\nexports.AppMetadataEntity = AppMetadataEntity;\nexports.AuthError = AuthError;\nexports.AuthErrorMessage = AuthErrorMessage;\nexports.AuthToken = AuthToken;\nexports.AuthenticationHeaderParser = AuthenticationHeaderParser;\nexports.Authority = Authority;\nexports.AuthorityFactory = AuthorityFactory;\nexports.AuthorityMetadataEntity = AuthorityMetadataEntity;\nexports.AuthorizationCodeClient = AuthorizationCodeClient;\nexports.CacheManager = CacheManager;\nexports.ClientAuthError = ClientAuthError;\nexports.ClientAuthErrorMessage = ClientAuthErrorMessage;\nexports.ClientConfigurationError = ClientConfigurationError;\nexports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;\nexports.ClientCredentialClient = ClientCredentialClient;\nexports.Constants = Constants;\nexports.CredentialEntity = CredentialEntity;\nexports.DEFAULT_CRYPTO_IMPLEMENTATION = DEFAULT_CRYPTO_IMPLEMENTATION;\nexports.DEFAULT_SYSTEM_OPTIONS = DEFAULT_SYSTEM_OPTIONS;\nexports.DefaultStorageClass = DefaultStorageClass;\nexports.DeviceCodeClient = DeviceCodeClient;\nexports.IdToken = AuthToken;\nexports.IdTokenEntity = IdTokenEntity;\nexports.InteractionRequiredAuthError = InteractionRequiredAuthError;\nexports.InteractionRequiredAuthErrorMessage = InteractionRequiredAuthErrorMessage;\nexports.Logger = Logger;\nexports.NetworkManager = NetworkManager;\nexports.OIDC_DEFAULT_SCOPES = OIDC_DEFAULT_SCOPES;\nexports.OnBehalfOfClient = OnBehalfOfClient;\nexports.PopTokenGenerator = PopTokenGenerator;\nexports.PromptValue = PromptValue;\nexports.ProtocolUtils = ProtocolUtils;\nexports.RefreshTokenClient = RefreshTokenClient;\nexports.RefreshTokenEntity = RefreshTokenEntity;\nexports.ScopeSet = ScopeSet;\nexports.ServerError = ServerError;\nexports.ServerTelemetryEntity = ServerTelemetryEntity;\nexports.ServerTelemetryManager = ServerTelemetryManager;\nexports.SilentFlowClient = SilentFlowClient;\nexports.StringUtils = StringUtils;\nexports.StubbedNetworkModule = StubbedNetworkModule;\nexports.ThrottlingEntity = ThrottlingEntity;\nexports.ThrottlingUtils = ThrottlingUtils;\nexports.TimeUtils = TimeUtils;\nexports.TokenCacheContext = TokenCacheContext;\nexports.UrlString = UrlString;\nexports.UsernamePasswordClient = UsernamePasswordClient;\nexports.version = version;\n//# sourceMappingURL=index.cjs.js.map\n",
    "\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./msal-node.cjs.production.min.js')\n} else {\n  module.exports = require('./msal-node.cjs.development.js')\n}\n",
    "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar msalCommon = require('@azure/msal-common');\nvar axios = _interopDefault(require('axios'));\nvar uuid = require('uuid');\nvar crypto = _interopDefault(require('crypto'));\nvar jsonwebtoken = require('jsonwebtoken');\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * http methods\r\n */\nvar HttpMethod;\n\n(function (HttpMethod) {\n  HttpMethod[\"GET\"] = \"get\";\n  HttpMethod[\"POST\"] = \"post\";\n})(HttpMethod || (HttpMethod = {}));\n/**\r\n * Constants used for region discovery\r\n */\n\n\nconst REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\n/**\r\n * Constant used for PKCE\r\n */\n\nconst RANDOM_OCTET_SIZE = 32;\n/**\r\n * Constants used in PKCE\r\n */\n\nconst Hash = {\n  SHA256: \"sha256\"\n};\n/**\r\n * Constants for encoding schemes\r\n */\n\nconst CharSet = {\n  CV_CHARSET: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\"\n};\n/**\r\n * Constants\r\n */\n\nconst Constants = {\n  MSAL_SKU: \"msal.js.node\",\n  JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 600-699 Device Code Flow\r\n * 800-899 Auth Code Flow\r\n */\n\nvar ApiId;\n\n(function (ApiId) {\n  ApiId[ApiId[\"acquireTokenSilent\"] = 62] = \"acquireTokenSilent\";\n  ApiId[ApiId[\"acquireTokenByUsernamePassword\"] = 371] = \"acquireTokenByUsernamePassword\";\n  ApiId[ApiId[\"acquireTokenByDeviceCode\"] = 671] = \"acquireTokenByDeviceCode\";\n  ApiId[ApiId[\"acquireTokenByClientCredential\"] = 771] = \"acquireTokenByClientCredential\";\n  ApiId[ApiId[\"acquireTokenByCode\"] = 871] = \"acquireTokenByCode\";\n  ApiId[ApiId[\"acquireTokenByRefreshToken\"] = 872] = \"acquireTokenByRefreshToken\";\n})(ApiId || (ApiId = {}));\n/**\r\n * JWT  constants\r\n */\n\n\nconst JwtConstants = {\n  ALGORITHM: \"alg\",\n  RSA_256: \"RS256\",\n  X5T: \"x5t\",\n  X5C: \"x5c\",\n  AUDIENCE: \"aud\",\n  EXPIRATION_TIME: \"exp\",\n  ISSUER: \"iss\",\n  SUBJECT: \"sub\",\n  NOT_BEFORE: \"nbf\",\n  JWT_ID: \"jti\"\n};\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the API for network requests.\r\n */\n\nclass HttpClient {\n  /**\r\n   * Http Get request\r\n   * @param url\r\n   * @param options\r\n   */\n  async sendGetRequestAsync(url, options) {\n    const request = {\n      method: HttpMethod.GET,\n      url: url,\n\n      /* istanbul ignore next */\n      headers: options && options.headers,\n\n      /* istanbul ignore next */\n      validateStatus: () => true\n    };\n    const response = await axios(request);\n    return {\n      headers: response.headers,\n      body: response.data,\n      status: response.status\n    };\n  }\n  /**\r\n   * Http Post request\r\n   * @param url\r\n   * @param options\r\n   */\n\n\n  async sendPostRequestAsync(url, options, cancellationToken) {\n    const request = {\n      method: HttpMethod.POST,\n      url: url,\n\n      /* istanbul ignore next */\n      data: options && options.body || \"\",\n      timeout: cancellationToken,\n\n      /* istanbul ignore next */\n      headers: options && options.headers,\n\n      /* istanbul ignore next */\n      validateStatus: () => true\n    };\n    const response = await axios(request);\n    return {\n      headers: response.headers,\n      body: response.data,\n      status: response.status\n    };\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass NetworkUtils {\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n  static getNetworkClient() {\n    return new HttpClient();\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst DEFAULT_AUTH_OPTIONS = {\n  clientId: \"\",\n  authority: msalCommon.Constants.DEFAULT_AUTHORITY,\n  clientSecret: \"\",\n  clientAssertion: \"\",\n  clientCertificate: {\n    thumbprint: \"\",\n    privateKey: \"\",\n    x5c: \"\"\n  },\n  knownAuthorities: [],\n  cloudDiscoveryMetadata: \"\",\n  authorityMetadata: \"\",\n  clientCapabilities: [],\n  protocolMode: msalCommon.ProtocolMode.AAD\n};\nconst DEFAULT_CACHE_OPTIONS = {};\nconst DEFAULT_LOGGER_OPTIONS = {\n  loggerCallback: () => {// allow users to not set logger call back\n  },\n  piiLoggingEnabled: false,\n  logLevel: msalCommon.LogLevel.Info\n};\nconst DEFAULT_SYSTEM_OPTIONS = {\n  loggerOptions: DEFAULT_LOGGER_OPTIONS,\n  networkClient: /*#__PURE__*/NetworkUtils.getNetworkClient()\n};\n/**\r\n * Sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth - Authentication options\r\n * @param cache - Cache options\r\n * @param system - System options\r\n *\r\n * @returns Configuration\r\n * @public\r\n */\n\nfunction buildAppConfiguration({\n  auth,\n  cache,\n  system\n}) {\n  return {\n    auth: { ...DEFAULT_AUTH_OPTIONS,\n      ...auth\n    },\n    cache: { ...DEFAULT_CACHE_OPTIONS,\n      ...cache\n    },\n    system: { ...DEFAULT_SYSTEM_OPTIONS,\n      ...system\n    }\n  };\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass GuidGenerator {\n  /**\r\n   *\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\r\n   * uuidv4 generates guids from cryprtographically-string random\r\n   */\n  static generateGuid() {\n    return uuid.v4();\n  }\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n\n\n  static isGuid(guid) {\n    const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass EncodingUtils {\n  /**\r\n   * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n   * 'base64': Base64 encoding.\r\n   *\r\n   * @param str text\r\n   */\n  static base64Encode(str, encoding) {\n    return Buffer.from(str, encoding).toString(\"base64\");\n  }\n  /**\r\n   * encode a URL\r\n   * @param str\r\n   */\n\n\n  static base64EncodeUrl(str, encoding) {\n    return EncodingUtils.base64Encode(str, encoding).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n  }\n  /**\r\n   * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n   * 'base64': Base64 encoding.\r\n   *\r\n   * @param base64Str Base64 encoded text\r\n   */\n\n\n  static base64Decode(base64Str) {\n    return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\n  }\n  /**\r\n   * @param base64Str Base64 encoded Url\r\n   */\n\n\n  static base64DecodeUrl(base64Str) {\n    let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n    while (str.length % 4) {\n      str += \"=\";\n    }\n\n    return EncodingUtils.base64Decode(str);\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * https://tools.ietf.org/html/rfc7636#page-8\r\n */\n\nclass PkceGenerator {\n  /**\r\n   * generates the codeVerfier and the challenge from the codeVerfier\r\n   * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\r\n   */\n  async generatePkceCodes() {\n    const verifier = this.generateCodeVerifier();\n    const challenge = this.generateCodeChallengeFromVerifier(verifier);\n    return {\n      verifier,\n      challenge\n    };\n  }\n  /**\r\n   * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\r\n   */\n\n\n  generateCodeVerifier() {\n    const charArr = [];\n    const maxNumber = 256 - 256 % CharSet.CV_CHARSET.length;\n\n    while (charArr.length <= RANDOM_OCTET_SIZE) {\n      const byte = crypto.randomBytes(1)[0];\n\n      if (byte >= maxNumber) {\n        /*\r\n         * Ignore this number to maintain randomness.\r\n         * Including it would result in an unequal distribution of characters after doing the modulo\r\n         */\n        continue;\n      }\n\n      const index = byte % CharSet.CV_CHARSET.length;\n      charArr.push(CharSet.CV_CHARSET[index]);\n    }\n\n    const verifier = charArr.join(\"\");\n    return EncodingUtils.base64EncodeUrl(verifier);\n  }\n  /**\r\n   * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\r\n   * @param codeVerifier\r\n   */\n\n\n  generateCodeChallengeFromVerifier(codeVerifier) {\n    return EncodingUtils.base64EncodeUrl(this.sha256(codeVerifier).toString(\"base64\"), \"base64\");\n  }\n  /**\r\n   * generate 'SHA256' hash\r\n   * @param buffer\r\n   */\n\n\n  sha256(buffer) {\n    return crypto.createHash(Hash.SHA256).update(buffer).digest();\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n * @public\r\n */\n\nclass CryptoProvider {\n  constructor() {\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.pkceGenerator = new PkceGenerator();\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  createNewGuid() {\n    return GuidGenerator.generateGuid();\n  }\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input - string to be encoded\r\n   */\n\n\n  base64Encode(input) {\n    return EncodingUtils.base64Encode(input);\n  }\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input - string to be decoded\r\n   */\n\n\n  base64Decode(input) {\n    return EncodingUtils.base64Decode(input);\n  }\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  generatePkceCodes() {\n    return this.pkceGenerator.generatePkceCodes();\n  }\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\r\n   */\n\n\n  getPublicKeyThumbprint() {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  removeTokenBindingKey() {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\r\n   * Removes all cryptographic keys from Keystore\r\n   */\n\n\n  clearKeystore() {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\r\n   */\n\n\n  signJwt() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class deserializes cache entities read from the file into in memory object types defined internally\r\n */\n\nclass Deserializer {\n  /**\r\n   * Parse the JSON blob in memory and deserialize the content\r\n   * @param cachedJson\r\n   */\n  static deserializeJSONBlob(jsonFile) {\n    const deserializedCache = msalCommon.StringUtils.isEmpty(jsonFile) ? {} : JSON.parse(jsonFile);\n    return deserializedCache;\n  }\n  /**\r\n   * Deserializes accounts to AccountEntity objects\r\n   * @param accounts\r\n   */\n\n\n  static deserializeAccounts(accounts) {\n    const accountObjects = {};\n\n    if (accounts) {\n      Object.keys(accounts).map(function (key) {\n        const serializedAcc = accounts[key];\n        const mappedAcc = {\n          homeAccountId: serializedAcc.home_account_id,\n          environment: serializedAcc.environment,\n          realm: serializedAcc.realm,\n          localAccountId: serializedAcc.local_account_id,\n          username: serializedAcc.username,\n          authorityType: serializedAcc.authority_type,\n          name: serializedAcc.name,\n          clientInfo: serializedAcc.client_info,\n          lastModificationTime: serializedAcc.last_modification_time,\n          lastModificationApp: serializedAcc.last_modification_app\n        };\n        const account = new msalCommon.AccountEntity();\n        msalCommon.CacheManager.toObject(account, mappedAcc);\n        accountObjects[key] = account;\n      });\n    }\n\n    return accountObjects;\n  }\n  /**\r\n   * Deserializes id tokens to IdTokenEntity objects\r\n   * @param idTokens\r\n   */\n\n\n  static deserializeIdTokens(idTokens) {\n    const idObjects = {};\n\n    if (idTokens) {\n      Object.keys(idTokens).map(function (key) {\n        const serializedIdT = idTokens[key];\n        const mappedIdT = {\n          homeAccountId: serializedIdT.home_account_id,\n          environment: serializedIdT.environment,\n          credentialType: serializedIdT.credential_type,\n          clientId: serializedIdT.client_id,\n          secret: serializedIdT.secret,\n          realm: serializedIdT.realm\n        };\n        const idToken = new msalCommon.IdTokenEntity();\n        msalCommon.CacheManager.toObject(idToken, mappedIdT);\n        idObjects[key] = idToken;\n      });\n    }\n\n    return idObjects;\n  }\n  /**\r\n   * Deserializes access tokens to AccessTokenEntity objects\r\n   * @param accessTokens\r\n   */\n\n\n  static deserializeAccessTokens(accessTokens) {\n    const atObjects = {};\n\n    if (accessTokens) {\n      Object.keys(accessTokens).map(function (key) {\n        const serializedAT = accessTokens[key];\n        const mappedAT = {\n          homeAccountId: serializedAT.home_account_id,\n          environment: serializedAT.environment,\n          credentialType: serializedAT.credential_type,\n          clientId: serializedAT.client_id,\n          secret: serializedAT.secret,\n          realm: serializedAT.realm,\n          target: serializedAT.target,\n          cachedAt: serializedAT.cached_at,\n          expiresOn: serializedAT.expires_on,\n          extendedExpiresOn: serializedAT.extended_expires_on,\n          refreshOn: serializedAT.refresh_on,\n          keyId: serializedAT.key_id,\n          tokenType: serializedAT.token_type\n        };\n        const accessToken = new msalCommon.AccessTokenEntity();\n        msalCommon.CacheManager.toObject(accessToken, mappedAT);\n        atObjects[key] = accessToken;\n      });\n    }\n\n    return atObjects;\n  }\n  /**\r\n   * Deserializes refresh tokens to RefreshTokenEntity objects\r\n   * @param refreshTokens\r\n   */\n\n\n  static deserializeRefreshTokens(refreshTokens) {\n    const rtObjects = {};\n\n    if (refreshTokens) {\n      Object.keys(refreshTokens).map(function (key) {\n        const serializedRT = refreshTokens[key];\n        const mappedRT = {\n          homeAccountId: serializedRT.home_account_id,\n          environment: serializedRT.environment,\n          credentialType: serializedRT.credential_type,\n          clientId: serializedRT.client_id,\n          secret: serializedRT.secret,\n          familyId: serializedRT.family_id,\n          target: serializedRT.target,\n          realm: serializedRT.realm\n        };\n        const refreshToken = new msalCommon.RefreshTokenEntity();\n        msalCommon.CacheManager.toObject(refreshToken, mappedRT);\n        rtObjects[key] = refreshToken;\n      });\n    }\n\n    return rtObjects;\n  }\n  /**\r\n   * Deserializes appMetadata to AppMetaData objects\r\n   * @param appMetadata\r\n   */\n\n\n  static deserializeAppMetadata(appMetadata) {\n    const appMetadataObjects = {};\n\n    if (appMetadata) {\n      Object.keys(appMetadata).map(function (key) {\n        const serializedAmdt = appMetadata[key];\n        const mappedAmd = {\n          clientId: serializedAmdt.client_id,\n          environment: serializedAmdt.environment,\n          familyId: serializedAmdt.family_id\n        };\n        const amd = new msalCommon.AppMetadataEntity();\n        msalCommon.CacheManager.toObject(amd, mappedAmd);\n        appMetadataObjects[key] = amd;\n      });\n    }\n\n    return appMetadataObjects;\n  }\n  /**\r\n   * Deserialize an inMemory Cache\r\n   * @param jsonCache\r\n   */\n\n\n  static deserializeAllCache(jsonCache) {\n    return {\n      accounts: jsonCache.Account ? this.deserializeAccounts(jsonCache.Account) : {},\n      idTokens: jsonCache.IdToken ? this.deserializeIdTokens(jsonCache.IdToken) : {},\n      accessTokens: jsonCache.AccessToken ? this.deserializeAccessTokens(jsonCache.AccessToken) : {},\n      refreshTokens: jsonCache.RefreshToken ? this.deserializeRefreshTokens(jsonCache.RefreshToken) : {},\n      appMetadata: jsonCache.AppMetadata ? this.deserializeAppMetadata(jsonCache.AppMetadata) : {}\n    };\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass Serializer {\n  /**\r\n   * serialize the JSON blob\r\n   * @param data\r\n   */\n  static serializeJSONBlob(data) {\n    return JSON.stringify(data);\n  }\n  /**\r\n   * Serialize Accounts\r\n   * @param accCache\r\n   */\n\n\n  static serializeAccounts(accCache) {\n    const accounts = {};\n    Object.keys(accCache).map(function (key) {\n      const accountEntity = accCache[key];\n      accounts[key] = {\n        home_account_id: accountEntity.homeAccountId,\n        environment: accountEntity.environment,\n        realm: accountEntity.realm,\n        local_account_id: accountEntity.localAccountId,\n        username: accountEntity.username,\n        authority_type: accountEntity.authorityType,\n        name: accountEntity.name,\n        client_info: accountEntity.clientInfo,\n        last_modification_time: accountEntity.lastModificationTime,\n        last_modification_app: accountEntity.lastModificationApp\n      };\n    });\n    return accounts;\n  }\n  /**\r\n   * Serialize IdTokens\r\n   * @param idTCache\r\n   */\n\n\n  static serializeIdTokens(idTCache) {\n    const idTokens = {};\n    Object.keys(idTCache).map(function (key) {\n      const idTEntity = idTCache[key];\n      idTokens[key] = {\n        home_account_id: idTEntity.homeAccountId,\n        environment: idTEntity.environment,\n        credential_type: idTEntity.credentialType,\n        client_id: idTEntity.clientId,\n        secret: idTEntity.secret,\n        realm: idTEntity.realm\n      };\n    });\n    return idTokens;\n  }\n  /**\r\n   * Serializes AccessTokens\r\n   * @param atCache\r\n   */\n\n\n  static serializeAccessTokens(atCache) {\n    const accessTokens = {};\n    Object.keys(atCache).map(function (key) {\n      const atEntity = atCache[key];\n      accessTokens[key] = {\n        home_account_id: atEntity.homeAccountId,\n        environment: atEntity.environment,\n        credential_type: atEntity.credentialType,\n        client_id: atEntity.clientId,\n        secret: atEntity.secret,\n        realm: atEntity.realm,\n        target: atEntity.target,\n        cached_at: atEntity.cachedAt,\n        expires_on: atEntity.expiresOn,\n        extended_expires_on: atEntity.extendedExpiresOn,\n        refresh_on: atEntity.refreshOn,\n        key_id: atEntity.keyId,\n        token_type: atEntity.tokenType\n      };\n    });\n    return accessTokens;\n  }\n  /**\r\n   * Serialize refreshTokens\r\n   * @param rtCache\r\n   */\n\n\n  static serializeRefreshTokens(rtCache) {\n    const refreshTokens = {};\n    Object.keys(rtCache).map(function (key) {\n      const rtEntity = rtCache[key];\n      refreshTokens[key] = {\n        home_account_id: rtEntity.homeAccountId,\n        environment: rtEntity.environment,\n        credential_type: rtEntity.credentialType,\n        client_id: rtEntity.clientId,\n        secret: rtEntity.secret,\n        family_id: rtEntity.familyId,\n        target: rtEntity.target,\n        realm: rtEntity.realm\n      };\n    });\n    return refreshTokens;\n  }\n  /**\r\n   * Serialize amdtCache\r\n   * @param amdtCache\r\n   */\n\n\n  static serializeAppMetadata(amdtCache) {\n    const appMetadata = {};\n    Object.keys(amdtCache).map(function (key) {\n      const amdtEntity = amdtCache[key];\n      appMetadata[key] = {\n        client_id: amdtEntity.clientId,\n        environment: amdtEntity.environment,\n        family_id: amdtEntity.familyId\n      };\n    });\n    return appMetadata;\n  }\n  /**\r\n   * Serialize the cache\r\n   * @param jsonContent\r\n   */\n\n\n  static serializeAllCache(inMemCache) {\n    return {\n      Account: this.serializeAccounts(inMemCache.accounts),\n      IdToken: this.serializeIdTokens(inMemCache.idTokens),\n      AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\n      RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\n      AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata)\n    };\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\r\n * @public\r\n */\n\nclass NodeStorage extends msalCommon.CacheManager {\n  constructor(logger, clientId, cryptoImpl) {\n    super(clientId, cryptoImpl);\n    this.cache = {};\n    this.changeEmitters = [];\n    this.logger = logger;\n  }\n  /**\r\n   * Queue up callbacks\r\n   * @param func - a callback function for cache change indication\r\n   */\n\n\n  registerChangeEmitter(func) {\n    this.changeEmitters.push(func);\n  }\n  /**\r\n   * Invoke the callback when cache changes\r\n   */\n\n\n  emitChange() {\n    this.changeEmitters.forEach(func => func.call(null));\n  }\n  /**\r\n   * Converts cacheKVStore to InMemoryCache\r\n   * @param cache - key value store\r\n   */\n\n\n  cacheToInMemoryCache(cache) {\n    const inMemoryCache = {\n      accounts: {},\n      idTokens: {},\n      accessTokens: {},\n      refreshTokens: {},\n      appMetadata: {}\n    };\n\n    for (const key in cache) {\n      if (cache[key] instanceof msalCommon.AccountEntity) {\n        inMemoryCache.accounts[key] = cache[key];\n      } else if (cache[key] instanceof msalCommon.IdTokenEntity) {\n        inMemoryCache.idTokens[key] = cache[key];\n      } else if (cache[key] instanceof msalCommon.AccessTokenEntity) {\n        inMemoryCache.accessTokens[key] = cache[key];\n      } else if (cache[key] instanceof msalCommon.RefreshTokenEntity) {\n        inMemoryCache.refreshTokens[key] = cache[key];\n      } else if (cache[key] instanceof msalCommon.AppMetadataEntity) {\n        inMemoryCache.appMetadata[key] = cache[key];\n      } else {\n        continue;\n      }\n    }\n\n    return inMemoryCache;\n  }\n  /**\r\n   * converts inMemoryCache to CacheKVStore\r\n   * @param inMemoryCache - kvstore map for inmemory\r\n   */\n\n\n  inMemoryCacheToCache(inMemoryCache) {\n    // convert in memory cache to a flat Key-Value map\n    let cache = this.getCache();\n    cache = { ...inMemoryCache.accounts,\n      ...inMemoryCache.idTokens,\n      ...inMemoryCache.accessTokens,\n      ...inMemoryCache.refreshTokens,\n      ...inMemoryCache.appMetadata\n    };\n    return cache;\n  }\n  /**\r\n   * gets the current in memory cache for the client\r\n   */\n\n\n  getInMemoryCache() {\n    this.logger.trace(\"Getting in-memory cache\"); // convert the cache key value store to inMemoryCache\n\n    const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\n    return inMemoryCache;\n  }\n  /**\r\n   * sets the current in memory cache for the client\r\n   * @param inMemoryCache - key value map in memory\r\n   */\n\n\n  setInMemoryCache(inMemoryCache) {\n    this.logger.trace(\"Setting in-memory cache\"); // convert and append the inMemoryCache to cacheKVStore\n\n    const cache = this.inMemoryCacheToCache(inMemoryCache);\n    this.setCache(cache);\n    this.emitChange();\n  }\n  /**\r\n   * get the current cache key-value store\r\n   */\n\n\n  getCache() {\n    this.logger.trace(\"Getting cache key-value store\");\n    return this.cache;\n  }\n  /**\r\n   * sets the current cache (key value store)\r\n   * @param cacheMap - key value map\r\n   */\n\n\n  setCache(cache) {\n    this.logger.trace(\"Setting cache key value store\");\n    this.cache = cache; // mark change in cache\n\n    this.emitChange();\n  }\n  /**\r\n   * Gets cache item with given key.\r\n   * @param key - lookup key for the cache entry\r\n   */\n\n\n  getItem(key) {\n    this.logger.tracePii(`Item key: ${key}`); // read cache\n\n    const cache = this.getCache();\n    return cache[key];\n  }\n  /**\r\n   * Gets cache item with given key-value\r\n   * @param key - lookup key for the cache entry\r\n   * @param value - value of the cache entry\r\n   */\n\n\n  setItem(key, value) {\n    this.logger.tracePii(`Item key: ${key}`); // read cache\n\n    const cache = this.getCache();\n    cache[key] = value; // write to cache\n\n    this.setCache(cache);\n  }\n  /**\r\n   * fetch the account entity\r\n   * @param accountKey - lookup key to fetch cache type AccountEntity\r\n   */\n\n\n  getAccount(accountKey) {\n    const account = this.getItem(accountKey);\n\n    if (msalCommon.AccountEntity.isAccountEntity(account)) {\n      return account;\n    }\n\n    return null;\n  }\n  /**\r\n   * set account entity\r\n   * @param account - cache value to be set of type AccountEntity\r\n   */\n\n\n  setAccount(account) {\n    const accountKey = account.generateAccountKey();\n    this.setItem(accountKey, account);\n  }\n  /**\r\n   * fetch the idToken credential\r\n   * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\r\n   */\n\n\n  getIdTokenCredential(idTokenKey) {\n    const idToken = this.getItem(idTokenKey);\n\n    if (msalCommon.IdTokenEntity.isIdTokenEntity(idToken)) {\n      return idToken;\n    }\n\n    return null;\n  }\n  /**\r\n   * set idToken credential\r\n   * @param idToken - cache value to be set of type IdTokenEntity\r\n   */\n\n\n  setIdTokenCredential(idToken) {\n    const idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, idToken);\n  }\n  /**\r\n   * fetch the accessToken credential\r\n   * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\r\n   */\n\n\n  getAccessTokenCredential(accessTokenKey) {\n    const accessToken = this.getItem(accessTokenKey);\n\n    if (msalCommon.AccessTokenEntity.isAccessTokenEntity(accessToken)) {\n      return accessToken;\n    }\n\n    return null;\n  }\n  /**\r\n   * set accessToken credential\r\n   * @param accessToken -  cache value to be set of type AccessTokenEntity\r\n   */\n\n\n  setAccessTokenCredential(accessToken) {\n    const accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, accessToken);\n  }\n  /**\r\n   * fetch the refreshToken credential\r\n   * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\r\n   */\n\n\n  getRefreshTokenCredential(refreshTokenKey) {\n    const refreshToken = this.getItem(refreshTokenKey);\n\n    if (msalCommon.RefreshTokenEntity.isRefreshTokenEntity(refreshToken)) {\n      return refreshToken;\n    }\n\n    return null;\n  }\n  /**\r\n   * set refreshToken credential\r\n   * @param refreshToken - cache value to be set of type RefreshTokenEntity\r\n   */\n\n\n  setRefreshTokenCredential(refreshToken) {\n    const refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, refreshToken);\n  }\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\r\n   */\n\n\n  getAppMetadata(appMetadataKey) {\n    const appMetadata = this.getItem(appMetadataKey);\n\n    if (msalCommon.AppMetadataEntity.isAppMetadataEntity(appMetadataKey, appMetadata)) {\n      return appMetadata;\n    }\n\n    return null;\n  }\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata - cache value to be set of type AppMetadataEntity\r\n   */\n\n\n  setAppMetadata(appMetadata) {\n    const appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, appMetadata);\n  }\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\r\n   */\n\n\n  getServerTelemetry(serverTelemetrykey) {\n    const serverTelemetryEntity = this.getItem(serverTelemetrykey);\n\n    if (serverTelemetryEntity && msalCommon.ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\n      return serverTelemetryEntity;\n    }\n\n    return null;\n  }\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\r\n   * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\r\n   */\n\n\n  setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n    this.setItem(serverTelemetryKey, serverTelemetry);\n  }\n  /**\r\n   * fetch authority metadata entity from the platform cache\r\n   * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n   */\n\n\n  getAuthorityMetadata(key) {\n    const authorityMetadataEntity = this.getItem(key);\n\n    if (authorityMetadataEntity && msalCommon.AuthorityMetadataEntity.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\n      return authorityMetadataEntity;\n    }\n\n    return null;\n  }\n  /**\r\n   * Get all authority metadata keys\r\n   */\n\n\n  getAuthorityMetadataKeys() {\n    return this.getKeys().filter(key => {\n      return this.isAuthorityMetadata(key);\n    });\n  }\n  /**\r\n   * set authority metadata entity to the platform cache\r\n   * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n   * @param metadata - cache value to be set of type AuthorityMetadataEntity\r\n   */\n\n\n  setAuthorityMetadata(key, metadata) {\n    this.setItem(key, metadata);\n  }\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n   */\n\n\n  getThrottlingCache(throttlingCacheKey) {\n    const throttlingCache = this.getItem(throttlingCacheKey);\n\n    if (throttlingCache && msalCommon.ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\n      return throttlingCache;\n    }\n\n    return null;\n  }\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n   * @param throttlingCache - cache value to be set of type ThrottlingEntity\r\n   */\n\n\n  setThrottlingCache(throttlingCacheKey, throttlingCache) {\n    this.setItem(throttlingCacheKey, throttlingCache);\n  }\n  /**\r\n   * Removes the cache item from memory with the given key.\r\n   * @param key - lookup key to remove a cache entity\r\n   * @param inMemory - key value map of the cache\r\n   */\n\n\n  removeItem(key) {\n    this.logger.tracePii(`Item key: ${key}`); // read inMemoryCache\n\n    let result = false;\n    const cache = this.getCache();\n\n    if (!!cache[key]) {\n      delete cache[key];\n      result = true;\n    } // write to the cache after removal\n\n\n    if (result) {\n      this.setCache(cache);\n      this.emitChange();\n    }\n\n    return result;\n  }\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key - look up key for a cache entity\r\n   */\n\n\n  containsKey(key) {\n    return this.getKeys().includes(key);\n  }\n  /**\r\n   * Gets all keys in window.\r\n   */\n\n\n  getKeys() {\n    this.logger.trace(\"Retrieving all cache keys\"); // read cache\n\n    const cache = this.getCache();\n    return [...Object.keys(cache)];\n  }\n  /**\r\n   * Clears all cache entries created by MSAL (except tokens).\r\n   */\n\n\n  async clear() {\n    this.logger.trace(\"Clearing cache entries created by MSAL\"); // read inMemoryCache\n\n    const cacheKeys = this.getKeys(); // delete each element\n\n    cacheKeys.forEach(key => {\n      this.removeItem(key);\n    });\n    this.emitChange();\n  }\n  /**\r\n   * Initialize in memory cache from an exisiting cache vault\r\n   * @param cache - blob formatted cache (JSON)\r\n   */\n\n\n  static generateInMemoryCache(cache) {\n    return Deserializer.deserializeAllCache(Deserializer.deserializeJSONBlob(cache));\n  }\n  /**\r\n   * retrieves the final JSON\r\n   * @param inMemoryCache - itemised cache read from the JSON\r\n   */\n\n\n  static generateJsonCache(inMemoryCache) {\n    return Serializer.serializeAllCache(inMemoryCache);\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nconst defaultSerializedCache = {\n  Account: {},\n  IdToken: {},\n  AccessToken: {},\n  RefreshToken: {},\n  AppMetadata: {}\n};\n/**\r\n * In-memory token cache manager\r\n * @public\r\n */\n\nclass TokenCache {\n  constructor(storage, logger, cachePlugin) {\n    this.cacheHasChanged = false;\n    this.storage = storage;\n    this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\n\n    if (cachePlugin) {\n      this.persistence = cachePlugin;\n    }\n\n    this.logger = logger;\n  }\n  /**\r\n   * Set to true if cache state has changed since last time serialize or writeToPersistence was called\r\n   */\n\n\n  hasChanged() {\n    return this.cacheHasChanged;\n  }\n  /**\r\n   * Serializes in memory cache to JSON\r\n   */\n\n\n  serialize() {\n    this.logger.trace(\"Serializing in-memory cache\");\n    let finalState = Serializer.serializeAllCache(this.storage.getInMemoryCache()); // if cacheSnapshot not null or empty, merge\n\n    if (!msalCommon.StringUtils.isEmpty(this.cacheSnapshot)) {\n      this.logger.trace(\"Reading cache snapshot from disk\");\n      finalState = this.mergeState(JSON.parse(this.cacheSnapshot), finalState);\n    } else {\n      this.logger.trace(\"No cache snapshot to merge\");\n    }\n\n    this.cacheHasChanged = false;\n    return JSON.stringify(finalState);\n  }\n  /**\r\n   * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\r\n   * @param cache - blob formatted cache\r\n   */\n\n\n  deserialize(cache) {\n    this.logger.trace(\"Deserializing JSON to in-memory cache\");\n    this.cacheSnapshot = cache;\n\n    if (!msalCommon.StringUtils.isEmpty(this.cacheSnapshot)) {\n      this.logger.trace(\"Reading cache snapshot from disk\");\n      const deserializedCache = Deserializer.deserializeAllCache(this.overlayDefaults(JSON.parse(this.cacheSnapshot)));\n      this.storage.setInMemoryCache(deserializedCache);\n    } else {\n      this.logger.trace(\"No cache snapshot to deserialize\");\n    }\n  }\n  /**\r\n   * Fetches the cache key-value map\r\n   */\n\n\n  getKVStore() {\n    return this.storage.getCache();\n  }\n  /**\r\n   * API that retrieves all accounts currently in cache to the user\r\n   */\n\n\n  async getAllAccounts() {\n    this.logger.trace(\"getAllAccounts called\");\n    let cacheContext;\n\n    try {\n      if (this.persistence) {\n        cacheContext = new msalCommon.TokenCacheContext(this, false);\n        await this.persistence.beforeCacheAccess(cacheContext);\n      }\n\n      return this.storage.getAllAccounts();\n    } finally {\n      if (this.persistence && cacheContext) {\n        await this.persistence.afterCacheAccess(cacheContext);\n      }\n    }\n  }\n  /**\r\n   * Returns the signed in account matching homeAccountId.\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no matching account is found\r\n   * @param homeAccountId - unique identifier for an account (uid.utid)\r\n   */\n\n\n  async getAccountByHomeId(homeAccountId) {\n    const allAccounts = await this.getAllAccounts();\n\n    if (!msalCommon.StringUtils.isEmpty(homeAccountId) && allAccounts && allAccounts.length) {\n      return allAccounts.filter(accountObj => accountObj.homeAccountId === homeAccountId)[0] || null;\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Returns the signed in account matching localAccountId.\r\n   * (the account object is created at the time of successful login)\r\n   * or null when no matching account is found\r\n   * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\r\n   */\n\n\n  async getAccountByLocalId(localAccountId) {\n    const allAccounts = await this.getAllAccounts();\n\n    if (!msalCommon.StringUtils.isEmpty(localAccountId) && allAccounts && allAccounts.length) {\n      return allAccounts.filter(accountObj => accountObj.localAccountId === localAccountId)[0] || null;\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * API to remove a specific account and the relevant data from cache\r\n   * @param account - AccountInfo passed by the user\r\n   */\n\n\n  async removeAccount(account) {\n    this.logger.trace(\"removeAccount called\");\n    let cacheContext;\n\n    try {\n      if (this.persistence) {\n        cacheContext = new msalCommon.TokenCacheContext(this, true);\n        await this.persistence.beforeCacheAccess(cacheContext);\n      }\n\n      await this.storage.removeAccount(msalCommon.AccountEntity.generateAccountCacheKey(account));\n    } finally {\n      if (this.persistence && cacheContext) {\n        await this.persistence.afterCacheAccess(cacheContext);\n      }\n    }\n  }\n  /**\r\n   * Called when the cache has changed state.\r\n   */\n\n\n  handleChangeEvent() {\n    this.cacheHasChanged = true;\n  }\n  /**\r\n   * Merge in memory cache with the cache snapshot.\r\n   * @param oldState - cache before changes\r\n   * @param currentState - current cache state in the library\r\n   */\n\n\n  mergeState(oldState, currentState) {\n    this.logger.trace(\"Merging in-memory cache with cache snapshot\");\n    const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\n    return this.mergeUpdates(stateAfterRemoval, currentState);\n  }\n  /**\r\n   * Deep update of oldState based on newState values\r\n   * @param oldState - cache before changes\r\n   * @param newState - updated cache\r\n   */\n\n\n  mergeUpdates(oldState, newState) {\n    Object.keys(newState).forEach(newKey => {\n      const newValue = newState[newKey]; // if oldState does not contain value but newValue does, add it\n\n      if (!oldState.hasOwnProperty(newKey)) {\n        if (newValue !== null) {\n          oldState[newKey] = newValue;\n        }\n      } else {\n        // both oldState and newState contain the key, do deep update\n        const newValueNotNull = newValue !== null;\n        const newValueIsObject = typeof newValue === \"object\";\n        const newValueIsNotArray = !Array.isArray(newValue);\n        const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\n\n        if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\n          this.mergeUpdates(oldState[newKey], newValue);\n        } else {\n          oldState[newKey] = newValue;\n        }\n      }\n    });\n    return oldState;\n  }\n  /**\r\n   * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\r\n   * oldState that are not recognized, they are left untouched.\r\n   * @param oldState - cache before changes\r\n   * @param newState - updated cache\r\n   */\n\n\n  mergeRemovals(oldState, newState) {\n    this.logger.trace(\"Remove updated entries in cache\");\n    const accounts = oldState.Account ? this.mergeRemovalsDict(oldState.Account, newState.Account) : oldState.Account;\n    const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\n    const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\n    const idTokens = oldState.IdToken ? this.mergeRemovalsDict(oldState.IdToken, newState.IdToken) : oldState.IdToken;\n    const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\n    return { ...oldState,\n      Account: accounts,\n      AccessToken: accessTokens,\n      RefreshToken: refreshTokens,\n      IdToken: idTokens,\n      AppMetadata: appMetadata\n    };\n  }\n  /**\r\n   * Helper to merge new cache with the old one\r\n   * @param oldState - cache before changes\r\n   * @param newState - updated cache\r\n   */\n\n\n  mergeRemovalsDict(oldState, newState) {\n    const finalState = { ...oldState\n    };\n    Object.keys(oldState).forEach(oldKey => {\n      if (!newState || !newState.hasOwnProperty(oldKey)) {\n        delete finalState[oldKey];\n      }\n    });\n    return finalState;\n  }\n  /**\r\n   * Helper to overlay as a part of cache merge\r\n   * @param passedInCache - cache read from the blob\r\n   */\n\n\n  overlayDefaults(passedInCache) {\n    this.logger.trace(\"Overlaying input cache with the default cache\");\n    return {\n      Account: { ...defaultSerializedCache.Account,\n        ...passedInCache.Account\n      },\n      IdToken: { ...defaultSerializedCache.IdToken,\n        ...passedInCache.IdToken\n      },\n      AccessToken: { ...defaultSerializedCache.AccessToken,\n        ...passedInCache.AccessToken\n      },\n      RefreshToken: { ...defaultSerializedCache.RefreshToken,\n        ...passedInCache.RefreshToken\n      },\n      AppMetadata: { ...defaultSerializedCache.AppMetadata,\n        ...passedInCache.AppMetadata\n      }\n    };\n  }\n\n}\n\n/* eslint-disable header/header */\nconst name = \"@azure/msal-node\";\nconst version = \"1.3.3\";\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base abstract class for all ClientApplications - public and confidential\r\n * @public\r\n */\n\nclass ClientApplication {\n  /**\r\n   * Constructor for the ClientApplication\r\n   */\n  constructor(configuration) {\n    this.config = buildAppConfiguration(configuration);\n    this.cryptoProvider = new CryptoProvider();\n    this.logger = new msalCommon.Logger(this.config.system.loggerOptions, name, version);\n    this.storage = new NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider);\n    this.tokenCache = new TokenCache(this.storage, this.logger, this.config.cache.cachePlugin);\n  }\n  /**\r\n   * Creates the URL of the authorization request, letting the user input credentials and consent to the\r\n   * application. The URL targets the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * `acquireTokenByCode(AuthorizationCodeRequest)`.\r\n   */\n\n\n  async getAuthCodeUrl(request) {\n    this.logger.info(\"getAuthCodeUrl called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request),\n      responseMode: request.responseMode || msalCommon.ResponseMode.QUERY,\n      authenticationScheme: msalCommon.AuthenticationScheme.BEARER\n    };\n    const authClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId);\n    const authorizationCodeClient = new msalCommon.AuthorizationCodeClient(authClientConfig);\n    this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n    return authorizationCodeClient.getAuthCodeUrl(validRequest);\n  }\n  /**\r\n   * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\r\n   * Authorization Code flow.\r\n   *\r\n   * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\r\n   * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\r\n   * AuthorizationCodeRequest are the same.\r\n   */\n\n\n  async acquireTokenByCode(request) {\n    this.logger.info(\"acquireTokenByCode called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request),\n      authenticationScheme: msalCommon.AuthenticationScheme.BEARER\n    };\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByCode, validRequest.correlationId);\n\n    try {\n      const authClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager);\n      const authorizationCodeClient = new msalCommon.AuthorizationCodeClient(authClientConfig);\n      this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n      return authorizationCodeClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n  /**\r\n   * Acquires a token by exchanging the refresh token provided for a new set of tokens.\r\n   *\r\n   * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\r\n   * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\r\n   * handle the caching and refreshing of tokens automatically.\r\n   */\n\n\n  async acquireTokenByRefreshToken(request) {\n    this.logger.info(\"acquireTokenByRefreshToken called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request),\n      authenticationScheme: msalCommon.AuthenticationScheme.BEARER\n    };\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\n\n    try {\n      const refreshTokenClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager);\n      const refreshTokenClient = new msalCommon.RefreshTokenClient(refreshTokenClientConfig);\n      this.logger.verbose(\"Refresh token client created\", validRequest.correlationId);\n      return refreshTokenClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n  /**\r\n   * Acquires a token silently when a user specifies the account the token is requested for.\r\n   *\r\n   * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\r\n   * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\r\n   * In case the refresh_token is expired or not found, an error is thrown\r\n   * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\r\n   */\n\n\n  async acquireTokenSilent(request) {\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request),\n      forceRefresh: request.forceRefresh || false\n    };\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\n\n    try {\n      const silentFlowClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager);\n      const silentFlowClient = new msalCommon.SilentFlowClient(silentFlowClientConfig);\n      this.logger.verbose(\"Silent flow client created\", validRequest.correlationId);\n      return silentFlowClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n  /**\r\n   * Acquires tokens with password grant by exchanging client applications username and password for credentials\r\n   *\r\n   * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\r\n   * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\r\n   * Microsoft's documentation and recommendations are at:\r\n   * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\r\n   *\r\n   * @param request - UsenamePasswordRequest\r\n   */\n\n\n  async acquireTokenByUsernamePassword(request) {\n    this.logger.info(\"acquireTokenByUsernamePassword called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request)\n    };\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByUsernamePassword, validRequest.correlationId);\n\n    try {\n      const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager);\n      const usernamePasswordClient = new msalCommon.UsernamePasswordClient(usernamePasswordClientConfig);\n      this.logger.verbose(\"Username password client created\", validRequest.correlationId);\n      return usernamePasswordClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n  /**\r\n   * Gets the token cache for the application.\r\n   */\n\n\n  getTokenCache() {\n    this.logger.info(\"getTokenCache called\");\n    return this.tokenCache;\n  }\n  /**\r\n   * Returns the logger instance\r\n   */\n\n\n  getLogger() {\n    return this.logger;\n  }\n  /**\r\n   * Replaces the default logger set in configurations with new Logger with new configurations\r\n   * @param logger - Logger instance\r\n   */\n\n\n  setLogger(logger) {\n    this.logger = logger;\n  }\n  /**\r\n   * Builds the common configuration to be passed to the common component based on the platform configurarion\r\n   * @param authority - user passed authority in configuration\r\n   * @param serverTelemetryManager - initializes servertelemetry if passed\r\n   */\n\n\n  async buildOauthClientConfiguration(authority, requestCorrelationId, serverTelemetryManager, azureRegionConfiguration) {\n    this.logger.verbose(\"buildOauthClientConfiguration called\", requestCorrelationId); // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\n\n    this.logger.verbose(`building oauth client configuration with the authority: ${authority}`, requestCorrelationId);\n    const discoveredAuthority = await this.createAuthority(authority, azureRegionConfiguration, requestCorrelationId);\n    serverTelemetryManager == null ? void 0 : serverTelemetryManager.updateRegionDiscoveryMetadata(discoveredAuthority.regionDiscoveryMetadata);\n    return {\n      authOptions: {\n        clientId: this.config.auth.clientId,\n        authority: discoveredAuthority,\n        clientCapabilities: this.config.auth.clientCapabilities\n      },\n      loggerOptions: {\n        logLevel: this.config.system.loggerOptions.logLevel,\n        loggerCallback: this.config.system.loggerOptions.loggerCallback,\n        piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\n        correlationId: requestCorrelationId\n      },\n      cryptoInterface: this.cryptoProvider,\n      networkInterface: this.config.system.networkClient,\n      storageInterface: this.storage,\n      serverTelemetryManager: serverTelemetryManager,\n      clientCredentials: {\n        clientSecret: this.clientSecret,\n        clientAssertion: this.clientAssertion ? this.getClientAssertion(discoveredAuthority) : undefined\n      },\n      libraryInfo: {\n        sku: Constants.MSAL_SKU,\n        version: version,\n        cpu: process.arch || \"\",\n        os: process.platform || \"\"\n      },\n      persistencePlugin: this.config.cache.cachePlugin,\n      serializableCache: this.tokenCache\n    };\n  }\n\n  getClientAssertion(authority) {\n    return {\n      assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\n      assertionType: Constants.JWT_BEARER_ASSERTION_TYPE\n    };\n  }\n  /**\r\n   * Generates a request with the default scopes & generates a correlationId.\r\n   * @param authRequest - BaseAuthRequest for initialization\r\n   */\n\n\n  initializeBaseRequest(authRequest) {\n    this.logger.verbose(\"initializeRequestScopes called\", authRequest.correlationId); // Default authenticationScheme to Bearer, log that POP isn't supported yet\n\n    if (authRequest.authenticationScheme && authRequest.authenticationScheme === msalCommon.AuthenticationScheme.POP) {\n      this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\", authRequest.correlationId);\n    }\n\n    authRequest.authenticationScheme = msalCommon.AuthenticationScheme.BEARER;\n    return { ...authRequest,\n      scopes: [...(authRequest && authRequest.scopes || []), ...msalCommon.OIDC_DEFAULT_SCOPES],\n      correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\n      authority: authRequest.authority || this.config.auth.authority\n    };\n  }\n  /**\r\n   * Initializes the server telemetry payload\r\n   * @param apiId - Id for a specific request\r\n   * @param correlationId - GUID\r\n   * @param forceRefresh - boolean to indicate network call\r\n   */\n\n\n  initializeServerTelemetryManager(apiId, correlationId, forceRefresh) {\n    const telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false\n    };\n    return new msalCommon.ServerTelemetryManager(telemetryPayload, this.storage);\n  }\n  /**\r\n   * Create authority instance. If authority not passed in request, default to authority set on the application\r\n   * object. If no authority set in application object, then default to common authority.\r\n   * @param authorityString - authority from user configuration\r\n   */\n\n\n  async createAuthority(authorityString, azureRegionConfiguration, requestCorrelationId) {\n    this.logger.verbose(\"createAuthority called\", requestCorrelationId);\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      azureRegionConfiguration\n    };\n    return await msalCommon.AuthorityFactory.createDiscoveredInstance(authorityString, this.config.system.networkClient, this.storage, authorityOptions);\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\r\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\r\n * @public\r\n */\n\nclass PublicClientApplication extends ClientApplication {\n  /**\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\r\n   * - authority: the authority URL for your application.\r\n   *\r\n   * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n   * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\r\n   * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\r\n   * construction.\r\n   *\r\n   * ADFS authorities are of the form https://\\{instance\\}/adfs.\r\n   */\n  constructor(configuration) {\n    super(configuration);\n  }\n  /**\r\n   * Acquires a token from the authority using OAuth2.0 device code flow.\r\n   * This flow is designed for devices that do not have access to a browser or have input constraints.\r\n   * The authorization server issues a DeviceCode object with a verification code, an end-user code,\r\n   * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\r\n   * instructed to use another device to navigate to the verification URI to input credentials.\r\n   * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\r\n   * until the end-user completes input of credentials.\r\n   */\n\n\n  async acquireTokenByDeviceCode(request) {\n    this.logger.info(\"acquireTokenByDeviceCode called\", request.correlationId);\n    const validRequest = Object.assign(request, this.initializeBaseRequest(request));\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByDeviceCode, validRequest.correlationId);\n\n    try {\n      const deviceCodeConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager);\n      const deviceCodeClient = new msalCommon.DeviceCodeClient(deviceCodeConfig);\n      this.logger.verbose(\"Device code client created\", validRequest.correlationId);\n      return deviceCodeClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Client assertion of type jwt-bearer used in confidential client flows\r\n * @public\r\n */\n\nclass ClientAssertion {\n  /**\r\n   * Initialize the ClientAssertion class from the clientAssertion passed by the user\r\n   * @param assertion - refer https://tools.ietf.org/html/rfc7521\r\n   */\n  static fromAssertion(assertion) {\n    const clientAssertion = new ClientAssertion();\n    clientAssertion.jwt = assertion;\n    return clientAssertion;\n  }\n  /**\r\n   * Initialize the ClientAssertion class from the certificate passed by the user\r\n   * @param thumbprint - identifier of a certificate\r\n   * @param privateKey - secret key\r\n   * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n   */\n\n\n  static fromCertificate(thumbprint, privateKey, publicCertificate) {\n    const clientAssertion = new ClientAssertion();\n    clientAssertion.privateKey = privateKey;\n    clientAssertion.thumbprint = thumbprint;\n\n    if (publicCertificate) {\n      clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n    }\n\n    return clientAssertion;\n  }\n  /**\r\n   * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\r\n   * @param cryptoProvider - library's crypto helper\r\n   * @param issuer - iss claim\r\n   * @param jwtAudience - aud claim\r\n   */\n\n\n  getJwt(cryptoProvider, issuer, jwtAudience) {\n    // if assertion was created from certificate, check if jwt is expired and create new one.\n    if (this.privateKey && this.thumbprint) {\n      if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\n        return this.jwt;\n      }\n\n      return this.createJwt(cryptoProvider, issuer, jwtAudience);\n    }\n    /*\r\n     * if assertion was created by caller, then we just append it. It is up to the caller to\r\n     * ensure that it contains necessary claims and that it is not expired.\r\n     */\n\n\n    if (this.jwt) {\n      return this.jwt;\n    }\n\n    throw msalCommon.ClientAuthError.createInvalidAssertionError();\n  }\n  /**\r\n   * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\r\n   */\n\n\n  createJwt(cryptoProvider, issuer, jwtAudience) {\n    this.issuer = issuer;\n    this.jwtAudience = jwtAudience;\n    const issuedAt = msalCommon.TimeUtils.nowSeconds();\n    this.expirationTime = issuedAt + 600;\n    const header = {\n      [JwtConstants.ALGORITHM]: JwtConstants.RSA_256,\n      [JwtConstants.X5T]: EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\n    };\n\n    if (this.publicCertificate) {\n      Object.assign(header, {\n        [JwtConstants.X5C]: this.publicCertificate\n      });\n    }\n\n    const payload = {\n      [JwtConstants.AUDIENCE]: this.jwtAudience,\n      [JwtConstants.EXPIRATION_TIME]: this.expirationTime,\n      [JwtConstants.ISSUER]: this.issuer,\n      [JwtConstants.SUBJECT]: this.issuer,\n      [JwtConstants.NOT_BEFORE]: issuedAt,\n      [JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\n    };\n    this.jwt = jsonwebtoken.sign(payload, this.privateKey, {\n      header: header\n    });\n    return this.jwt;\n  }\n  /**\r\n   * Utility API to check expiration\r\n   */\n\n\n  isExpired() {\n    return this.expirationTime < msalCommon.TimeUtils.nowSeconds();\n  }\n  /**\r\n   * Extracts the raw certs from a given certificate string and returns them in an array.\r\n   * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n   */\n\n\n  static parseCertificate(publicCertificate) {\n    /**\r\n     * This is regex to identify the certs in a given certificate string.\r\n     * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\r\n     * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\r\n     * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\r\n     * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\r\n     */\n    const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs;\n    const certs = [];\n    let matches;\n\n    while ((matches = regexToFindCerts.exec(publicCertificate)) !== null) {\n      // matches[1] represents the first parens capture group in the regex.\n      certs.push(matches[1].replace(/\\n/, \"\"));\n    }\n\n    return certs;\n  }\n\n}\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\r\n *  will configure application secrets, client certificates/assertions as applicable\r\n * @public\r\n */\n\nclass ConfidentialClientApplication extends ClientApplication {\n  /**\r\n   * Constructor for the ConfidentialClientApplication\r\n   *\r\n   * Required attributes in the Configuration object are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\r\n   * - authority: the authority URL for your application.\r\n   * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\r\n   */\n  constructor(configuration) {\n    super(configuration);\n    this.setClientCredential(this.config);\n  }\n  /**\r\n   * Acquires tokens from the authority for the application (not for an end user).\r\n   */\n\n\n  async acquireTokenByClientCredential(request) {\n    this.logger.info(\"acquireTokenByClientCredential called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request)\n    };\n    const azureRegionConfiguration = {\n      azureRegion: validRequest.azureRegion,\n      environmentRegion: process.env[REGION_ENVIRONMENT_VARIABLE]\n    };\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\n\n    try {\n      const clientCredentialConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, serverTelemetryManager, azureRegionConfiguration);\n      const clientCredentialClient = new msalCommon.ClientCredentialClient(clientCredentialConfig);\n      this.logger.verbose(\"Client credential client created\", validRequest.correlationId);\n      return clientCredentialClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    }\n  }\n  /**\r\n   * Acquires tokens from the authority for the application.\r\n   *\r\n   * Used in scenarios where the current app is a middle-tier service which was called with a token\r\n   * representing an end user. The current app can use the token (oboAssertion) to request another\r\n   * token to access downstream web API, on behalf of that user.\r\n   *\r\n   * The current middle-tier app has no user interaction to obtain consent.\r\n   * See how to gain consent upfront for your middle-tier app from this article.\r\n   * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\r\n   */\n\n\n  async acquireTokenOnBehalfOf(request) {\n    this.logger.info(\"acquireTokenOnBehalfOf called\", request.correlationId);\n    const validRequest = { ...request,\n      ...this.initializeBaseRequest(request)\n    };\n\n    try {\n      const clientCredentialConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId);\n      const oboClient = new msalCommon.OnBehalfOfClient(clientCredentialConfig);\n      this.logger.verbose(\"On behalf of client created\", validRequest.correlationId);\n      return oboClient.acquireToken(validRequest);\n    } catch (e) {\n      if (e instanceof msalCommon.AuthError) {\n        e.setCorrelationId(validRequest.correlationId);\n      }\n\n      throw e;\n    }\n  }\n\n  setClientCredential(configuration) {\n    const clientSecretNotEmpty = !msalCommon.StringUtils.isEmpty(configuration.auth.clientSecret);\n    const clientAssertionNotEmpty = !msalCommon.StringUtils.isEmpty(configuration.auth.clientAssertion);\n    const certificate = configuration.auth.clientCertificate || {\n      thumbprint: \"\",\n      privateKey: \"\"\n    };\n    const certificateNotEmpty = !msalCommon.StringUtils.isEmpty(certificate.thumbprint) || !msalCommon.StringUtils.isEmpty(certificate.privateKey); // Check that at most one credential is set on the application\n\n    if (clientSecretNotEmpty && clientAssertionNotEmpty || clientAssertionNotEmpty && certificateNotEmpty || clientSecretNotEmpty && certificateNotEmpty) {\n      throw msalCommon.ClientAuthError.createInvalidCredentialError();\n    }\n\n    if (configuration.auth.clientSecret) {\n      this.clientSecret = configuration.auth.clientSecret;\n      return;\n    }\n\n    if (configuration.auth.clientAssertion) {\n      this.clientAssertion = ClientAssertion.fromAssertion(configuration.auth.clientAssertion);\n      return;\n    }\n\n    if (!certificateNotEmpty) {\n      throw msalCommon.ClientAuthError.createInvalidCredentialError();\n    } else {\n      var _configuration$auth$c;\n\n      this.clientAssertion = ClientAssertion.fromCertificate(certificate.thumbprint, certificate.privateKey, (_configuration$auth$c = configuration.auth.clientCertificate) == null ? void 0 : _configuration$auth$c.x5c);\n    }\n  }\n\n}\n\nObject.defineProperty(exports, 'AuthError', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.AuthError;\n    }\n});\nObject.defineProperty(exports, 'AuthErrorMessage', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.AuthErrorMessage;\n    }\n});\nObject.defineProperty(exports, 'ClientAuthError', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ClientAuthError;\n    }\n});\nObject.defineProperty(exports, 'ClientAuthErrorMessage', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ClientAuthErrorMessage;\n    }\n});\nObject.defineProperty(exports, 'ClientConfigurationError', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ClientConfigurationError;\n    }\n});\nObject.defineProperty(exports, 'ClientConfigurationErrorMessage', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ClientConfigurationErrorMessage;\n    }\n});\nObject.defineProperty(exports, 'InteractionRequiredAuthError', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.InteractionRequiredAuthError;\n    }\n});\nObject.defineProperty(exports, 'InteractionRequiredAuthErrorMessage', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.InteractionRequiredAuthErrorMessage;\n    }\n});\nObject.defineProperty(exports, 'LogLevel', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.LogLevel;\n    }\n});\nObject.defineProperty(exports, 'Logger', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.Logger;\n    }\n});\nObject.defineProperty(exports, 'PromptValue', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.PromptValue;\n    }\n});\nObject.defineProperty(exports, 'ProtocolMode', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ProtocolMode;\n    }\n});\nObject.defineProperty(exports, 'ResponseMode', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ResponseMode;\n    }\n});\nObject.defineProperty(exports, 'ServerError', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.ServerError;\n    }\n});\nObject.defineProperty(exports, 'TokenCacheContext', {\n    enumerable: true,\n    get: function () {\n        return msalCommon.TokenCacheContext;\n    }\n});\nexports.ClientApplication = ClientApplication;\nexports.ClientAssertion = ClientAssertion;\nexports.ConfidentialClientApplication = ConfidentialClientApplication;\nexports.CryptoProvider = CryptoProvider;\nexports.NodeStorage = NodeStorage;\nexports.PublicClientApplication = PublicClientApplication;\nexports.TokenCache = TokenCache;\nexports.buildAppConfiguration = buildAppConfiguration;\nexports.version = version;\n//# sourceMappingURL=msal-node.cjs.development.js.map\n",
    "\"use strict\";function e(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0});var t,r=require(\"@azure/msal-common\"),i=e(require(\"axios\")),n=require(\"uuid\"),o=e(require(\"crypto\")),a=require(\"jsonwebtoken\");!function(e){e.GET=\"get\",e.POST=\"post\"}(t||(t={}));const s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\";var c;!function(e){e[e.acquireTokenSilent=62]=\"acquireTokenSilent\",e[e.acquireTokenByUsernamePassword=371]=\"acquireTokenByUsernamePassword\",e[e.acquireTokenByDeviceCode=671]=\"acquireTokenByDeviceCode\",e[e.acquireTokenByClientCredential=771]=\"acquireTokenByClientCredential\",e[e.acquireTokenByCode=871]=\"acquireTokenByCode\",e[e.acquireTokenByRefreshToken=872]=\"acquireTokenByRefreshToken\"}(c||(c={}));class l{async sendGetRequestAsync(e,r){const n={method:t.GET,url:e,headers:r&&r.headers,validateStatus:()=>!0},o=await i(n);return{headers:o.headers,body:o.data,status:o.status}}async sendPostRequestAsync(e,r,n){const o={method:t.POST,url:e,data:r&&r.body||\"\",timeout:n,headers:r&&r.headers,validateStatus:()=>!0},a=await i(o);return{headers:a.headers,body:a.data,status:a.status}}}const h={clientId:\"\",authority:r.Constants.DEFAULT_AUTHORITY,clientSecret:\"\",clientAssertion:\"\",clientCertificate:{thumbprint:\"\",privateKey:\"\",x5c:\"\"},knownAuthorities:[],cloudDiscoveryMetadata:\"\",authorityMetadata:\"\",clientCapabilities:[],protocolMode:r.ProtocolMode.AAD},u={},d={loggerOptions:{loggerCallback:()=>{},piiLoggingEnabled:!1,logLevel:r.LogLevel.Info},networkClient:class{static getNetworkClient(){return new l}}.getNetworkClient()};function g({auth:e,cache:t,system:r}){return{auth:{...h,...e},cache:{...u,...t},system:{...d,...r}}}class p{static base64Encode(e,t){return Buffer.from(e,t).toString(\"base64\")}static base64EncodeUrl(e,t){return p.base64Encode(e,t).replace(/=/g,\"\").replace(/\\+/g,\"-\").replace(/\\//g,\"_\")}static base64Decode(e){return Buffer.from(e,\"base64\").toString(\"utf8\")}static base64DecodeUrl(e){let t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");for(;t.length%4;)t+=\"=\";return p.base64Decode(t)}}class y{async generatePkceCodes(){const e=this.generateCodeVerifier();return{verifier:e,challenge:this.generateCodeChallengeFromVerifier(e)}}generateCodeVerifier(){const e=[],t=256-256%s.length;for(;e.length<=32;){const r=o.randomBytes(1)[0];r>=t||e.push(s[r%s.length])}const r=e.join(\"\");return p.base64EncodeUrl(r)}generateCodeChallengeFromVerifier(e){return p.base64EncodeUrl(this.sha256(e).toString(\"base64\"),\"base64\")}sha256(e){return o.createHash(\"sha256\").update(e).digest()}}class m{constructor(){this.pkceGenerator=new y}createNewGuid(){return class{static generateGuid(){return n.v4()}static isGuid(e){return/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(e)}}.generateGuid()}base64Encode(e){return p.base64Encode(e)}base64Decode(e){return p.base64Decode(e)}generatePkceCodes(){return this.pkceGenerator.generatePkceCodes()}getPublicKeyThumbprint(){throw new Error(\"Method not implemented.\")}removeTokenBindingKey(){throw new Error(\"Method not implemented.\")}clearKeystore(){throw new Error(\"Method not implemented.\")}signJwt(){throw new Error(\"Method not implemented.\")}}class f{static deserializeJSONBlob(e){return r.StringUtils.isEmpty(e)?{}:JSON.parse(e)}static deserializeAccounts(e){const t={};return e&&Object.keys(e).map((function(i){const n=e[i],o={homeAccountId:n.home_account_id,environment:n.environment,realm:n.realm,localAccountId:n.local_account_id,username:n.username,authorityType:n.authority_type,name:n.name,clientInfo:n.client_info,lastModificationTime:n.last_modification_time,lastModificationApp:n.last_modification_app},a=new r.AccountEntity;r.CacheManager.toObject(a,o),t[i]=a})),t}static deserializeIdTokens(e){const t={};return e&&Object.keys(e).map((function(i){const n=e[i],o={homeAccountId:n.home_account_id,environment:n.environment,credentialType:n.credential_type,clientId:n.client_id,secret:n.secret,realm:n.realm},a=new r.IdTokenEntity;r.CacheManager.toObject(a,o),t[i]=a})),t}static deserializeAccessTokens(e){const t={};return e&&Object.keys(e).map((function(i){const n=e[i],o={homeAccountId:n.home_account_id,environment:n.environment,credentialType:n.credential_type,clientId:n.client_id,secret:n.secret,realm:n.realm,target:n.target,cachedAt:n.cached_at,expiresOn:n.expires_on,extendedExpiresOn:n.extended_expires_on,refreshOn:n.refresh_on,keyId:n.key_id,tokenType:n.token_type},a=new r.AccessTokenEntity;r.CacheManager.toObject(a,o),t[i]=a})),t}static deserializeRefreshTokens(e){const t={};return e&&Object.keys(e).map((function(i){const n=e[i],o={homeAccountId:n.home_account_id,environment:n.environment,credentialType:n.credential_type,clientId:n.client_id,secret:n.secret,familyId:n.family_id,target:n.target,realm:n.realm},a=new r.RefreshTokenEntity;r.CacheManager.toObject(a,o),t[i]=a})),t}static deserializeAppMetadata(e){const t={};return e&&Object.keys(e).map((function(i){const n=e[i],o={clientId:n.client_id,environment:n.environment,familyId:n.family_id},a=new r.AppMetadataEntity;r.CacheManager.toObject(a,o),t[i]=a})),t}static deserializeAllCache(e){return{accounts:e.Account?this.deserializeAccounts(e.Account):{},idTokens:e.IdToken?this.deserializeIdTokens(e.IdToken):{},accessTokens:e.AccessToken?this.deserializeAccessTokens(e.AccessToken):{},refreshTokens:e.RefreshToken?this.deserializeRefreshTokens(e.RefreshToken):{},appMetadata:e.AppMetadata?this.deserializeAppMetadata(e.AppMetadata):{}}}}class C{static serializeJSONBlob(e){return JSON.stringify(e)}static serializeAccounts(e){const t={};return Object.keys(e).map((function(r){const i=e[r];t[r]={home_account_id:i.homeAccountId,environment:i.environment,realm:i.realm,local_account_id:i.localAccountId,username:i.username,authority_type:i.authorityType,name:i.name,client_info:i.clientInfo,last_modification_time:i.lastModificationTime,last_modification_app:i.lastModificationApp}})),t}static serializeIdTokens(e){const t={};return Object.keys(e).map((function(r){const i=e[r];t[r]={home_account_id:i.homeAccountId,environment:i.environment,credential_type:i.credentialType,client_id:i.clientId,secret:i.secret,realm:i.realm}})),t}static serializeAccessTokens(e){const t={};return Object.keys(e).map((function(r){const i=e[r];t[r]={home_account_id:i.homeAccountId,environment:i.environment,credential_type:i.credentialType,client_id:i.clientId,secret:i.secret,realm:i.realm,target:i.target,cached_at:i.cachedAt,expires_on:i.expiresOn,extended_expires_on:i.extendedExpiresOn,refresh_on:i.refreshOn,key_id:i.keyId,token_type:i.tokenType}})),t}static serializeRefreshTokens(e){const t={};return Object.keys(e).map((function(r){const i=e[r];t[r]={home_account_id:i.homeAccountId,environment:i.environment,credential_type:i.credentialType,client_id:i.clientId,secret:i.secret,family_id:i.familyId,target:i.target,realm:i.realm}})),t}static serializeAppMetadata(e){const t={};return Object.keys(e).map((function(r){const i=e[r];t[r]={client_id:i.clientId,environment:i.environment,family_id:i.familyId}})),t}static serializeAllCache(e){return{Account:this.serializeAccounts(e.accounts),IdToken:this.serializeIdTokens(e.idTokens),AccessToken:this.serializeAccessTokens(e.accessTokens),RefreshToken:this.serializeRefreshTokens(e.refreshTokens),AppMetadata:this.serializeAppMetadata(e.appMetadata)}}}class A extends r.CacheManager{constructor(e,t,r){super(t,r),this.cache={},this.changeEmitters=[],this.logger=e}registerChangeEmitter(e){this.changeEmitters.push(e)}emitChange(){this.changeEmitters.forEach(e=>e.call(null))}cacheToInMemoryCache(e){const t={accounts:{},idTokens:{},accessTokens:{},refreshTokens:{},appMetadata:{}};for(const i in e)if(e[i]instanceof r.AccountEntity)t.accounts[i]=e[i];else if(e[i]instanceof r.IdTokenEntity)t.idTokens[i]=e[i];else if(e[i]instanceof r.AccessTokenEntity)t.accessTokens[i]=e[i];else if(e[i]instanceof r.RefreshTokenEntity)t.refreshTokens[i]=e[i];else{if(!(e[i]instanceof r.AppMetadataEntity))continue;t.appMetadata[i]=e[i]}return t}inMemoryCacheToCache(e){let t=this.getCache();return t={...e.accounts,...e.idTokens,...e.accessTokens,...e.refreshTokens,...e.appMetadata},t}getInMemoryCache(){return this.logger.trace(\"Getting in-memory cache\"),this.cacheToInMemoryCache(this.getCache())}setInMemoryCache(e){this.logger.trace(\"Setting in-memory cache\");const t=this.inMemoryCacheToCache(e);this.setCache(t),this.emitChange()}getCache(){return this.logger.trace(\"Getting cache key-value store\"),this.cache}setCache(e){this.logger.trace(\"Setting cache key value store\"),this.cache=e,this.emitChange()}getItem(e){return this.logger.tracePii(\"Item key: \"+e),this.getCache()[e]}setItem(e,t){this.logger.tracePii(\"Item key: \"+e);const r=this.getCache();r[e]=t,this.setCache(r)}getAccount(e){const t=this.getItem(e);return r.AccountEntity.isAccountEntity(t)?t:null}setAccount(e){const t=e.generateAccountKey();this.setItem(t,e)}getIdTokenCredential(e){const t=this.getItem(e);return r.IdTokenEntity.isIdTokenEntity(t)?t:null}setIdTokenCredential(e){const t=e.generateCredentialKey();this.setItem(t,e)}getAccessTokenCredential(e){const t=this.getItem(e);return r.AccessTokenEntity.isAccessTokenEntity(t)?t:null}setAccessTokenCredential(e){const t=e.generateCredentialKey();this.setItem(t,e)}getRefreshTokenCredential(e){const t=this.getItem(e);return r.RefreshTokenEntity.isRefreshTokenEntity(t)?t:null}setRefreshTokenCredential(e){const t=e.generateCredentialKey();this.setItem(t,e)}getAppMetadata(e){const t=this.getItem(e);return r.AppMetadataEntity.isAppMetadataEntity(e,t)?t:null}setAppMetadata(e){const t=e.generateAppMetadataKey();this.setItem(t,e)}getServerTelemetry(e){const t=this.getItem(e);return t&&r.ServerTelemetryEntity.isServerTelemetryEntity(e,t)?t:null}setServerTelemetry(e,t){this.setItem(e,t)}getAuthorityMetadata(e){const t=this.getItem(e);return t&&r.AuthorityMetadataEntity.isAuthorityMetadataEntity(e,t)?t:null}getAuthorityMetadataKeys(){return this.getKeys().filter(e=>this.isAuthorityMetadata(e))}setAuthorityMetadata(e,t){this.setItem(e,t)}getThrottlingCache(e){const t=this.getItem(e);return t&&r.ThrottlingEntity.isThrottlingEntity(e,t)?t:null}setThrottlingCache(e,t){this.setItem(e,t)}removeItem(e){this.logger.tracePii(\"Item key: \"+e);let t=!1;const r=this.getCache();return r[e]&&(delete r[e],t=!0),t&&(this.setCache(r),this.emitChange()),t}containsKey(e){return this.getKeys().includes(e)}getKeys(){this.logger.trace(\"Retrieving all cache keys\");const e=this.getCache();return[...Object.keys(e)]}async clear(){this.logger.trace(\"Clearing cache entries created by MSAL\"),this.getKeys().forEach(e=>{this.removeItem(e)}),this.emitChange()}static generateInMemoryCache(e){return f.deserializeAllCache(f.deserializeJSONBlob(e))}static generateJsonCache(e){return C.serializeAllCache(e)}}const k={},T={},I={},b={},v={};class E{constructor(e,t,r){this.cacheHasChanged=!1,this.storage=e,this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this)),r&&(this.persistence=r),this.logger=t}hasChanged(){return this.cacheHasChanged}serialize(){this.logger.trace(\"Serializing in-memory cache\");let e=C.serializeAllCache(this.storage.getInMemoryCache());return r.StringUtils.isEmpty(this.cacheSnapshot)?this.logger.trace(\"No cache snapshot to merge\"):(this.logger.trace(\"Reading cache snapshot from disk\"),e=this.mergeState(JSON.parse(this.cacheSnapshot),e)),this.cacheHasChanged=!1,JSON.stringify(e)}deserialize(e){if(this.logger.trace(\"Deserializing JSON to in-memory cache\"),this.cacheSnapshot=e,r.StringUtils.isEmpty(this.cacheSnapshot))this.logger.trace(\"No cache snapshot to deserialize\");else{this.logger.trace(\"Reading cache snapshot from disk\");const e=f.deserializeAllCache(this.overlayDefaults(JSON.parse(this.cacheSnapshot)));this.storage.setInMemoryCache(e)}}getKVStore(){return this.storage.getCache()}async getAllAccounts(){let e;this.logger.trace(\"getAllAccounts called\");try{return this.persistence&&(e=new r.TokenCacheContext(this,!1),await this.persistence.beforeCacheAccess(e)),this.storage.getAllAccounts()}finally{this.persistence&&e&&await this.persistence.afterCacheAccess(e)}}async getAccountByHomeId(e){const t=await this.getAllAccounts();return!r.StringUtils.isEmpty(e)&&t&&t.length&&t.filter(t=>t.homeAccountId===e)[0]||null}async getAccountByLocalId(e){const t=await this.getAllAccounts();return!r.StringUtils.isEmpty(e)&&t&&t.length&&t.filter(t=>t.localAccountId===e)[0]||null}async removeAccount(e){let t;this.logger.trace(\"removeAccount called\");try{this.persistence&&(t=new r.TokenCacheContext(this,!0),await this.persistence.beforeCacheAccess(t)),await this.storage.removeAccount(r.AccountEntity.generateAccountCacheKey(e))}finally{this.persistence&&t&&await this.persistence.afterCacheAccess(t)}}handleChangeEvent(){this.cacheHasChanged=!0}mergeState(e,t){this.logger.trace(\"Merging in-memory cache with cache snapshot\");const r=this.mergeRemovals(e,t);return this.mergeUpdates(r,t)}mergeUpdates(e,t){return Object.keys(t).forEach(r=>{const i=t[r];if(e.hasOwnProperty(r)){const t=null!==i,n=\"object\"==typeof i,o=!Array.isArray(i),a=null!=e[r];t&&n&&o&&a?this.mergeUpdates(e[r],i):e[r]=i}else null!==i&&(e[r]=i)}),e}mergeRemovals(e,t){this.logger.trace(\"Remove updated entries in cache\");const r=e.Account?this.mergeRemovalsDict(e.Account,t.Account):e.Account,i=e.AccessToken?this.mergeRemovalsDict(e.AccessToken,t.AccessToken):e.AccessToken,n=e.RefreshToken?this.mergeRemovalsDict(e.RefreshToken,t.RefreshToken):e.RefreshToken,o=e.IdToken?this.mergeRemovalsDict(e.IdToken,t.IdToken):e.IdToken,a=e.AppMetadata?this.mergeRemovalsDict(e.AppMetadata,t.AppMetadata):e.AppMetadata;return{...e,Account:r,AccessToken:i,RefreshToken:n,IdToken:o,AppMetadata:a}}mergeRemovalsDict(e,t){const r={...e};return Object.keys(e).forEach(e=>{t&&t.hasOwnProperty(e)||delete r[e]}),r}overlayDefaults(e){return this.logger.trace(\"Overlaying input cache with the default cache\"),{Account:{...k,...e.Account},IdToken:{...T,...e.IdToken},AccessToken:{...I,...e.AccessToken},RefreshToken:{...b,...e.RefreshToken},AppMetadata:{...v,...e.AppMetadata}}}}class w{constructor(e){this.config=g(e),this.cryptoProvider=new m,this.logger=new r.Logger(this.config.system.loggerOptions,\"@azure/msal-node\",\"1.3.3\"),this.storage=new A(this.logger,this.config.auth.clientId,this.cryptoProvider),this.tokenCache=new E(this.storage,this.logger,this.config.cache.cachePlugin)}async getAuthCodeUrl(e){this.logger.info(\"getAuthCodeUrl called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e),responseMode:e.responseMode||r.ResponseMode.QUERY,authenticationScheme:r.AuthenticationScheme.BEARER},i=await this.buildOauthClientConfiguration(t.authority,t.correlationId),n=new r.AuthorizationCodeClient(i);return this.logger.verbose(\"Auth code client created\",t.correlationId),n.getAuthCodeUrl(t)}async acquireTokenByCode(e){this.logger.info(\"acquireTokenByCode called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e),authenticationScheme:r.AuthenticationScheme.BEARER},i=this.initializeServerTelemetryManager(c.acquireTokenByCode,t.correlationId);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,i),n=new r.AuthorizationCodeClient(e);return this.logger.verbose(\"Auth code client created\",t.correlationId),n.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),i.cacheFailedRequest(e),e}}async acquireTokenByRefreshToken(e){this.logger.info(\"acquireTokenByRefreshToken called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e),authenticationScheme:r.AuthenticationScheme.BEARER},i=this.initializeServerTelemetryManager(c.acquireTokenByRefreshToken,t.correlationId);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,i),n=new r.RefreshTokenClient(e);return this.logger.verbose(\"Refresh token client created\",t.correlationId),n.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),i.cacheFailedRequest(e),e}}async acquireTokenSilent(e){const t={...e,...this.initializeBaseRequest(e),forceRefresh:e.forceRefresh||!1},i=this.initializeServerTelemetryManager(c.acquireTokenSilent,t.correlationId,t.forceRefresh);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,i),n=new r.SilentFlowClient(e);return this.logger.verbose(\"Silent flow client created\",t.correlationId),n.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),i.cacheFailedRequest(e),e}}async acquireTokenByUsernamePassword(e){this.logger.info(\"acquireTokenByUsernamePassword called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e)},i=this.initializeServerTelemetryManager(c.acquireTokenByUsernamePassword,t.correlationId);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,i),n=new r.UsernamePasswordClient(e);return this.logger.verbose(\"Username password client created\",t.correlationId),n.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),i.cacheFailedRequest(e),e}}getTokenCache(){return this.logger.info(\"getTokenCache called\"),this.tokenCache}getLogger(){return this.logger}setLogger(e){this.logger=e}async buildOauthClientConfiguration(e,t,r,i){this.logger.verbose(\"buildOauthClientConfiguration called\",t),this.logger.verbose(\"building oauth client configuration with the authority: \"+e,t);const n=await this.createAuthority(e,i,t);return null==r||r.updateRegionDiscoveryMetadata(n.regionDiscoveryMetadata),{authOptions:{clientId:this.config.auth.clientId,authority:n,clientCapabilities:this.config.auth.clientCapabilities},loggerOptions:{logLevel:this.config.system.loggerOptions.logLevel,loggerCallback:this.config.system.loggerOptions.loggerCallback,piiLoggingEnabled:this.config.system.loggerOptions.piiLoggingEnabled,correlationId:t},cryptoInterface:this.cryptoProvider,networkInterface:this.config.system.networkClient,storageInterface:this.storage,serverTelemetryManager:r,clientCredentials:{clientSecret:this.clientSecret,clientAssertion:this.clientAssertion?this.getClientAssertion(n):void 0},libraryInfo:{sku:\"msal.js.node\",version:\"1.3.3\",cpu:process.arch||\"\",os:process.platform||\"\"},persistencePlugin:this.config.cache.cachePlugin,serializableCache:this.tokenCache}}getClientAssertion(e){return{assertion:this.clientAssertion.getJwt(this.cryptoProvider,this.config.auth.clientId,e.tokenEndpoint),assertionType:\"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"}}initializeBaseRequest(e){return this.logger.verbose(\"initializeRequestScopes called\",e.correlationId),e.authenticationScheme&&e.authenticationScheme===r.AuthenticationScheme.POP&&this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\",e.correlationId),e.authenticationScheme=r.AuthenticationScheme.BEARER,{...e,scopes:[...e&&e.scopes||[],...r.OIDC_DEFAULT_SCOPES],correlationId:e&&e.correlationId||this.cryptoProvider.createNewGuid(),authority:e.authority||this.config.auth.authority}}initializeServerTelemetryManager(e,t,i){return new r.ServerTelemetryManager({clientId:this.config.auth.clientId,correlationId:t,apiId:e,forceRefresh:i||!1},this.storage)}async createAuthority(e,t,i){this.logger.verbose(\"createAuthority called\",i);const n={protocolMode:this.config.auth.protocolMode,knownAuthorities:this.config.auth.knownAuthorities,cloudDiscoveryMetadata:this.config.auth.cloudDiscoveryMetadata,authorityMetadata:this.config.auth.authorityMetadata,azureRegionConfiguration:t};return await r.AuthorityFactory.createDiscoveredInstance(e,this.config.system.networkClient,this.storage,n)}}class M{static fromAssertion(e){const t=new M;return t.jwt=e,t}static fromCertificate(e,t,r){const i=new M;return i.privateKey=t,i.thumbprint=e,r&&(i.publicCertificate=this.parseCertificate(r)),i}getJwt(e,t,i){if(this.privateKey&&this.thumbprint)return this.jwt&&!this.isExpired()&&t===this.issuer&&i===this.jwtAudience?this.jwt:this.createJwt(e,t,i);if(this.jwt)return this.jwt;throw r.ClientAuthError.createInvalidAssertionError()}createJwt(e,t,i){this.issuer=t,this.jwtAudience=i;const n=r.TimeUtils.nowSeconds();this.expirationTime=n+600;const o={alg:\"RS256\",x5t:p.base64EncodeUrl(this.thumbprint,\"hex\")};this.publicCertificate&&Object.assign(o,{x5c:this.publicCertificate});const s={aud:this.jwtAudience,exp:this.expirationTime,iss:this.issuer,sub:this.issuer,nbf:n,jti:e.createNewGuid()};return this.jwt=a.sign(s,this.privateKey,{header:o}),this.jwt}isExpired(){return this.expirationTime<r.TimeUtils.nowSeconds()}static parseCertificate(e){const t=/-----BEGIN CERTIFICATE-----\\n(.+?)\\n-----END CERTIFICATE-----/gs,r=[];let i;for(;null!==(i=t.exec(e));)r.push(i[1].replace(/\\n/,\"\"));return r}}Object.defineProperty(exports,\"AuthError\",{enumerable:!0,get:function(){return r.AuthError}}),Object.defineProperty(exports,\"AuthErrorMessage\",{enumerable:!0,get:function(){return r.AuthErrorMessage}}),Object.defineProperty(exports,\"ClientAuthError\",{enumerable:!0,get:function(){return r.ClientAuthError}}),Object.defineProperty(exports,\"ClientAuthErrorMessage\",{enumerable:!0,get:function(){return r.ClientAuthErrorMessage}}),Object.defineProperty(exports,\"ClientConfigurationError\",{enumerable:!0,get:function(){return r.ClientConfigurationError}}),Object.defineProperty(exports,\"ClientConfigurationErrorMessage\",{enumerable:!0,get:function(){return r.ClientConfigurationErrorMessage}}),Object.defineProperty(exports,\"InteractionRequiredAuthError\",{enumerable:!0,get:function(){return r.InteractionRequiredAuthError}}),Object.defineProperty(exports,\"InteractionRequiredAuthErrorMessage\",{enumerable:!0,get:function(){return r.InteractionRequiredAuthErrorMessage}}),Object.defineProperty(exports,\"LogLevel\",{enumerable:!0,get:function(){return r.LogLevel}}),Object.defineProperty(exports,\"Logger\",{enumerable:!0,get:function(){return r.Logger}}),Object.defineProperty(exports,\"PromptValue\",{enumerable:!0,get:function(){return r.PromptValue}}),Object.defineProperty(exports,\"ProtocolMode\",{enumerable:!0,get:function(){return r.ProtocolMode}}),Object.defineProperty(exports,\"ResponseMode\",{enumerable:!0,get:function(){return r.ResponseMode}}),Object.defineProperty(exports,\"ServerError\",{enumerable:!0,get:function(){return r.ServerError}}),Object.defineProperty(exports,\"TokenCacheContext\",{enumerable:!0,get:function(){return r.TokenCacheContext}}),exports.ClientApplication=w,exports.ClientAssertion=M,exports.ConfidentialClientApplication=class extends w{constructor(e){super(e),this.setClientCredential(this.config)}async acquireTokenByClientCredential(e){this.logger.info(\"acquireTokenByClientCredential called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e)},i={azureRegion:t.azureRegion,environmentRegion:process.env.REGION_NAME},n=this.initializeServerTelemetryManager(c.acquireTokenByClientCredential,t.correlationId,t.skipCache);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,n,i),o=new r.ClientCredentialClient(e);return this.logger.verbose(\"Client credential client created\",t.correlationId),o.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),n.cacheFailedRequest(e),e}}async acquireTokenOnBehalfOf(e){this.logger.info(\"acquireTokenOnBehalfOf called\",e.correlationId);const t={...e,...this.initializeBaseRequest(e)};try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId),i=new r.OnBehalfOfClient(e);return this.logger.verbose(\"On behalf of client created\",t.correlationId),i.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),e}}setClientCredential(e){const t=!r.StringUtils.isEmpty(e.auth.clientSecret),i=!r.StringUtils.isEmpty(e.auth.clientAssertion),n=e.auth.clientCertificate||{thumbprint:\"\",privateKey:\"\"},o=!r.StringUtils.isEmpty(n.thumbprint)||!r.StringUtils.isEmpty(n.privateKey);if(t&&i||i&&o||t&&o)throw r.ClientAuthError.createInvalidCredentialError();if(e.auth.clientSecret)this.clientSecret=e.auth.clientSecret;else if(e.auth.clientAssertion)this.clientAssertion=M.fromAssertion(e.auth.clientAssertion);else{if(!o)throw r.ClientAuthError.createInvalidCredentialError();var a;this.clientAssertion=M.fromCertificate(n.thumbprint,n.privateKey,null==(a=e.auth.clientCertificate)?void 0:a.x5c)}}},exports.CryptoProvider=m,exports.NodeStorage=A,exports.PublicClientApplication=class extends w{constructor(e){super(e)}async acquireTokenByDeviceCode(e){this.logger.info(\"acquireTokenByDeviceCode called\",e.correlationId);const t=Object.assign(e,this.initializeBaseRequest(e)),i=this.initializeServerTelemetryManager(c.acquireTokenByDeviceCode,t.correlationId);try{const e=await this.buildOauthClientConfiguration(t.authority,t.correlationId,i),n=new r.DeviceCodeClient(e);return this.logger.verbose(\"Device code client created\",t.correlationId),n.acquireToken(t)}catch(e){throw e instanceof r.AuthError&&e.setCorrelationId(t.correlationId),i.cacheFailedRequest(e),e}}},exports.TokenCache=E,exports.buildAppConfiguration=g,exports.version=\"1.3.3\";\n//# sourceMappingURL=msal-node.cjs.production.min.js.map\n",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextAPI = void 0;\nvar NoopContextManager_1 = require(\"../context/NoopContextManager\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager_1.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return global_utils_1.registerGlobal(API_NAME, contextManager, diag_1.DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return global_utils_1.getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexports.ContextAPI = ContextAPI;\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagAPI = void 0;\nvar ComponentLogger_1 = require(\"../diag/ComponentLogger\");\nvar logLevelLogger_1 = require(\"../diag/internal/logLevelLogger\");\nvar types_1 = require(\"../diag/types\");\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var logger = global_utils_1.getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, \n                // work around Function.prototype.apply types\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                arguments);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a, _b;\n            if (logLevel === void 0) { logLevel = types_1.DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            var oldLogger = global_utils_1.getGlobal('diag');\n            var newLogger = logLevelLogger_1.createLogLevelDiagLogger(logLevel, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger) {\n                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return global_utils_1.registerGlobal('diag', newLogger, self, true);\n        };\n        self.disable = function () {\n            global_utils_1.unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new ComponentLogger_1.DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexports.DiagAPI = DiagAPI;\n//# sourceMappingURL=diag.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar NoopTextMapPropagator_1 = require(\"../propagation/NoopTextMapPropagator\");\nvar TextMapPropagator_1 = require(\"../propagation/TextMapPropagator\");\nvar context_helpers_1 = require(\"../baggage/context-helpers\");\nvar utils_1 = require(\"../baggage/utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator_1.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = utils_1.createBaggage;\n        this.getBaggage = context_helpers_1.getBaggage;\n        this.setBaggage = context_helpers_1.setBaggage;\n        this.deleteBaggage = context_helpers_1.deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return global_utils_1.registerGlobal(API_NAME, propagator, diag_1.DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = TextMapPropagator_1.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = TextMapPropagator_1.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return global_utils_1.getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceAPI = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\nvar ProxyTracerProvider_1 = require(\"../trace/ProxyTracerProvider\");\nvar spancontext_utils_1 = require(\"../trace/spancontext-utils\");\nvar context_utils_1 = require(\"../trace/context-utils\");\nvar diag_1 = require(\"./diag\");\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n        this.wrapSpanContext = spancontext_utils_1.wrapSpanContext;\n        this.isSpanContextValid = spancontext_utils_1.isSpanContextValid;\n        this.deleteSpan = context_utils_1.deleteSpan;\n        this.getSpan = context_utils_1.getSpan;\n        this.getSpanContext = context_utils_1.getSpanContext;\n        this.setSpan = context_utils_1.setSpan;\n        this.setSpanContext = context_utils_1.setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = global_utils_1.registerGlobal(API_NAME, this._proxyTracerProvider, diag_1.DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return global_utils_1.getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        global_utils_1.unregisterGlobal(API_NAME, diag_1.DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider_1.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexports.TraceAPI = TraceAPI;\n//# sourceMappingURL=trace.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteBaggage = exports.setBaggage = exports.getBaggage = void 0;\nvar context_1 = require(\"../context/context\");\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = context_1.createContextKey('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\nexports.getBaggage = getBaggage;\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\nexports.setBaggage = setBaggage;\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\nexports.deleteBaggage = deleteBaggage;\n//# sourceMappingURL=context-helpers.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaggageImpl = void 0;\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var k = _a[0], v = _a[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            newBaggage._entries.delete(key);\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\nexports.BaggageImpl = BaggageImpl;\n//# sourceMappingURL=baggage-impl.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataSymbol = void 0;\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexports.baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baggageEntryMetadataFromString = exports.createBaggage = void 0;\nvar __1 = require(\"..\");\nvar baggage_impl_1 = require(\"./internal/baggage-impl\");\nvar symbol_1 = require(\"./internal/symbol\");\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new baggage_impl_1.BaggageImpl(new Map(Object.entries(entries)));\n}\nexports.createBaggage = createBaggage;\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        __1.diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: symbol_1.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\nexports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n//# sourceMappingURL=utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Exception.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Time.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopContextManager = void 0;\nvar context_1 = require(\"./context\");\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return context_1.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], args));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\nexports.NoopContextManager = NoopContextManager;\n//# sourceMappingURL=NoopContextManager.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ROOT_CONTEXT = exports.createContextKey = void 0;\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nexports.createContextKey = createContextKey;\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexports.ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagComponentLogger = void 0;\nvar global_utils_1 = require(\"../internal/global-utils\");\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexports.DiagComponentLogger = DiagComponentLogger;\nfunction logProxy(funcName, namespace, args) {\n    var logger = global_utils_1.getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, args);\n}\n//# sourceMappingURL=ComponentLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagConsoleLogger = void 0;\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var orgArguments = arguments;\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, orgArguments);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexports.DiagConsoleLogger = DiagConsoleLogger;\n//# sourceMappingURL=consoleLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./consoleLogger\"), exports);\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createLogLevelDiagLogger = void 0;\nvar types_1 = require(\"../types\");\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < types_1.DiagLogLevel.NONE) {\n        maxLevel = types_1.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > types_1.DiagLogLevel.ALL) {\n        maxLevel = types_1.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', types_1.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', types_1.DiagLogLevel.WARN),\n        info: _filterFunc('info', types_1.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', types_1.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', types_1.DiagLogLevel.VERBOSE),\n    };\n}\nexports.createLogLevelDiagLogger = createLogLevelDiagLogger;\n//# sourceMappingURL=logLevelLogger.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagLogLevel = void 0;\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel = exports.DiagLogLevel || (exports.DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diag = exports.propagation = exports.trace = exports.context = exports.isValidSpanId = exports.isValidTraceId = exports.isSpanContextValid = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = exports.baggageEntryMetadataFromString = void 0;\n__exportStar(require(\"./baggage/types\"), exports);\nvar utils_1 = require(\"./baggage/utils\");\nObject.defineProperty(exports, \"baggageEntryMetadataFromString\", { enumerable: true, get: function () { return utils_1.baggageEntryMetadataFromString; } });\n__exportStar(require(\"./common/Exception\"), exports);\n__exportStar(require(\"./common/Time\"), exports);\n__exportStar(require(\"./diag\"), exports);\n__exportStar(require(\"./propagation/TextMapPropagator\"), exports);\n__exportStar(require(\"./trace/attributes\"), exports);\n__exportStar(require(\"./trace/link\"), exports);\n__exportStar(require(\"./trace/ProxyTracer\"), exports);\n__exportStar(require(\"./trace/ProxyTracerProvider\"), exports);\n__exportStar(require(\"./trace/Sampler\"), exports);\n__exportStar(require(\"./trace/SamplingResult\"), exports);\n__exportStar(require(\"./trace/span_context\"), exports);\n__exportStar(require(\"./trace/span_kind\"), exports);\n__exportStar(require(\"./trace/span\"), exports);\n__exportStar(require(\"./trace/SpanOptions\"), exports);\n__exportStar(require(\"./trace/status\"), exports);\n__exportStar(require(\"./trace/trace_flags\"), exports);\n__exportStar(require(\"./trace/trace_state\"), exports);\n__exportStar(require(\"./trace/tracer_provider\"), exports);\n__exportStar(require(\"./trace/tracer\"), exports);\nvar spancontext_utils_1 = require(\"./trace/spancontext-utils\");\nObject.defineProperty(exports, \"INVALID_SPANID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPANID; } });\nObject.defineProperty(exports, \"INVALID_TRACEID\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_TRACEID; } });\nObject.defineProperty(exports, \"INVALID_SPAN_CONTEXT\", { enumerable: true, get: function () { return spancontext_utils_1.INVALID_SPAN_CONTEXT; } });\nObject.defineProperty(exports, \"isSpanContextValid\", { enumerable: true, get: function () { return spancontext_utils_1.isSpanContextValid; } });\nObject.defineProperty(exports, \"isValidTraceId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidTraceId; } });\nObject.defineProperty(exports, \"isValidSpanId\", { enumerable: true, get: function () { return spancontext_utils_1.isValidSpanId; } });\n__exportStar(require(\"./context/context\"), exports);\n__exportStar(require(\"./context/types\"), exports);\nvar context_1 = require(\"./api/context\");\n/** Entrypoint for context API */\nexports.context = context_1.ContextAPI.getInstance();\nvar trace_1 = require(\"./api/trace\");\n/** Entrypoint for trace API */\nexports.trace = trace_1.TraceAPI.getInstance();\nvar propagation_1 = require(\"./api/propagation\");\n/** Entrypoint for propagation API */\nexports.propagation = propagation_1.PropagationAPI.getInstance();\nvar diag_1 = require(\"./api/diag\");\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexports.diag = diag_1.DiagAPI.instance();\nexports.default = {\n    trace: exports.trace,\n    context: exports.context,\n    propagation: exports.propagation,\n    diag: exports.diag,\n};\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unregisterGlobal = exports.getGlobal = exports.registerGlobal = void 0;\nvar platform_1 = require(\"../platform\");\nvar version_1 = require(\"../version\");\nvar semver_1 = require(\"./semver\");\nvar major = version_1.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = platform_1._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: version_1.VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== version_1.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + version_1.VERSION + \".\");\n    return true;\n}\nexports.registerGlobal = registerGlobal;\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !semver_1.isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexports.getGlobal = getGlobal;\nfunction unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + version_1.VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\nexports.unregisterGlobal = unregisterGlobal;\n//# sourceMappingURL=global-utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCompatible = exports._makeCompatibilityCheck = void 0;\nvar version_1 = require(\"../version\");\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\nexports._makeCompatibilityCheck = _makeCompatibilityCheck;\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexports.isCompatible = _makeCompatibilityCheck(version_1.VERSION);\n//# sourceMappingURL=semver.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./node\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports._globalThis = void 0;\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexports._globalThis = typeof globalThis === 'object' ? globalThis : global;\n//# sourceMappingURL=globalThis.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./globalThis\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTextMapPropagator = void 0;\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\nexports.NoopTextMapPropagator = NoopTextMapPropagator;\n//# sourceMappingURL=NoopTextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;\nexports.defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexports.defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonRecordingSpan = void 0;\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = spancontext_utils_1.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexports.NonRecordingSpan = NonRecordingSpan;\n//# sourceMappingURL=NonRecordingSpan.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTracer = void 0;\nvar __1 = require(\"../\");\nvar context_utils_1 = require(\"../trace/context-utils\");\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new NonRecordingSpan_1.NonRecordingSpan();\n        }\n        var parentFromContext = context && context_utils_1.getSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            spancontext_utils_1.isSpanContextValid(parentFromContext)) {\n            return new NonRecordingSpan_1.NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new NonRecordingSpan_1.NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : __1.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = context_utils_1.setSpan(parentContext, span);\n        return __1.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\nexports.NoopTracer = NoopTracer;\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopTracerProvider = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version) {\n        return new NoopTracer_1.NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\nexports.NoopTracerProvider = NoopTracerProvider;\n//# sourceMappingURL=NoopTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracer = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\nvar NOOP_TRACER = new NoopTracer_1.NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexports.ProxyTracer = ProxyTracer;\n//# sourceMappingURL=ProxyTracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracerProvider = void 0;\nvar ProxyTracer_1 = require(\"./ProxyTracer\");\nvar NoopTracerProvider_1 = require(\"./NoopTracerProvider\");\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider_1.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexports.ProxyTracerProvider = ProxyTracerProvider;\n//# sourceMappingURL=ProxyTracerProvider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=Sampler.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SamplingDecision = void 0;\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision = exports.SamplingDecision || (exports.SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SpanOptions.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=attributes.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSpanContext = exports.setSpanContext = exports.deleteSpan = exports.setSpan = exports.getSpan = void 0;\nvar context_1 = require(\"../context/context\");\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\n/**\n * span key\n */\nvar SPAN_KEY = context_1.createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\nexports.getSpan = getSpan;\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\nexports.setSpan = setSpan;\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\nexports.deleteSpan = deleteSpan;\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new NonRecordingSpan_1.NonRecordingSpan(spanContext));\n}\nexports.setSpanContext = setSpanContext;\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\nexports.getSpanContext = getSpanContext;\n//# sourceMappingURL=context-utils.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=link.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=span_context.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanKind = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapSpanContext = exports.isSpanContextValid = exports.isValidSpanId = exports.isValidTraceId = exports.INVALID_SPAN_CONTEXT = exports.INVALID_TRACEID = exports.INVALID_SPANID = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NonRecordingSpan_1 = require(\"./NonRecordingSpan\");\nvar trace_flags_1 = require(\"./trace_flags\");\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexports.INVALID_SPANID = '0000000000000000';\nexports.INVALID_TRACEID = '00000000000000000000000000000000';\nexports.INVALID_SPAN_CONTEXT = {\n    traceId: exports.INVALID_TRACEID,\n    spanId: exports.INVALID_SPANID,\n    traceFlags: trace_flags_1.TraceFlags.NONE,\n};\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== exports.INVALID_TRACEID;\n}\nexports.isValidTraceId = isValidTraceId;\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== exports.INVALID_SPANID;\n}\nexports.isValidSpanId = isValidSpanId;\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\nexports.isSpanContextValid = isSpanContextValid;\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n    return new NonRecordingSpan_1.NonRecordingSpan(spanContext);\n}\nexports.wrapSpanContext = wrapSpanContext;\n//# sourceMappingURL=spancontext-utils.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SpanStatusCode = void 0;\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode = exports.SpanStatusCode || (exports.SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TraceFlags = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trace_state.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=tracer_provider.js.map",
    "\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '1.0.2';\n//# sourceMappingURL=version.js.map",
    "\"use strict\";\nfunction noop() { }\nfunction once(emitter, name) {\n    const o = once.spread(emitter, name);\n    const r = o.then((args) => args[0]);\n    r.cancel = o.cancel;\n    return r;\n}\n(function (once) {\n    function spread(emitter, name) {\n        let c = null;\n        const p = new Promise((resolve, reject) => {\n            function cancel() {\n                emitter.removeListener(name, onEvent);\n                emitter.removeListener('error', onError);\n                p.cancel = noop;\n            }\n            function onEvent(...args) {\n                cancel();\n                resolve(args);\n            }\n            function onError(err) {\n                cancel();\n                reject(err);\n            }\n            c = cancel;\n            emitter.on(name, onEvent);\n            emitter.on('error', onError);\n        });\n        if (!c) {\n            throw new TypeError('Could not get `cancel()` function');\n        }\n        p.cancel = c;\n        return p;\n    }\n    once.spread = spread;\n})(once || (once = {}));\nmodule.exports = once;\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst events_1 = require(\"events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst promisify_1 = __importDefault(require(\"./promisify\"));\nconst debug = debug_1.default('agent-base');\nfunction isAgent(v) {\n    return Boolean(v) && typeof v.addRequest === 'function';\n}\nfunction isSecureEndpoint() {\n    const { stack } = new Error();\n    if (typeof stack !== 'string')\n        return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n}\nfunction createAgent(callback, opts) {\n    return new createAgent.Agent(callback, opts);\n}\n(function (createAgent) {\n    /**\n     * Base `http.Agent` implementation.\n     * No pooling/keep-alive is implemented by default.\n     *\n     * @param {Function} callback\n     * @api public\n     */\n    class Agent extends events_1.EventEmitter {\n        constructor(callback, _opts) {\n            super();\n            let opts = _opts;\n            if (typeof callback === 'function') {\n                this.callback = callback;\n            }\n            else if (callback) {\n                opts = callback;\n            }\n            // Timeout for the socket to be returned from the callback\n            this.timeout = null;\n            if (opts && typeof opts.timeout === 'number') {\n                this.timeout = opts.timeout;\n            }\n            // These aren't actually used by `agent-base`, but are required\n            // for the TypeScript definition files in `@types/node` :/\n            this.maxFreeSockets = 1;\n            this.maxSockets = 1;\n            this.maxTotalSockets = Infinity;\n            this.sockets = {};\n            this.freeSockets = {};\n            this.requests = {};\n            this.options = {};\n        }\n        get defaultPort() {\n            if (typeof this.explicitDefaultPort === 'number') {\n                return this.explicitDefaultPort;\n            }\n            return isSecureEndpoint() ? 443 : 80;\n        }\n        set defaultPort(v) {\n            this.explicitDefaultPort = v;\n        }\n        get protocol() {\n            if (typeof this.explicitProtocol === 'string') {\n                return this.explicitProtocol;\n            }\n            return isSecureEndpoint() ? 'https:' : 'http:';\n        }\n        set protocol(v) {\n            this.explicitProtocol = v;\n        }\n        callback(req, opts, fn) {\n            throw new Error('\"agent-base\" has no default implementation, you must subclass and override `callback()`');\n        }\n        /**\n         * Called by node-core's \"_http_client.js\" module when creating\n         * a new HTTP request with this Agent instance.\n         *\n         * @api public\n         */\n        addRequest(req, _opts) {\n            const opts = Object.assign({}, _opts);\n            if (typeof opts.secureEndpoint !== 'boolean') {\n                opts.secureEndpoint = isSecureEndpoint();\n            }\n            if (opts.host == null) {\n                opts.host = 'localhost';\n            }\n            if (opts.port == null) {\n                opts.port = opts.secureEndpoint ? 443 : 80;\n            }\n            if (opts.protocol == null) {\n                opts.protocol = opts.secureEndpoint ? 'https:' : 'http:';\n            }\n            if (opts.host && opts.path) {\n                // If both a `host` and `path` are specified then it's most\n                // likely the result of a `url.parse()` call... we need to\n                // remove the `path` portion so that `net.connect()` doesn't\n                // attempt to open that as a unix socket file.\n                delete opts.path;\n            }\n            delete opts.agent;\n            delete opts.hostname;\n            delete opts._defaultAgent;\n            delete opts.defaultPort;\n            delete opts.createConnection;\n            // Hint to use \"Connection: close\"\n            // XXX: non-documented `http` module API :(\n            req._last = true;\n            req.shouldKeepAlive = false;\n            let timedOut = false;\n            let timeoutId = null;\n            const timeoutMs = opts.timeout || this.timeout;\n            const onerror = (err) => {\n                if (req._hadError)\n                    return;\n                req.emit('error', err);\n                // For Safety. Some additional errors might fire later on\n                // and we need to make sure we don't double-fire the error event.\n                req._hadError = true;\n            };\n            const ontimeout = () => {\n                timeoutId = null;\n                timedOut = true;\n                const err = new Error(`A \"socket\" was not created for HTTP request before ${timeoutMs}ms`);\n                err.code = 'ETIMEOUT';\n                onerror(err);\n            };\n            const callbackError = (err) => {\n                if (timedOut)\n                    return;\n                if (timeoutId !== null) {\n                    clearTimeout(timeoutId);\n                    timeoutId = null;\n                }\n                onerror(err);\n            };\n            const onsocket = (socket) => {\n                if (timedOut)\n                    return;\n                if (timeoutId != null) {\n                    clearTimeout(timeoutId);\n                    timeoutId = null;\n                }\n                if (isAgent(socket)) {\n                    // `socket` is actually an `http.Agent` instance, so\n                    // relinquish responsibility for this `req` to the Agent\n                    // from here on\n                    debug('Callback returned another Agent instance %o', socket.constructor.name);\n                    socket.addRequest(req, opts);\n                    return;\n                }\n                if (socket) {\n                    socket.once('free', () => {\n                        this.freeSocket(socket, opts);\n                    });\n                    req.onSocket(socket);\n                    return;\n                }\n                const err = new Error(`no Duplex stream was returned to agent-base for \\`${req.method} ${req.path}\\``);\n                onerror(err);\n            };\n            if (typeof this.callback !== 'function') {\n                onerror(new Error('`callback` is not defined'));\n                return;\n            }\n            if (!this.promisifiedCallback) {\n                if (this.callback.length >= 3) {\n                    debug('Converting legacy callback function to promise');\n                    this.promisifiedCallback = promisify_1.default(this.callback);\n                }\n                else {\n                    this.promisifiedCallback = this.callback;\n                }\n            }\n            if (typeof timeoutMs === 'number' && timeoutMs > 0) {\n                timeoutId = setTimeout(ontimeout, timeoutMs);\n            }\n            if ('port' in opts && typeof opts.port !== 'number') {\n                opts.port = Number(opts.port);\n            }\n            try {\n                debug('Resolving socket for %o request: %o', opts.protocol, `${req.method} ${req.path}`);\n                Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);\n            }\n            catch (err) {\n                Promise.reject(err).catch(callbackError);\n            }\n        }\n        freeSocket(socket, opts) {\n            debug('Freeing socket %o %o', socket.constructor.name, opts);\n            socket.destroy();\n        }\n        destroy() {\n            debug('Destroying agent %o', this.constructor.name);\n        }\n    }\n    createAgent.Agent = Agent;\n    // So that `instanceof` works correctly\n    createAgent.prototype = createAgent.Agent.prototype;\n})(createAgent || (createAgent = {}));\nmodule.exports = createAgent;\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction promisify(fn) {\n    return function (req, opts) {\n        return new Promise((resolve, reject) => {\n            fn.call(this, req, opts, (err, rtn) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rtn);\n                }\n            });\n        });\n    };\n}\nexports.default = promisify;\n//# sourceMappingURL=promisify.js.map",
    "module.exports =\n{\n  parallel      : require('./parallel.js'),\n  serial        : require('./serial.js'),\n  serialOrdered : require('./serialOrdered.js')\n};\n",
    "// API\nmodule.exports = abort;\n\n/**\n * Aborts leftover active jobs\n *\n * @param {object} state - current state object\n */\nfunction abort(state)\n{\n  Object.keys(state.jobs).forEach(clean.bind(state));\n\n  // reset leftover jobs\n  state.jobs = {};\n}\n\n/**\n * Cleans up leftover job by invoking abort function for the provided job id\n *\n * @this  state\n * @param {string|number} key - job id to abort\n */\nfunction clean(key)\n{\n  if (typeof this.jobs[key] == 'function')\n  {\n    this.jobs[key]();\n  }\n}\n",
    "var defer = require('./defer.js');\n\n// API\nmodule.exports = async;\n\n/**\n * Runs provided callback asynchronously\n * even if callback itself is not\n *\n * @param   {function} callback - callback to invoke\n * @returns {function} - augmented callback\n */\nfunction async(callback)\n{\n  var isAsync = false;\n\n  // check if async happened\n  defer(function() { isAsync = true; });\n\n  return function async_callback(err, result)\n  {\n    if (isAsync)\n    {\n      callback(err, result);\n    }\n    else\n    {\n      defer(function nextTick_callback()\n      {\n        callback(err, result);\n      });\n    }\n  };\n}\n",
    "module.exports = defer;\n\n/**\n * Runs provided function on next iteration of the event loop\n *\n * @param {function} fn - function to run\n */\nfunction defer(fn)\n{\n  var nextTick = typeof setImmediate == 'function'\n    ? setImmediate\n    : (\n      typeof process == 'object' && typeof process.nextTick == 'function'\n      ? process.nextTick\n      : null\n    );\n\n  if (nextTick)\n  {\n    nextTick(fn);\n  }\n  else\n  {\n    setTimeout(fn, 0);\n  }\n}\n",
    "var async = require('./async.js')\n  , abort = require('./abort.js')\n  ;\n\n// API\nmodule.exports = iterate;\n\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\nfunction iterate(list, iterator, state, callback)\n{\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n\n  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)\n  {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs))\n    {\n      return;\n    }\n\n    // clean up jobs\n    delete state.jobs[key];\n\n    if (error)\n    {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    }\n    else\n    {\n      state.results[key] = output;\n    }\n\n    // return salvaged results\n    callback(error, state.results);\n  });\n}\n\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\nfunction runJob(iterator, key, item, callback)\n{\n  var aborter;\n\n  // allow shortcut if iterator expects only two arguments\n  if (iterator.length == 2)\n  {\n    aborter = iterator(item, async(callback));\n  }\n  // otherwise go with full three arguments\n  else\n  {\n    aborter = iterator(item, key, async(callback));\n  }\n\n  return aborter;\n}\n",
    "// API\nmodule.exports = state;\n\n/**\n * Creates initial state object\n * for iteration over list\n *\n * @param   {array|object} list - list to iterate over\n * @param   {function|null} sortMethod - function to use for keys sort,\n *                                     or `null` to keep them as is\n * @returns {object} - initial state object\n */\nfunction state(list, sortMethod)\n{\n  var isNamedList = !Array.isArray(list)\n    , initState =\n    {\n      index    : 0,\n      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,\n      jobs     : {},\n      results  : isNamedList ? {} : [],\n      size     : isNamedList ? Object.keys(list).length : list.length\n    }\n    ;\n\n  if (sortMethod)\n  {\n    // sort array keys based on it's values\n    // sort object's keys just on own merit\n    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)\n    {\n      return sortMethod(list[a], list[b]);\n    });\n  }\n\n  return initState;\n}\n",
    "var abort = require('./abort.js')\n  , async = require('./async.js')\n  ;\n\n// API\nmodule.exports = terminator;\n\n/**\n * Terminates jobs in the attached state context\n *\n * @this  AsyncKitState#\n * @param {function} callback - final callback to invoke after termination\n */\nfunction terminator(callback)\n{\n  if (!Object.keys(this.jobs).length)\n  {\n    return;\n  }\n\n  // fast forward iteration index\n  this.index = this.size;\n\n  // abort jobs\n  abort(this);\n\n  // send back results we have so far\n  async(callback)(null, this.results);\n}\n",
    "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = parallel;\n\n/**\n * Runs iterator over provided array elements in parallel\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction parallel(list, iterator, callback)\n{\n  var state = initState(list);\n\n  while (state.index < (state['keyedList'] || list).length)\n  {\n    iterate(list, iterator, state, function(error, result)\n    {\n      if (error)\n      {\n        callback(error, result);\n        return;\n      }\n\n      // looks like it's the last one\n      if (Object.keys(state.jobs).length === 0)\n      {\n        callback(null, state.results);\n        return;\n      }\n    });\n\n    state.index++;\n  }\n\n  return terminator.bind(state, callback);\n}\n",
    "var serialOrdered = require('./serialOrdered.js');\n\n// Public API\nmodule.exports = serial;\n\n/**\n * Runs iterator over provided array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serial(list, iterator, callback)\n{\n  return serialOrdered(list, iterator, null, callback);\n}\n",
    "var iterate    = require('./lib/iterate.js')\n  , initState  = require('./lib/state.js')\n  , terminator = require('./lib/terminator.js')\n  ;\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending  = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback)\n{\n  var state = initState(list, sortMethod);\n\n  iterate(list, iterator, state, function iteratorHandler(error, result)\n  {\n    if (error)\n    {\n      callback(error, result);\n      return;\n    }\n\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length)\n    {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b)\n{\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b)\n{\n  return -1 * ascending(a, b);\n}\n",
    "module.exports = require('./lib/axios');",
    "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildFullPath = require('../core/buildFullPath');\nvar buildURL = require('./../helpers/buildURL');\nvar http = require('http');\nvar https = require('https');\nvar httpFollow = require('follow-redirects').http;\nvar httpsFollow = require('follow-redirects').https;\nvar url = require('url');\nvar zlib = require('zlib');\nvar pkg = require('./../../package.json');\nvar createError = require('../core/createError');\nvar enhanceError = require('../core/enhanceError');\n\nvar isHttps = /https:?/;\n\n/**\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} proxy\n * @param {string} location\n */\nfunction setProxy(options, proxy, location) {\n  options.hostname = proxy.host;\n  options.host = proxy.host;\n  options.port = proxy.port;\n  options.path = location;\n\n  // Basic proxy authorization\n  if (proxy.auth) {\n    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');\n    options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n  }\n\n  // If a proxy is used, any redirects must also pass through the proxy\n  options.beforeRedirect = function beforeRedirect(redirection) {\n    redirection.headers.host = redirection.host;\n    setProxy(redirection, proxy, redirection.href);\n  };\n}\n\n/*eslint consistent-return:0*/\nmodule.exports = function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    var resolve = function resolve(value) {\n      resolvePromise(value);\n    };\n    var reject = function reject(value) {\n      rejectPromise(value);\n    };\n    var data = config.data;\n    var headers = config.headers;\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    if ('User-Agent' in headers || 'user-agent' in headers) {\n      // User-Agent is specified; handle case where no UA header is desired\n      if (!headers['User-Agent'] && !headers['user-agent']) {\n        delete headers['User-Agent'];\n        delete headers['user-agent'];\n      }\n      // Otherwise, use specified value\n    } else {\n      // Only set header if it hasn't been set in config\n      headers['User-Agent'] = 'axios/' + pkg.version;\n    }\n\n    if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(createError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          config\n        ));\n      }\n\n      // Add Content-Length header if data exists\n      headers['Content-Length'] = data.length;\n    }\n\n    // HTTP basic authentication\n    var auth = undefined;\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    // Parse url\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    var parsed = url.parse(fullPath);\n    var protocol = parsed.protocol || 'http:';\n\n    if (!auth && parsed.auth) {\n      var urlAuth = parsed.auth.split(':');\n      var urlUsername = urlAuth[0] || '';\n      var urlPassword = urlAuth[1] || '';\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    if (auth) {\n      delete headers.Authorization;\n    }\n\n    var isHttpsRequest = isHttps.test(protocol);\n    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    var options = {\n      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n      method: config.method.toUpperCase(),\n      headers: headers,\n      agent: agent,\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth: auth\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n    }\n\n    var proxy = config.proxy;\n    if (!proxy && proxy !== false) {\n      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n      if (proxyUrl) {\n        var parsedProxyUrl = url.parse(proxyUrl);\n        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n        var shouldProxy = true;\n\n        if (noProxyEnv) {\n          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n            return s.trim();\n          });\n\n          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n            if (!proxyElement) {\n              return false;\n            }\n            if (proxyElement === '*') {\n              return true;\n            }\n            if (proxyElement[0] === '.' &&\n                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n              return true;\n            }\n\n            return parsed.hostname === proxyElement;\n          });\n        }\n\n        if (shouldProxy) {\n          proxy = {\n            host: parsedProxyUrl.hostname,\n            port: parsedProxyUrl.port,\n            protocol: parsedProxyUrl.protocol\n          };\n\n          if (parsedProxyUrl.auth) {\n            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n            proxy.auth = {\n              username: proxyUrlAuth[0],\n              password: proxyUrlAuth[1]\n            };\n          }\n        }\n      }\n    }\n\n    if (proxy) {\n      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    var transport;\n    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsProxy ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      transport = isHttpsProxy ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    }\n\n    // Create the request\n    var req = transport.request(options, function handleResponse(res) {\n      if (req.aborted) return;\n\n      // uncompress the response body transparently if required\n      var stream = res;\n\n      // return the last request in case of redirects\n      var lastRequest = res.req || req;\n\n\n      // if no content, is HEAD request or decompress disabled we should not decompress\n      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'compress':\n        case 'deflate':\n        // add the unzipper to the body stream processing pipeline\n          stream = stream.pipe(zlib.createUnzip());\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        }\n      }\n\n      var response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: res.headers,\n        config: config,\n        request: lastRequest\n      };\n\n      if (config.responseType === 'stream') {\n        response.data = stream;\n        settle(resolve, reject, response);\n      } else {\n        var responseBuffer = [];\n        var totalResponseBytes = 0;\n        stream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            stream.destroy();\n            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              config, null, lastRequest));\n          }\n        });\n\n        stream.on('error', function handleStreamError(err) {\n          if (req.aborted) return;\n          reject(enhanceError(err, config, null, lastRequest));\n        });\n\n        stream.on('end', function handleStreamEnd() {\n          var responseData = Buffer.concat(responseBuffer);\n          if (config.responseType !== 'arraybuffer') {\n            responseData = responseData.toString(config.responseEncoding);\n            if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n              responseData = utils.stripBOM(responseData);\n            }\n          }\n\n          response.data = responseData;\n          settle(resolve, reject, response);\n        });\n      }\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n      reject(enhanceError(err, config, null, req));\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      var timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(createError(\n          'error trying to parse `config.timeout` to int',\n          config,\n          'ERR_PARSE_TIMEOUT',\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devoring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        req.abort();\n        reject(createError(\n          'timeout of ' + timeout + 'ms exceeded',\n          config,\n          config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n          req\n        ));\n      });\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (req.aborted) return;\n\n        req.abort();\n        reject(cancel);\n      });\n    }\n\n    // Send the request\n    if (utils.isStream(data)) {\n      data.on('error', function handleStreamError(err) {\n        reject(enhanceError(err, config, null, req));\n      }).pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n",
    "'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n",
    "'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n",
    "'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n",
    "'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),\n      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),\n      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n",
    "'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n",
    "'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n",
    "'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n",
    "'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n",
    "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n",
    "'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n",
    "'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n",
    "'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n",
    "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n",
    "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n",
    "'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n",
    "'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n",
    "'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n",
    "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n",
    "'use strict';\n\nvar pkg = require('./../../package.json');\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\nvar currentVerArr = pkg.version.split('.');\n\n/**\n * Compare package versions\n * @param {string} version\n * @param {string?} thanVersion\n * @returns {boolean}\n */\nfunction isOlderVersion(version, thanVersion) {\n  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;\n  var destVer = version.split('.');\n  for (var i = 0; i < 3; i++) {\n    if (pkgVersionArr[i] > destVer[i]) {\n      return true;\n    } else if (pkgVersionArr[i] < destVer[i]) {\n      return false;\n    }\n  }\n  return false;\n}\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator\n * @param {string?} version\n * @param {string} message\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  var isDeprecated = version && isOlderVersion(version);\n\n  function formatMessage(opt, desc) {\n    return '[Axios v' + pkg.version + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed in ' + version));\n    }\n\n    if (isDeprecated && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  isOlderVersion: isOlderVersion,\n  assertOptions: assertOptions,\n  validators: validators\n};\n",
    "'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n",
    "/*jshint node:true */\n'use strict';\nvar Buffer = require('buffer').Buffer; // browserify\nvar SlowBuffer = require('buffer').SlowBuffer;\n\nmodule.exports = bufferEq;\n\nfunction bufferEq(a, b) {\n\n  // shortcutting on type is necessary for correctness\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    return false;\n  }\n\n  // buffer sizes should be well-known information, so despite this\n  // shortcutting, it doesn't leak any information about the *contents* of the\n  // buffers.\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var c = 0;\n  for (var i = 0; i < a.length; i++) {\n    /*jshint bitwise:false */\n    c |= a[i] ^ b[i]; // XOR\n  }\n  return c === 0;\n}\n\nbufferEq.install = function() {\n  Buffer.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {\n    return bufferEq(this, that);\n  };\n};\n\nvar origBufEqual = Buffer.prototype.equal;\nvar origSlowBufEqual = SlowBuffer.prototype.equal;\nbufferEq.restore = function() {\n  Buffer.prototype.equal = origBufEqual;\n  SlowBuffer.prototype.equal = origSlowBufEqual;\n};\n",
    "var util = require('util');\nvar Stream = require('stream').Stream;\nvar DelayedStream = require('delayed-stream');\n\nmodule.exports = CombinedStream;\nfunction CombinedStream() {\n  this.writable = false;\n  this.readable = true;\n  this.dataSize = 0;\n  this.maxDataSize = 2 * 1024 * 1024;\n  this.pauseStreams = true;\n\n  this._released = false;\n  this._streams = [];\n  this._currentStream = null;\n  this._insideLoop = false;\n  this._pendingNext = false;\n}\nutil.inherits(CombinedStream, Stream);\n\nCombinedStream.create = function(options) {\n  var combinedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    combinedStream[option] = options[option];\n  }\n\n  return combinedStream;\n};\n\nCombinedStream.isStreamLike = function(stream) {\n  return (typeof stream !== 'function')\n    && (typeof stream !== 'string')\n    && (typeof stream !== 'boolean')\n    && (typeof stream !== 'number')\n    && (!Buffer.isBuffer(stream));\n};\n\nCombinedStream.prototype.append = function(stream) {\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n\n  if (isStreamLike) {\n    if (!(stream instanceof DelayedStream)) {\n      var newStream = DelayedStream.create(stream, {\n        maxDataSize: Infinity,\n        pauseStream: this.pauseStreams,\n      });\n      stream.on('data', this._checkDataSize.bind(this));\n      stream = newStream;\n    }\n\n    this._handleErrors(stream);\n\n    if (this.pauseStreams) {\n      stream.pause();\n    }\n  }\n\n  this._streams.push(stream);\n  return this;\n};\n\nCombinedStream.prototype.pipe = function(dest, options) {\n  Stream.prototype.pipe.call(this, dest, options);\n  this.resume();\n  return dest;\n};\n\nCombinedStream.prototype._getNext = function() {\n  this._currentStream = null;\n\n  if (this._insideLoop) {\n    this._pendingNext = true;\n    return; // defer call\n  }\n\n  this._insideLoop = true;\n  try {\n    do {\n      this._pendingNext = false;\n      this._realGetNext();\n    } while (this._pendingNext);\n  } finally {\n    this._insideLoop = false;\n  }\n};\n\nCombinedStream.prototype._realGetNext = function() {\n  var stream = this._streams.shift();\n\n\n  if (typeof stream == 'undefined') {\n    this.end();\n    return;\n  }\n\n  if (typeof stream !== 'function') {\n    this._pipeNext(stream);\n    return;\n  }\n\n  var getStream = stream;\n  getStream(function(stream) {\n    var isStreamLike = CombinedStream.isStreamLike(stream);\n    if (isStreamLike) {\n      stream.on('data', this._checkDataSize.bind(this));\n      this._handleErrors(stream);\n    }\n\n    this._pipeNext(stream);\n  }.bind(this));\n};\n\nCombinedStream.prototype._pipeNext = function(stream) {\n  this._currentStream = stream;\n\n  var isStreamLike = CombinedStream.isStreamLike(stream);\n  if (isStreamLike) {\n    stream.on('end', this._getNext.bind(this));\n    stream.pipe(this, {end: false});\n    return;\n  }\n\n  var value = stream;\n  this.write(value);\n  this._getNext();\n};\n\nCombinedStream.prototype._handleErrors = function(stream) {\n  var self = this;\n  stream.on('error', function(err) {\n    self._emitError(err);\n  });\n};\n\nCombinedStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nCombinedStream.prototype.pause = function() {\n  if (!this.pauseStreams) {\n    return;\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();\n  this.emit('pause');\n};\n\nCombinedStream.prototype.resume = function() {\n  if (!this._released) {\n    this._released = true;\n    this.writable = true;\n    this._getNext();\n  }\n\n  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();\n  this.emit('resume');\n};\n\nCombinedStream.prototype.end = function() {\n  this._reset();\n  this.emit('end');\n};\n\nCombinedStream.prototype.destroy = function() {\n  this._reset();\n  this.emit('close');\n};\n\nCombinedStream.prototype._reset = function() {\n  this.writable = false;\n  this._streams = [];\n  this._currentStream = null;\n};\n\nCombinedStream.prototype._checkDataSize = function() {\n  this._updateDataSize();\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';\n  this._emitError(new Error(message));\n};\n\nCombinedStream.prototype._updateDataSize = function() {\n  this.dataSize = 0;\n\n  var self = this;\n  this._streams.forEach(function(stream) {\n    if (!stream.dataSize) {\n      return;\n    }\n\n    self.dataSize += stream.dataSize;\n  });\n\n  if (this._currentStream && this._currentStream.dataSize) {\n    this.dataSize += this._currentStream.dataSize;\n  }\n};\n\nCombinedStream.prototype._emitError = function(err) {\n  this._reset();\n  this.emit('error', err);\n};\n",
    "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n",
    "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n",
    "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n",
    "/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n",
    "/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n",
    "'use strict';\nmodule.exports = (object, propertyName, fn) => {\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\n\n\tObject.defineProperty(object, propertyName, {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst result = fn();\n\t\t\tdefine(result);\n\t\t\treturn result;\n\t\t},\n\t\tset(value) {\n\t\t\tdefine(value);\n\t\t}\n\t});\n\n\treturn object;\n};\n",
    "var Stream = require('stream').Stream;\nvar util = require('util');\n\nmodule.exports = DelayedStream;\nfunction DelayedStream() {\n  this.source = null;\n  this.dataSize = 0;\n  this.maxDataSize = 1024 * 1024;\n  this.pauseStream = true;\n\n  this._maxDataSizeExceeded = false;\n  this._released = false;\n  this._bufferedEvents = [];\n}\nutil.inherits(DelayedStream, Stream);\n\nDelayedStream.create = function(source, options) {\n  var delayedStream = new this();\n\n  options = options || {};\n  for (var option in options) {\n    delayedStream[option] = options[option];\n  }\n\n  delayedStream.source = source;\n\n  var realEmit = source.emit;\n  source.emit = function() {\n    delayedStream._handleEmit(arguments);\n    return realEmit.apply(source, arguments);\n  };\n\n  source.on('error', function() {});\n  if (delayedStream.pauseStream) {\n    source.pause();\n  }\n\n  return delayedStream;\n};\n\nObject.defineProperty(DelayedStream.prototype, 'readable', {\n  configurable: true,\n  enumerable: true,\n  get: function() {\n    return this.source.readable;\n  }\n});\n\nDelayedStream.prototype.setEncoding = function() {\n  return this.source.setEncoding.apply(this.source, arguments);\n};\n\nDelayedStream.prototype.resume = function() {\n  if (!this._released) {\n    this.release();\n  }\n\n  this.source.resume();\n};\n\nDelayedStream.prototype.pause = function() {\n  this.source.pause();\n};\n\nDelayedStream.prototype.release = function() {\n  this._released = true;\n\n  this._bufferedEvents.forEach(function(args) {\n    this.emit.apply(this, args);\n  }.bind(this));\n  this._bufferedEvents = [];\n};\n\nDelayedStream.prototype.pipe = function() {\n  var r = Stream.prototype.pipe.apply(this, arguments);\n  this.resume();\n  return r;\n};\n\nDelayedStream.prototype._handleEmit = function(args) {\n  if (this._released) {\n    this.emit.apply(this, args);\n    return;\n  }\n\n  if (args[0] === 'data') {\n    this.dataSize += args[1].length;\n    this._checkIfMaxDataSizeExceeded();\n  }\n\n  this._bufferedEvents.push(args);\n};\n\nDelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {\n  if (this._maxDataSizeExceeded) {\n    return;\n  }\n\n  if (this.dataSize <= this.maxDataSize) {\n    return;\n  }\n\n  this._maxDataSizeExceeded = true;\n  var message =\n    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'\n  this.emit('error', new Error(message));\n};\n",
    "'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar getParamBytesForAlg = require('./param-bytes-for-alg');\n\nvar MAX_OCTET = 0x80,\n\tCLASS_UNIVERSAL = 0,\n\tPRIMITIVE_BIT = 0x20,\n\tTAG_SEQ = 0x10,\n\tTAG_INT = 0x02,\n\tENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),\n\tENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\nfunction base64Url(base64) {\n\treturn base64\n\t\t.replace(/=/g, '')\n\t\t.replace(/\\+/g, '-')\n\t\t.replace(/\\//g, '_');\n}\n\nfunction signatureAsBuffer(signature) {\n\tif (Buffer.isBuffer(signature)) {\n\t\treturn signature;\n\t} else if ('string' === typeof signature) {\n\t\treturn Buffer.from(signature, 'base64');\n\t}\n\n\tthrow new TypeError('ECDSA signature must be a Base64 string or a Buffer');\n}\n\nfunction derToJose(signature, alg) {\n\tsignature = signatureAsBuffer(signature);\n\tvar paramBytes = getParamBytesForAlg(alg);\n\n\t// the DER encoded param should at most be the param size, plus a padding\n\t// zero, since due to being a signed integer\n\tvar maxEncodedParamLength = paramBytes + 1;\n\n\tvar inputLength = signature.length;\n\n\tvar offset = 0;\n\tif (signature[offset++] !== ENCODED_TAG_SEQ) {\n\t\tthrow new Error('Could not find expected \"seq\"');\n\t}\n\n\tvar seqLength = signature[offset++];\n\tif (seqLength === (MAX_OCTET | 1)) {\n\t\tseqLength = signature[offset++];\n\t}\n\n\tif (inputLength - offset < seqLength) {\n\t\tthrow new Error('\"seq\" specified length of \"' + seqLength + '\", only \"' + (inputLength - offset) + '\" remaining');\n\t}\n\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\n\t\tthrow new Error('Could not find expected \"int\" for \"r\"');\n\t}\n\n\tvar rLength = signature[offset++];\n\n\tif (inputLength - offset - 2 < rLength) {\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", only \"' + (inputLength - offset - 2) + '\" available');\n\t}\n\n\tif (maxEncodedParamLength < rLength) {\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n\t}\n\n\tvar rOffset = offset;\n\toffset += rLength;\n\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\n\t\tthrow new Error('Could not find expected \"int\" for \"s\"');\n\t}\n\n\tvar sLength = signature[offset++];\n\n\tif (inputLength - offset !== sLength) {\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", expected \"' + (inputLength - offset) + '\"');\n\t}\n\n\tif (maxEncodedParamLength < sLength) {\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n\t}\n\n\tvar sOffset = offset;\n\toffset += sLength;\n\n\tif (offset !== inputLength) {\n\t\tthrow new Error('Expected to consume entire buffer, but \"' + (inputLength - offset) + '\" bytes remain');\n\t}\n\n\tvar rPadding = paramBytes - rLength,\n\t\tsPadding = paramBytes - sLength;\n\n\tvar dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);\n\n\tfor (offset = 0; offset < rPadding; ++offset) {\n\t\tdst[offset] = 0;\n\t}\n\tsignature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);\n\n\toffset = paramBytes;\n\n\tfor (var o = offset; offset < o + sPadding; ++offset) {\n\t\tdst[offset] = 0;\n\t}\n\tsignature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);\n\n\tdst = dst.toString('base64');\n\tdst = base64Url(dst);\n\n\treturn dst;\n}\n\nfunction countPadding(buf, start, stop) {\n\tvar padding = 0;\n\twhile (start + padding < stop && buf[start + padding] === 0) {\n\t\t++padding;\n\t}\n\n\tvar needsSign = buf[start + padding] >= MAX_OCTET;\n\tif (needsSign) {\n\t\t--padding;\n\t}\n\n\treturn padding;\n}\n\nfunction joseToDer(signature, alg) {\n\tsignature = signatureAsBuffer(signature);\n\tvar paramBytes = getParamBytesForAlg(alg);\n\n\tvar signatureBytes = signature.length;\n\tif (signatureBytes !== paramBytes * 2) {\n\t\tthrow new TypeError('\"' + alg + '\" signatures must be \"' + paramBytes * 2 + '\" bytes, saw \"' + signatureBytes + '\"');\n\t}\n\n\tvar rPadding = countPadding(signature, 0, paramBytes);\n\tvar sPadding = countPadding(signature, paramBytes, signature.length);\n\tvar rLength = paramBytes - rPadding;\n\tvar sLength = paramBytes - sPadding;\n\n\tvar rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\n\n\tvar shortLength = rsBytes < MAX_OCTET;\n\n\tvar dst = Buffer.allocUnsafe((shortLength ? 2 : 3) + rsBytes);\n\n\tvar offset = 0;\n\tdst[offset++] = ENCODED_TAG_SEQ;\n\tif (shortLength) {\n\t\t// Bit 8 has value \"0\"\n\t\t// bits 7-1 give the length.\n\t\tdst[offset++] = rsBytes;\n\t} else {\n\t\t// Bit 8 of first octet has value \"1\"\n\t\t// bits 7-1 give the number of additional length octets.\n\t\tdst[offset++] = MAX_OCTET\t| 1;\n\t\t// length, base 256\n\t\tdst[offset++] = rsBytes & 0xff;\n\t}\n\tdst[offset++] = ENCODED_TAG_INT;\n\tdst[offset++] = rLength;\n\tif (rPadding < 0) {\n\t\tdst[offset++] = 0;\n\t\toffset += signature.copy(dst, offset, 0, paramBytes);\n\t} else {\n\t\toffset += signature.copy(dst, offset, rPadding, paramBytes);\n\t}\n\tdst[offset++] = ENCODED_TAG_INT;\n\tdst[offset++] = sLength;\n\tif (sPadding < 0) {\n\t\tdst[offset++] = 0;\n\t\tsignature.copy(dst, offset, paramBytes);\n\t} else {\n\t\tsignature.copy(dst, offset, paramBytes + sPadding);\n\t}\n\n\treturn dst;\n}\n\nmodule.exports = {\n\tderToJose: derToJose,\n\tjoseToDer: joseToDer\n};\n",
    "'use strict';\n\nfunction getParamSize(keySize) {\n\tvar result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n\treturn result;\n}\n\nvar paramBytesForAlg = {\n\tES256: getParamSize(256),\n\tES384: getParamSize(384),\n\tES512: getParamSize(521)\n};\n\nfunction getParamBytesForAlg(alg) {\n\tvar paramBytes = paramBytesForAlg[alg];\n\tif (paramBytes) {\n\t\treturn paramBytes;\n\t}\n\n\tthrow new Error('Unknown algorithm \"' + alg + '\"');\n}\n\nmodule.exports = getParamBytesForAlg;\n",
    "var debug;\n\nmodule.exports = function () {\n  if (!debug) {\n    try {\n      /* eslint global-require: off */\n      debug = require(\"debug\")(\"follow-redirects\");\n    }\n    catch (error) { /* */ }\n    if (typeof debug !== \"function\") {\n      debug = function () { /* */ };\n    }\n  }\n  debug.apply(null, arguments);\n};\n",
    "var url = require(\"url\");\nvar URL = url.URL;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar Writable = require(\"stream\").Writable;\nvar assert = require(\"assert\");\nvar debug = require(\"./debug\");\n\n// Create handlers that pass events from native requests\nvar events = [\"abort\", \"aborted\", \"connect\", \"error\", \"socket\", \"timeout\"];\nvar eventHandlers = Object.create(null);\nevents.forEach(function (event) {\n  eventHandlers[event] = function (arg1, arg2, arg3) {\n    this._redirectable.emit(event, arg1, arg2, arg3);\n  };\n});\n\n// Error types with codes\nvar RedirectionError = createErrorType(\n  \"ERR_FR_REDIRECTION_FAILURE\",\n  \"\"\n);\nvar TooManyRedirectsError = createErrorType(\n  \"ERR_FR_TOO_MANY_REDIRECTS\",\n  \"Maximum number of redirects exceeded\"\n);\nvar MaxBodyLengthExceededError = createErrorType(\n  \"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\",\n  \"Request body larger than maxBodyLength limit\"\n);\nvar WriteAfterEndError = createErrorType(\n  \"ERR_STREAM_WRITE_AFTER_END\",\n  \"write after end\"\n);\n\n// An HTTP(S) request that can be redirected\nfunction RedirectableRequest(options, responseCallback) {\n  // Initialize the request\n  Writable.call(this);\n  this._sanitizeOptions(options);\n  this._options = options;\n  this._ended = false;\n  this._ending = false;\n  this._redirectCount = 0;\n  this._redirects = [];\n  this._requestBodyLength = 0;\n  this._requestBodyBuffers = [];\n\n  // Attach a callback if passed\n  if (responseCallback) {\n    this.on(\"response\", responseCallback);\n  }\n\n  // React to responses of native requests\n  var self = this;\n  this._onNativeResponse = function (response) {\n    self._processResponse(response);\n  };\n\n  // Perform the first request\n  this._performRequest();\n}\nRedirectableRequest.prototype = Object.create(Writable.prototype);\n\nRedirectableRequest.prototype.abort = function () {\n  abortRequest(this._currentRequest);\n  this.emit(\"abort\");\n};\n\n// Writes buffered data to the current native request\nRedirectableRequest.prototype.write = function (data, encoding, callback) {\n  // Writing is not allowed if end has been called\n  if (this._ending) {\n    throw new WriteAfterEndError();\n  }\n\n  // Validate input and shift parameters if necessary\n  if (!(typeof data === \"string\" || typeof data === \"object\" && (\"length\" in data))) {\n    throw new TypeError(\"data should be a string, Buffer or Uint8Array\");\n  }\n  if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Ignore empty buffers, since writing them doesn't invoke the callback\n  // https://github.com/nodejs/node/issues/22066\n  if (data.length === 0) {\n    if (callback) {\n      callback();\n    }\n    return;\n  }\n  // Only write when we don't exceed the maximum body length\n  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {\n    this._requestBodyLength += data.length;\n    this._requestBodyBuffers.push({ data: data, encoding: encoding });\n    this._currentRequest.write(data, encoding, callback);\n  }\n  // Error when we exceed the maximum body length\n  else {\n    this.emit(\"error\", new MaxBodyLengthExceededError());\n    this.abort();\n  }\n};\n\n// Ends the current native request\nRedirectableRequest.prototype.end = function (data, encoding, callback) {\n  // Shift parameters if necessary\n  if (typeof data === \"function\") {\n    callback = data;\n    data = encoding = null;\n  }\n  else if (typeof encoding === \"function\") {\n    callback = encoding;\n    encoding = null;\n  }\n\n  // Write data if needed and end\n  if (!data) {\n    this._ended = this._ending = true;\n    this._currentRequest.end(null, null, callback);\n  }\n  else {\n    var self = this;\n    var currentRequest = this._currentRequest;\n    this.write(data, encoding, function () {\n      self._ended = true;\n      currentRequest.end(null, null, callback);\n    });\n    this._ending = true;\n  }\n};\n\n// Sets a header value on the current native request\nRedirectableRequest.prototype.setHeader = function (name, value) {\n  this._options.headers[name] = value;\n  this._currentRequest.setHeader(name, value);\n};\n\n// Clears a header value on the current native request\nRedirectableRequest.prototype.removeHeader = function (name) {\n  delete this._options.headers[name];\n  this._currentRequest.removeHeader(name);\n};\n\n// Global timeout for all underlying requests\nRedirectableRequest.prototype.setTimeout = function (msecs, callback) {\n  var self = this;\n\n  // Destroys the socket on timeout\n  function destroyOnTimeout(socket) {\n    socket.setTimeout(msecs);\n    socket.removeListener(\"timeout\", socket.destroy);\n    socket.addListener(\"timeout\", socket.destroy);\n  }\n\n  // Sets up a timer to trigger a timeout event\n  function startTimer(socket) {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n    }\n    self._timeout = setTimeout(function () {\n      self.emit(\"timeout\");\n      clearTimer();\n    }, msecs);\n    destroyOnTimeout(socket);\n  }\n\n  // Stops a timeout from triggering\n  function clearTimer() {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      self._timeout = null;\n    }\n    if (callback) {\n      self.removeListener(\"timeout\", callback);\n    }\n    if (!self.socket) {\n      self._currentRequest.removeListener(\"socket\", startTimer);\n    }\n  }\n\n  // Attach callback if passed\n  if (callback) {\n    this.on(\"timeout\", callback);\n  }\n\n  // Start the timer if or when the socket is opened\n  if (this.socket) {\n    startTimer(this.socket);\n  }\n  else {\n    this._currentRequest.once(\"socket\", startTimer);\n  }\n\n  // Clean up on events\n  this.on(\"socket\", destroyOnTimeout);\n  this.once(\"response\", clearTimer);\n  this.once(\"error\", clearTimer);\n\n  return this;\n};\n\n// Proxy all other public ClientRequest methods\n[\n  \"flushHeaders\", \"getHeader\",\n  \"setNoDelay\", \"setSocketKeepAlive\",\n].forEach(function (method) {\n  RedirectableRequest.prototype[method] = function (a, b) {\n    return this._currentRequest[method](a, b);\n  };\n});\n\n// Proxy all public ClientRequest properties\n[\"aborted\", \"connection\", \"socket\"].forEach(function (property) {\n  Object.defineProperty(RedirectableRequest.prototype, property, {\n    get: function () { return this._currentRequest[property]; },\n  });\n});\n\nRedirectableRequest.prototype._sanitizeOptions = function (options) {\n  // Ensure headers are always present\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // Since http.request treats host as an alias of hostname,\n  // but the url module interprets host as hostname plus port,\n  // eliminate the host property to avoid confusion.\n  if (options.host) {\n    // Use hostname if set, because it has precedence\n    if (!options.hostname) {\n      options.hostname = options.host;\n    }\n    delete options.host;\n  }\n\n  // Complete the URL object when necessary\n  if (!options.pathname && options.path) {\n    var searchPos = options.path.indexOf(\"?\");\n    if (searchPos < 0) {\n      options.pathname = options.path;\n    }\n    else {\n      options.pathname = options.path.substring(0, searchPos);\n      options.search = options.path.substring(searchPos);\n    }\n  }\n};\n\n\n// Executes the next native request (initial or redirect)\nRedirectableRequest.prototype._performRequest = function () {\n  // Load the native protocol\n  var protocol = this._options.protocol;\n  var nativeProtocol = this._options.nativeProtocols[protocol];\n  if (!nativeProtocol) {\n    this.emit(\"error\", new TypeError(\"Unsupported protocol \" + protocol));\n    return;\n  }\n\n  // If specified, use the agent corresponding to the protocol\n  // (HTTP and HTTPS use different types of agents)\n  if (this._options.agents) {\n    var scheme = protocol.substr(0, protocol.length - 1);\n    this._options.agent = this._options.agents[scheme];\n  }\n\n  // Create the native request\n  var request = this._currentRequest =\n        nativeProtocol.request(this._options, this._onNativeResponse);\n  this._currentUrl = url.format(this._options);\n\n  // Set up event handlers\n  request._redirectable = this;\n  for (var e = 0; e < events.length; e++) {\n    request.on(events[e], eventHandlers[events[e]]);\n  }\n\n  // End a redirected request\n  // (The first request must be ended explicitly with RedirectableRequest#end)\n  if (this._isRedirect) {\n    // Write the request entity and end.\n    var i = 0;\n    var self = this;\n    var buffers = this._requestBodyBuffers;\n    (function writeNext(error) {\n      // Only write if this request has not been redirected yet\n      /* istanbul ignore else */\n      if (request === self._currentRequest) {\n        // Report any write errors\n        /* istanbul ignore if */\n        if (error) {\n          self.emit(\"error\", error);\n        }\n        // Write the next buffer if there are still left\n        else if (i < buffers.length) {\n          var buffer = buffers[i++];\n          /* istanbul ignore else */\n          if (!request.finished) {\n            request.write(buffer.data, buffer.encoding, writeNext);\n          }\n        }\n        // End the request if `end` has been called on us\n        else if (self._ended) {\n          request.end();\n        }\n      }\n    }());\n  }\n};\n\n// Processes a response from the current native request\nRedirectableRequest.prototype._processResponse = function (response) {\n  // Store the redirected response\n  var statusCode = response.statusCode;\n  if (this._options.trackRedirects) {\n    this._redirects.push({\n      url: this._currentUrl,\n      headers: response.headers,\n      statusCode: statusCode,\n    });\n  }\n\n  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates\n  // that further action needs to be taken by the user agent in order to\n  // fulfill the request. If a Location header field is provided,\n  // the user agent MAY automatically redirect its request to the URI\n  // referenced by the Location field value,\n  // even if the specific status code is not understood.\n  var location = response.headers.location;\n  if (location && this._options.followRedirects !== false &&\n      statusCode >= 300 && statusCode < 400) {\n    // Abort the current request\n    abortRequest(this._currentRequest);\n    // Discard the remainder of the response to avoid waiting for data\n    response.destroy();\n\n    // RFC7231§6.4: A client SHOULD detect and intervene\n    // in cyclical redirections (i.e., \"infinite\" redirection loops).\n    if (++this._redirectCount > this._options.maxRedirects) {\n      this.emit(\"error\", new TooManyRedirectsError());\n      return;\n    }\n\n    // RFC7231§6.4: Automatic redirection needs to done with\n    // care for methods not known to be safe, […]\n    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change\n    // the request method from POST to GET for the subsequent request.\n    if ((statusCode === 301 || statusCode === 302) && this._options.method === \"POST\" ||\n        // RFC7231§6.4.4: The 303 (See Other) status code indicates that\n        // the server is redirecting the user agent to a different resource […]\n        // A user agent can perform a retrieval request targeting that URI\n        // (a GET or HEAD request if using HTTP) […]\n        (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {\n      this._options.method = \"GET\";\n      // Drop a possible entity and headers related to it\n      this._requestBodyBuffers = [];\n      removeMatchingHeaders(/^content-/i, this._options.headers);\n    }\n\n    // Drop the Host header, as the redirect might lead to a different host\n    var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) ||\n      url.parse(this._currentUrl).hostname;\n\n    // Create the redirected request\n    var redirectUrl = url.resolve(this._currentUrl, location);\n    debug(\"redirecting to\", redirectUrl);\n    this._isRedirect = true;\n    var redirectUrlParts = url.parse(redirectUrl);\n    Object.assign(this._options, redirectUrlParts);\n\n    // Drop the Authorization header if redirecting to another host\n    if (redirectUrlParts.hostname !== previousHostName) {\n      removeMatchingHeaders(/^authorization$/i, this._options.headers);\n    }\n\n    // Evaluate the beforeRedirect callback\n    if (typeof this._options.beforeRedirect === \"function\") {\n      var responseDetails = { headers: response.headers };\n      try {\n        this._options.beforeRedirect.call(null, this._options, responseDetails);\n      }\n      catch (err) {\n        this.emit(\"error\", err);\n        return;\n      }\n      this._sanitizeOptions(this._options);\n    }\n\n    // Perform the redirected request\n    try {\n      this._performRequest();\n    }\n    catch (cause) {\n      var error = new RedirectionError(\"Redirected request failed: \" + cause.message);\n      error.cause = cause;\n      this.emit(\"error\", error);\n    }\n  }\n  else {\n    // The response is not a redirect; return it as-is\n    response.responseUrl = this._currentUrl;\n    response.redirects = this._redirects;\n    this.emit(\"response\", response);\n\n    // Clean up\n    this._requestBodyBuffers = [];\n  }\n};\n\n// Wraps the key/value object of protocols with redirect functionality\nfunction wrap(protocols) {\n  // Default settings\n  var exports = {\n    maxRedirects: 21,\n    maxBodyLength: 10 * 1024 * 1024,\n  };\n\n  // Wrap each protocol\n  var nativeProtocols = {};\n  Object.keys(protocols).forEach(function (scheme) {\n    var protocol = scheme + \":\";\n    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];\n    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);\n\n    // Executes a request, following redirects\n    function request(input, options, callback) {\n      // Parse parameters\n      if (typeof input === \"string\") {\n        var urlStr = input;\n        try {\n          input = urlToOptions(new URL(urlStr));\n        }\n        catch (err) {\n          /* istanbul ignore next */\n          input = url.parse(urlStr);\n        }\n      }\n      else if (URL && (input instanceof URL)) {\n        input = urlToOptions(input);\n      }\n      else {\n        callback = options;\n        options = input;\n        input = { protocol: protocol };\n      }\n      if (typeof options === \"function\") {\n        callback = options;\n        options = null;\n      }\n\n      // Set defaults\n      options = Object.assign({\n        maxRedirects: exports.maxRedirects,\n        maxBodyLength: exports.maxBodyLength,\n      }, input, options);\n      options.nativeProtocols = nativeProtocols;\n\n      assert.equal(options.protocol, protocol, \"protocol mismatch\");\n      debug(\"options\", options);\n      return new RedirectableRequest(options, callback);\n    }\n\n    // Executes a GET request, following redirects\n    function get(input, options, callback) {\n      var wrappedRequest = wrappedProtocol.request(input, options, callback);\n      wrappedRequest.end();\n      return wrappedRequest;\n    }\n\n    // Expose the properties on the wrapped protocol\n    Object.defineProperties(wrappedProtocol, {\n      request: { value: request, configurable: true, enumerable: true, writable: true },\n      get: { value: get, configurable: true, enumerable: true, writable: true },\n    });\n  });\n  return exports;\n}\n\n/* istanbul ignore next */\nfunction noop() { /* empty */ }\n\n// from https://github.com/nodejs/node/blob/master/lib/internal/url.js\nfunction urlToOptions(urlObject) {\n  var options = {\n    protocol: urlObject.protocol,\n    hostname: urlObject.hostname.startsWith(\"[\") ?\n      /* istanbul ignore next */\n      urlObject.hostname.slice(1, -1) :\n      urlObject.hostname,\n    hash: urlObject.hash,\n    search: urlObject.search,\n    pathname: urlObject.pathname,\n    path: urlObject.pathname + urlObject.search,\n    href: urlObject.href,\n  };\n  if (urlObject.port !== \"\") {\n    options.port = Number(urlObject.port);\n  }\n  return options;\n}\n\nfunction removeMatchingHeaders(regex, headers) {\n  var lastValue;\n  for (var header in headers) {\n    if (regex.test(header)) {\n      lastValue = headers[header];\n      delete headers[header];\n    }\n  }\n  return lastValue;\n}\n\nfunction createErrorType(code, defaultMessage) {\n  function CustomError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.message = message || defaultMessage;\n  }\n  CustomError.prototype = new Error();\n  CustomError.prototype.constructor = CustomError;\n  CustomError.prototype.name = \"Error [\" + code + \"]\";\n  CustomError.prototype.code = code;\n  return CustomError;\n}\n\nfunction abortRequest(request) {\n  for (var e = 0; e < events.length; e++) {\n    request.removeListener(events[e], eventHandlers[events[e]]);\n  }\n  request.on(\"error\", noop);\n  request.abort();\n}\n\n// Exports\nmodule.exports = wrap({ http: http, https: https });\nmodule.exports.wrap = wrap;\n",
    "var CombinedStream = require('combined-stream');\nvar util = require('util');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar parseUrl = require('url').parse;\nvar fs = require('fs');\nvar mime = require('mime-types');\nvar asynckit = require('asynckit');\nvar populate = require('./populate.js');\n\n// Public API\nmodule.exports = FormData;\n\n// make it a Stream\nutil.inherits(FormData, CombinedStream);\n\n/**\n * Create readable \"multipart/form-data\" streams.\n * Can be used to submit forms\n * and file uploads to other web applications.\n *\n * @constructor\n * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream\n */\nfunction FormData(options) {\n  if (!(this instanceof FormData)) {\n    return new FormData(options);\n  }\n\n  this._overheadLength = 0;\n  this._valueLength = 0;\n  this._valuesToMeasure = [];\n\n  CombinedStream.call(this);\n\n  options = options || {};\n  for (var option in options) {\n    this[option] = options[option];\n  }\n}\n\nFormData.LINE_BREAK = '\\r\\n';\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\n\nFormData.prototype.append = function(field, value, options) {\n\n  options = options || {};\n\n  // allow filename as single option\n  if (typeof options == 'string') {\n    options = {filename: options};\n  }\n\n  var append = CombinedStream.prototype.append.bind(this);\n\n  // all that streamy business can't handle numbers\n  if (typeof value == 'number') {\n    value = '' + value;\n  }\n\n  // https://github.com/felixge/node-form-data/issues/38\n  if (util.isArray(value)) {\n    // Please convert your array into string\n    // the way web server expects it\n    this._error(new Error('Arrays are not supported.'));\n    return;\n  }\n\n  var header = this._multiPartHeader(field, value, options);\n  var footer = this._multiPartFooter();\n\n  append(header);\n  append(value);\n  append(footer);\n\n  // pass along options.knownLength\n  this._trackLength(header, value, options);\n};\n\nFormData.prototype._trackLength = function(header, value, options) {\n  var valueLength = 0;\n\n  // used w/ getLengthSync(), when length is known.\n  // e.g. for streaming directly from a remote server,\n  // w/ a known file a size, and not wanting to wait for\n  // incoming file to finish to get its size.\n  if (options.knownLength != null) {\n    valueLength += +options.knownLength;\n  } else if (Buffer.isBuffer(value)) {\n    valueLength = value.length;\n  } else if (typeof value === 'string') {\n    valueLength = Buffer.byteLength(value);\n  }\n\n  this._valueLength += valueLength;\n\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\n  this._overheadLength +=\n    Buffer.byteLength(header) +\n    FormData.LINE_BREAK.length;\n\n  // empty or either doesn't have path or not an http response\n  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) )) {\n    return;\n  }\n\n  // no need to bother with the length\n  if (!options.knownLength) {\n    this._valuesToMeasure.push(value);\n  }\n};\n\nFormData.prototype._lengthRetriever = function(value, callback) {\n\n  if (value.hasOwnProperty('fd')) {\n\n    // take read range into a account\n    // `end` = Infinity –> read file till the end\n    //\n    // TODO: Looks like there is bug in Node fs.createReadStream\n    // it doesn't respect `end` options without `start` options\n    // Fix it when node fixes it.\n    // https://github.com/joyent/node/issues/7819\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\n\n      // when end specified\n      // no need to calculate range\n      // inclusive, starts with 0\n      callback(null, value.end + 1 - (value.start ? value.start : 0));\n\n    // not that fast snoopy\n    } else {\n      // still need to fetch file size from fs\n      fs.stat(value.path, function(err, stat) {\n\n        var fileSize;\n\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        // update final size based on the range options\n        fileSize = stat.size - (value.start ? value.start : 0);\n        callback(null, fileSize);\n      });\n    }\n\n  // or http response\n  } else if (value.hasOwnProperty('httpVersion')) {\n    callback(null, +value.headers['content-length']);\n\n  // or request stream http://github.com/mikeal/request\n  } else if (value.hasOwnProperty('httpModule')) {\n    // wait till response come back\n    value.on('response', function(response) {\n      value.pause();\n      callback(null, +response.headers['content-length']);\n    });\n    value.resume();\n\n  // something else\n  } else {\n    callback('Unknown stream');\n  }\n};\n\nFormData.prototype._multiPartHeader = function(field, value, options) {\n  // custom header specified (as string)?\n  // it becomes responsible for boundary\n  // (e.g. to handle extra CRLFs on .NET servers)\n  if (typeof options.header == 'string') {\n    return options.header;\n  }\n\n  var contentDisposition = this._getContentDisposition(value, options);\n  var contentType = this._getContentType(value, options);\n\n  var contents = '';\n  var headers  = {\n    // add custom disposition as third element or keep it two elements if not\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\n    // if no content type. allow it to be empty array\n    'Content-Type': [].concat(contentType || [])\n  };\n\n  // allow custom headers.\n  if (typeof options.header == 'object') {\n    populate(headers, options.header);\n  }\n\n  var header;\n  for (var prop in headers) {\n    if (!headers.hasOwnProperty(prop)) continue;\n    header = headers[prop];\n\n    // skip nullish headers.\n    if (header == null) {\n      continue;\n    }\n\n    // convert all headers to arrays.\n    if (!Array.isArray(header)) {\n      header = [header];\n    }\n\n    // add non-empty headers.\n    if (header.length) {\n      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\n    }\n  }\n\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\n};\n\nFormData.prototype._getContentDisposition = function(value, options) {\n\n  var filename\n    , contentDisposition\n    ;\n\n  if (typeof options.filepath === 'string') {\n    // custom filepath for relative paths\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\n  } else if (options.filename || value.name || value.path) {\n    // custom filename take precedence\n    // formidable and the browser add a name property\n    // fs- and request- streams have path property\n    filename = path.basename(options.filename || value.name || value.path);\n  } else if (value.readable && value.hasOwnProperty('httpVersion')) {\n    // or try http response\n    filename = path.basename(value.client._httpMessage.path || '');\n  }\n\n  if (filename) {\n    contentDisposition = 'filename=\"' + filename + '\"';\n  }\n\n  return contentDisposition;\n};\n\nFormData.prototype._getContentType = function(value, options) {\n\n  // use custom content-type above all\n  var contentType = options.contentType;\n\n  // or try `name` from formidable, browser\n  if (!contentType && value.name) {\n    contentType = mime.lookup(value.name);\n  }\n\n  // or try `path` from fs-, request- streams\n  if (!contentType && value.path) {\n    contentType = mime.lookup(value.path);\n  }\n\n  // or if it's http-reponse\n  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {\n    contentType = value.headers['content-type'];\n  }\n\n  // or guess it from the filepath or filename\n  if (!contentType && (options.filepath || options.filename)) {\n    contentType = mime.lookup(options.filepath || options.filename);\n  }\n\n  // fallback to the default content type if `value` is not simple value\n  if (!contentType && typeof value == 'object') {\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\n  }\n\n  return contentType;\n};\n\nFormData.prototype._multiPartFooter = function() {\n  return function(next) {\n    var footer = FormData.LINE_BREAK;\n\n    var lastPart = (this._streams.length === 0);\n    if (lastPart) {\n      footer += this._lastBoundary();\n    }\n\n    next(footer);\n  }.bind(this);\n};\n\nFormData.prototype._lastBoundary = function() {\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\n};\n\nFormData.prototype.getHeaders = function(userHeaders) {\n  var header;\n  var formHeaders = {\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\n  };\n\n  for (header in userHeaders) {\n    if (userHeaders.hasOwnProperty(header)) {\n      formHeaders[header.toLowerCase()] = userHeaders[header];\n    }\n  }\n\n  return formHeaders;\n};\n\nFormData.prototype.setBoundary = function(boundary) {\n  this._boundary = boundary;\n};\n\nFormData.prototype.getBoundary = function() {\n  if (!this._boundary) {\n    this._generateBoundary();\n  }\n\n  return this._boundary;\n};\n\nFormData.prototype.getBuffer = function() {\n  var dataBuffer = new Buffer.alloc( 0 );\n  var boundary = this.getBoundary();\n\n  // Create the form content. Add Line breaks to the end of data.\n  for (var i = 0, len = this._streams.length; i < len; i++) {\n    if (typeof this._streams[i] !== 'function') {\n\n      // Add content to the buffer.\n      if(Buffer.isBuffer(this._streams[i])) {\n        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);\n      }else {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);\n      }\n\n      // Add break after content.\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {\n        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData.LINE_BREAK)] );\n      }\n    }\n  }\n\n  // Add the footer and return the Buffer object.\n  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );\n};\n\nFormData.prototype._generateBoundary = function() {\n  // This generates a 50 character boundary similar to those used by Firefox.\n  // They are optimized for boyer-moore parsing.\n  var boundary = '--------------------------';\n  for (var i = 0; i < 24; i++) {\n    boundary += Math.floor(Math.random() * 10).toString(16);\n  }\n\n  this._boundary = boundary;\n};\n\n// Note: getLengthSync DOESN'T calculate streams length\n// As workaround one can calculate file size manually\n// and add it as knownLength option\nFormData.prototype.getLengthSync = function() {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair\n  // so it basically checks if there is any value added to the form\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  // https://github.com/form-data/form-data/issues/40\n  if (!this.hasKnownLength()) {\n    // Some async length retrievers are present\n    // therefore synchronous length calculation is false.\n    // Please use getLength(callback) to get proper length\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\n  }\n\n  return knownLength;\n};\n\n// Public API to check if length of added values is known\n// https://github.com/form-data/form-data/issues/196\n// https://github.com/form-data/form-data/issues/262\nFormData.prototype.hasKnownLength = function() {\n  var hasKnownLength = true;\n\n  if (this._valuesToMeasure.length) {\n    hasKnownLength = false;\n  }\n\n  return hasKnownLength;\n};\n\nFormData.prototype.getLength = function(cb) {\n  var knownLength = this._overheadLength + this._valueLength;\n\n  if (this._streams.length) {\n    knownLength += this._lastBoundary().length;\n  }\n\n  if (!this._valuesToMeasure.length) {\n    process.nextTick(cb.bind(this, null, knownLength));\n    return;\n  }\n\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    values.forEach(function(length) {\n      knownLength += length;\n    });\n\n    cb(null, knownLength);\n  });\n};\n\nFormData.prototype.submit = function(params, cb) {\n  var request\n    , options\n    , defaults = {method: 'post'}\n    ;\n\n  // parse provided url if it's string\n  // or treat it as options object\n  if (typeof params == 'string') {\n\n    params = parseUrl(params);\n    options = populate({\n      port: params.port,\n      path: params.pathname,\n      host: params.hostname,\n      protocol: params.protocol\n    }, defaults);\n\n  // use custom params\n  } else {\n\n    options = populate(params, defaults);\n    // if no port provided use default one\n    if (!options.port) {\n      options.port = options.protocol == 'https:' ? 443 : 80;\n    }\n  }\n\n  // put that good code in getHeaders to some use\n  options.headers = this.getHeaders(params.headers);\n\n  // https if specified, fallback to http in any other case\n  if (options.protocol == 'https:') {\n    request = https.request(options);\n  } else {\n    request = http.request(options);\n  }\n\n  // get content length and fire away\n  this.getLength(function(err, length) {\n    if (err) {\n      this._error(err);\n      return;\n    }\n\n    // add content length\n    request.setHeader('Content-Length', length);\n\n    this.pipe(request);\n    if (cb) {\n      var onResponse;\n\n      var callback = function (error, responce) {\n        request.removeListener('error', callback);\n        request.removeListener('response', onResponse);\n\n        return cb.call(this, error, responce);\n      };\n\n      onResponse = callback.bind(this, null);\n\n      request.on('error', callback);\n      request.on('response', onResponse);\n    }\n  }.bind(this));\n\n  return request;\n};\n\nFormData.prototype._error = function(err) {\n  if (!this.error) {\n    this.error = err;\n    this.pause();\n    this.emit('error', err);\n  }\n};\n\nFormData.prototype.toString = function () {\n  return '[object FormData]';\n};\n",
    "// populates missing values\nmodule.exports = function(dst, src) {\n\n  Object.keys(src).forEach(function(prop)\n  {\n    dst[prop] = dst[prop] || src[prop];\n  });\n\n  return dst;\n};\n",
    "'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n",
    "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\nconst agent_base_1 = require(\"agent-base\");\nconst debug = debug_1.default('http-proxy-agent');\nfunction isHTTPS(protocol) {\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\nclass HttpProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n        }\n        debug('Creating new HttpProxyAgent instance: %o', opts);\n        super(opts);\n        const proxy = Object.assign({}, opts);\n        // If `true`, then connect to the proxy server over TLS.\n        // Defaults to `false`.\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n        // Prefer `hostname` over `host`, and set the `port` if needed.\n        proxy.host = proxy.hostname || proxy.host;\n        if (typeof proxy.port === 'string') {\n            proxy.port = parseInt(proxy.port, 10);\n        }\n        if (!proxy.port && proxy.host) {\n            proxy.port = this.secureProxy ? 443 : 80;\n        }\n        if (proxy.host && proxy.path) {\n            // If both a `host` and `path` are specified then it's most likely\n            // the result of a `url.parse()` call... we need to remove the\n            // `path` portion so that `net.connect()` doesn't attempt to open\n            // that as a Unix socket file.\n            delete proxy.path;\n            delete proxy.pathname;\n        }\n        this.proxy = proxy;\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { proxy, secureProxy } = this;\n            const parsed = url_1.default.parse(req.path);\n            if (!parsed.protocol) {\n                parsed.protocol = 'http:';\n            }\n            if (!parsed.hostname) {\n                parsed.hostname = opts.hostname || opts.host || null;\n            }\n            if (parsed.port == null && typeof opts.port) {\n                parsed.port = String(opts.port);\n            }\n            if (parsed.port === '80') {\n                // if port is 80, then we can remove the port so that the\n                // \":80\" portion is not on the produced URL\n                delete parsed.port;\n            }\n            // Change the `http.ClientRequest` instance's \"path\" field\n            // to the absolute path of the URL that will be requested.\n            req.path = url_1.default.format(parsed);\n            // Inject the `Proxy-Authorization` header if necessary.\n            if (proxy.auth) {\n                req.setHeader('Proxy-Authorization', `Basic ${Buffer.from(proxy.auth).toString('base64')}`);\n            }\n            // Create a socket connection to the proxy server.\n            let socket;\n            if (secureProxy) {\n                debug('Creating `tls.Socket`: %o', proxy);\n                socket = tls_1.default.connect(proxy);\n            }\n            else {\n                debug('Creating `net.Socket`: %o', proxy);\n                socket = net_1.default.connect(proxy);\n            }\n            // At this point, the http ClientRequest's internal `_header` field\n            // might have already been set. If this is the case then we'll need\n            // to re-generate the string since we just changed the `req.path`.\n            if (req._header) {\n                let first;\n                let endOfHeaders;\n                debug('Regenerating stored HTTP header string for request');\n                req._header = null;\n                req._implicitHeader();\n                if (req.output && req.output.length > 0) {\n                    // Node < 12\n                    debug('Patching connection write() output buffer with updated header');\n                    first = req.output[0];\n                    endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n                    req.output[0] = req._header + first.substring(endOfHeaders);\n                    debug('Output buffer: %o', req.output);\n                }\n                else if (req.outputData && req.outputData.length > 0) {\n                    // Node >= 12\n                    debug('Patching connection write() output buffer with updated header');\n                    first = req.outputData[0].data;\n                    endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n                    req.outputData[0].data =\n                        req._header + first.substring(endOfHeaders);\n                    debug('Output buffer: %o', req.outputData[0].data);\n                }\n            }\n            // Wait for the socket's `connect` event, so that this `callback()`\n            // function throws instead of the `http` request machinery. This is\n            // important for i.e. `PacProxyAgent` which determines a failed proxy\n            // connection via the `callback()` function throwing.\n            yield once_1.default(socket, 'connect');\n            return socket;\n        });\n    }\n}\nexports.default = HttpProxyAgent;\n//# sourceMappingURL=agent.js.map",
    "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst agent_1 = __importDefault(require(\"./agent\"));\nfunction createHttpProxyAgent(opts) {\n    return new agent_1.default(opts);\n}\n(function (createHttpProxyAgent) {\n    createHttpProxyAgent.HttpProxyAgent = agent_1.default;\n    createHttpProxyAgent.prototype = agent_1.default.prototype;\n})(createHttpProxyAgent || (createHttpProxyAgent = {}));\nmodule.exports = createHttpProxyAgent;\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst assert_1 = __importDefault(require(\"assert\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst agent_base_1 = require(\"agent-base\");\nconst parse_proxy_response_1 = __importDefault(require(\"./parse-proxy-response\"));\nconst debug = debug_1.default('https-proxy-agent:agent');\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n *\n * @api public\n */\nclass HttpsProxyAgent extends agent_base_1.Agent {\n    constructor(_opts) {\n        let opts;\n        if (typeof _opts === 'string') {\n            opts = url_1.default.parse(_opts);\n        }\n        else {\n            opts = _opts;\n        }\n        if (!opts) {\n            throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n        }\n        debug('creating new HttpsProxyAgent instance: %o', opts);\n        super(opts);\n        const proxy = Object.assign({}, opts);\n        // If `true`, then connect to the proxy server over TLS.\n        // Defaults to `false`.\n        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n        // Prefer `hostname` over `host`, and set the `port` if needed.\n        proxy.host = proxy.hostname || proxy.host;\n        if (typeof proxy.port === 'string') {\n            proxy.port = parseInt(proxy.port, 10);\n        }\n        if (!proxy.port && proxy.host) {\n            proxy.port = this.secureProxy ? 443 : 80;\n        }\n        // ALPN is supported by Node.js >= v5.\n        // attempt to negotiate http/1.1 for proxy servers that support http/2\n        if (this.secureProxy && !('ALPNProtocols' in proxy)) {\n            proxy.ALPNProtocols = ['http 1.1'];\n        }\n        if (proxy.host && proxy.path) {\n            // If both a `host` and `path` are specified then it's most likely\n            // the result of a `url.parse()` call... we need to remove the\n            // `path` portion so that `net.connect()` doesn't attempt to open\n            // that as a Unix socket file.\n            delete proxy.path;\n            delete proxy.pathname;\n        }\n        this.proxy = proxy;\n    }\n    /**\n     * Called when the node-core HTTP client library is creating a\n     * new HTTP request.\n     *\n     * @api protected\n     */\n    callback(req, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { proxy, secureProxy } = this;\n            // Create a socket connection to the proxy server.\n            let socket;\n            if (secureProxy) {\n                debug('Creating `tls.Socket`: %o', proxy);\n                socket = tls_1.default.connect(proxy);\n            }\n            else {\n                debug('Creating `net.Socket`: %o', proxy);\n                socket = net_1.default.connect(proxy);\n            }\n            const headers = Object.assign({}, proxy.headers);\n            const hostname = `${opts.host}:${opts.port}`;\n            let payload = `CONNECT ${hostname} HTTP/1.1\\r\\n`;\n            // Inject the `Proxy-Authorization` header if necessary.\n            if (proxy.auth) {\n                headers['Proxy-Authorization'] = `Basic ${Buffer.from(proxy.auth).toString('base64')}`;\n            }\n            // The `Host` header should only include the port\n            // number when it is not the default port.\n            let { host, port, secureEndpoint } = opts;\n            if (!isDefaultPort(port, secureEndpoint)) {\n                host += `:${port}`;\n            }\n            headers.Host = host;\n            headers.Connection = 'close';\n            for (const name of Object.keys(headers)) {\n                payload += `${name}: ${headers[name]}\\r\\n`;\n            }\n            const proxyResponsePromise = parse_proxy_response_1.default(socket);\n            socket.write(`${payload}\\r\\n`);\n            const { statusCode, buffered } = yield proxyResponsePromise;\n            if (statusCode === 200) {\n                req.once('socket', resume);\n                if (opts.secureEndpoint) {\n                    const servername = opts.servername || opts.host;\n                    if (!servername) {\n                        throw new Error('Could not determine \"servername\"');\n                    }\n                    // The proxy is connecting to a TLS server, so upgrade\n                    // this socket connection to a TLS connection.\n                    debug('Upgrading socket connection to TLS');\n                    return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), { socket,\n                        servername }));\n                }\n                return socket;\n            }\n            // Some other status code that's not 200... need to re-play the HTTP\n            // header \"data\" events onto the socket once the HTTP machinery is\n            // attached so that the node core `http` can parse and handle the\n            // error status code.\n            // Close the original socket, and a new \"fake\" socket is returned\n            // instead, so that the proxy doesn't get the HTTP request\n            // written to it (which may contain `Authorization` headers or other\n            // sensitive data).\n            //\n            // See: https://hackerone.com/reports/541502\n            socket.destroy();\n            const fakeSocket = new net_1.default.Socket();\n            fakeSocket.readable = true;\n            // Need to wait for the \"socket\" event to re-play the \"data\" events.\n            req.once('socket', (s) => {\n                debug('replaying proxy buffer for failed request');\n                assert_1.default(s.listenerCount('data') > 0);\n                // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n                // this point the HTTP module machinery has been hooked up for\n                // the user.\n                s.push(buffered);\n                s.push(null);\n            });\n            return fakeSocket;\n        });\n    }\n}\nexports.default = HttpsProxyAgent;\nfunction resume(socket) {\n    socket.resume();\n}\nfunction isDefaultPort(port, secure) {\n    return Boolean((!secure && port === 80) || (secure && port === 443));\n}\nfunction isHTTPS(protocol) {\n    return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for (key in obj) {\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n//# sourceMappingURL=agent.js.map",
    "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst agent_1 = __importDefault(require(\"./agent\"));\nfunction createHttpsProxyAgent(opts) {\n    return new agent_1.default(opts);\n}\n(function (createHttpsProxyAgent) {\n    createHttpsProxyAgent.HttpsProxyAgent = agent_1.default;\n    createHttpsProxyAgent.prototype = agent_1.default.prototype;\n})(createHttpsProxyAgent || (createHttpsProxyAgent = {}));\nmodule.exports = createHttpsProxyAgent;\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = __importDefault(require(\"debug\"));\nconst debug = debug_1.default('https-proxy-agent:parse-proxy-response');\nfunction parseProxyResponse(socket) {\n    return new Promise((resolve, reject) => {\n        // we need to buffer any HTTP traffic that happens with the proxy before we get\n        // the CONNECT response, so that if the response is anything other than an \"200\"\n        // response code, then we can re-play the \"data\" events on the socket once the\n        // HTTP parser is hooked up...\n        let buffersLength = 0;\n        const buffers = [];\n        function read() {\n            const b = socket.read();\n            if (b)\n                ondata(b);\n            else\n                socket.once('readable', read);\n        }\n        function cleanup() {\n            socket.removeListener('end', onend);\n            socket.removeListener('error', onerror);\n            socket.removeListener('close', onclose);\n            socket.removeListener('readable', read);\n        }\n        function onclose(err) {\n            debug('onclose had error %o', err);\n        }\n        function onend() {\n            debug('onend');\n        }\n        function onerror(err) {\n            cleanup();\n            debug('onerror %o', err);\n            reject(err);\n        }\n        function ondata(b) {\n            buffers.push(b);\n            buffersLength += b.length;\n            const buffered = Buffer.concat(buffers, buffersLength);\n            const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n            if (endOfHeaders === -1) {\n                // keep buffering\n                debug('have not received end of HTTP headers yet...');\n                read();\n                return;\n            }\n            const firstLine = buffered.toString('ascii', 0, buffered.indexOf('\\r\\n'));\n            const statusCode = +firstLine.split(' ')[1];\n            debug('got proxy server response: %o', firstLine);\n            resolve({\n                statusCode,\n                buffered\n            });\n        }\n        socket.on('error', onerror);\n        socket.on('close', onclose);\n        socket.on('end', onend);\n        read();\n    });\n}\nexports.default = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map",
    "'use strict';\nconst fs = require('fs');\n\nlet isDocker;\n\nfunction hasDockerEnv() {\n\ttry {\n\t\tfs.statSync('/.dockerenv');\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nfunction hasDockerCGroup() {\n\ttry {\n\t\treturn fs.readFileSync('/proc/self/cgroup', 'utf8').includes('docker');\n\t} catch (_) {\n\t\treturn false;\n\t}\n}\n\nmodule.exports = () => {\n\tif (isDocker === undefined) {\n\t\tisDocker = hasDockerEnv() || hasDockerCGroup();\n\t}\n\n\treturn isDocker;\n};\n",
    "'use strict';\nconst os = require('os');\nconst fs = require('fs');\nconst isDocker = require('is-docker');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().toLowerCase().includes('microsoft')) {\n\t\tif (isDocker()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft') ?\n\t\t\t!isDocker() : false;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n",
    "var jws = require('jws');\n\nmodule.exports = function (jwt, options) {\n  options = options || {};\n  var decoded = jws.decode(jwt, options);\n  if (!decoded) { return null; }\n  var payload = decoded.payload;\n\n  //try parse the payload\n  if(typeof payload === 'string') {\n    try {\n      var obj = JSON.parse(payload);\n      if(obj !== null && typeof obj === 'object') {\n        payload = obj;\n      }\n    } catch (e) { }\n  }\n\n  //return header if `complete` option is enabled.  header includes claims\n  //such as `kid` and `alg` used to select the key within a JWKS needed to\n  //verify the signature\n  if (options.complete === true) {\n    return {\n      header: decoded.header,\n      payload: payload,\n      signature: decoded.signature\n    };\n  }\n  return payload;\n};\n",
    "module.exports = {\n  decode: require('./decode'),\n  verify: require('./verify'),\n  sign: require('./sign'),\n  JsonWebTokenError: require('./lib/JsonWebTokenError'),\n  NotBeforeError: require('./lib/NotBeforeError'),\n  TokenExpiredError: require('./lib/TokenExpiredError'),\n};\n",
    "var JsonWebTokenError = function (message, error) {\n  Error.call(this, message);\n  if(Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  }\n  this.name = 'JsonWebTokenError';\n  this.message = message;\n  if (error) this.inner = error;\n};\n\nJsonWebTokenError.prototype = Object.create(Error.prototype);\nJsonWebTokenError.prototype.constructor = JsonWebTokenError;\n\nmodule.exports = JsonWebTokenError;\n",
    "var JsonWebTokenError = require('./JsonWebTokenError');\n\nvar NotBeforeError = function (message, date) {\n  JsonWebTokenError.call(this, message);\n  this.name = 'NotBeforeError';\n  this.date = date;\n};\n\nNotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);\n\nNotBeforeError.prototype.constructor = NotBeforeError;\n\nmodule.exports = NotBeforeError;",
    "var JsonWebTokenError = require('./JsonWebTokenError');\n\nvar TokenExpiredError = function (message, expiredAt) {\n  JsonWebTokenError.call(this, message);\n  this.name = 'TokenExpiredError';\n  this.expiredAt = expiredAt;\n};\n\nTokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);\n\nTokenExpiredError.prototype.constructor = TokenExpiredError;\n\nmodule.exports = TokenExpiredError;",
    "var semver = require('semver');\n\nmodule.exports = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');\n",
    "var ms = require('ms');\n\nmodule.exports = function (time, iat) {\n  var timestamp = iat || Math.floor(Date.now() / 1000);\n\n  if (typeof time === 'string') {\n    var milliseconds = ms(time);\n    if (typeof milliseconds === 'undefined') {\n      return;\n    }\n    return Math.floor(timestamp + milliseconds / 1000);\n  } else if (typeof time === 'number') {\n    return timestamp + time;\n  } else {\n    return;\n  }\n\n};",
    "var bufferEqual = require('buffer-equal-constant-time');\nvar Buffer = require('safe-buffer').Buffer;\nvar crypto = require('crypto');\nvar formatEcdsa = require('ecdsa-sig-formatter');\nvar util = require('util');\n\nvar MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".'\nvar MSG_INVALID_SECRET = 'secret must be a string or buffer';\nvar MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';\nvar MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';\n\nvar supportsKeyObjects = typeof crypto.createPublicKey === 'function';\nif (supportsKeyObjects) {\n  MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';\n  MSG_INVALID_SECRET += 'or a KeyObject';\n}\n\nfunction checkIsPublicKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.type !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.asymmetricKeyType !== 'string') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_VERIFIER_KEY);\n  }\n};\n\nfunction checkIsPrivateKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return;\n  }\n\n  if (typeof key === 'object') {\n    return;\n  }\n\n  throw typeError(MSG_INVALID_SIGNER_KEY);\n};\n\nfunction checkIsSecretKey(key) {\n  if (Buffer.isBuffer(key)) {\n    return;\n  }\n\n  if (typeof key === 'string') {\n    return key;\n  }\n\n  if (!supportsKeyObjects) {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key !== 'object') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (key.type !== 'secret') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n\n  if (typeof key.export !== 'function') {\n    throw typeError(MSG_INVALID_SECRET);\n  }\n}\n\nfunction fromBase64(base64) {\n  return base64\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nfunction toBase64(base64url) {\n  base64url = base64url.toString();\n\n  var padding = 4 - base64url.length % 4;\n  if (padding !== 4) {\n    for (var i = 0; i < padding; ++i) {\n      base64url += '=';\n    }\n  }\n\n  return base64url\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n}\n\nfunction typeError(template) {\n  var args = [].slice.call(arguments, 1);\n  var errMsg = util.format.bind(util, template).apply(null, args);\n  return new TypeError(errMsg);\n}\n\nfunction bufferOrString(obj) {\n  return Buffer.isBuffer(obj) || typeof obj === 'string';\n}\n\nfunction normalizeInput(thing) {\n  if (!bufferOrString(thing))\n    thing = JSON.stringify(thing);\n  return thing;\n}\n\nfunction createHmacSigner(bits) {\n  return function sign(thing, secret) {\n    checkIsSecretKey(secret);\n    thing = normalizeInput(thing);\n    var hmac = crypto.createHmac('sha' + bits, secret);\n    var sig = (hmac.update(thing), hmac.digest('base64'))\n    return fromBase64(sig);\n  }\n}\n\nfunction createHmacVerifier(bits) {\n  return function verify(thing, signature, secret) {\n    var computedSig = createHmacSigner(bits)(thing, secret);\n    return bufferEqual(Buffer.from(signature), Buffer.from(computedSig));\n  }\n}\n\nfunction createKeySigner(bits) {\n return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    // Even though we are specifying \"RSA\" here, this works with ECDSA\n    // keys as well.\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify(publicKey, signature, 'base64');\n  }\n}\n\nfunction createPSSKeySigner(bits) {\n  return function sign(thing, privateKey) {\n    checkIsPrivateKey(privateKey);\n    thing = normalizeInput(thing);\n    var signer = crypto.createSign('RSA-SHA' + bits);\n    var sig = (signer.update(thing), signer.sign({\n      key: privateKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, 'base64'));\n    return fromBase64(sig);\n  }\n}\n\nfunction createPSSKeyVerifier(bits) {\n  return function verify(thing, signature, publicKey) {\n    checkIsPublicKey(publicKey);\n    thing = normalizeInput(thing);\n    signature = toBase64(signature);\n    var verifier = crypto.createVerify('RSA-SHA' + bits);\n    verifier.update(thing);\n    return verifier.verify({\n      key: publicKey,\n      padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n      saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n    }, signature, 'base64');\n  }\n}\n\nfunction createECDSASigner(bits) {\n  var inner = createKeySigner(bits);\n  return function sign() {\n    var signature = inner.apply(null, arguments);\n    signature = formatEcdsa.derToJose(signature, 'ES' + bits);\n    return signature;\n  };\n}\n\nfunction createECDSAVerifer(bits) {\n  var inner = createKeyVerifier(bits);\n  return function verify(thing, signature, publicKey) {\n    signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');\n    var result = inner(thing, signature, publicKey);\n    return result;\n  };\n}\n\nfunction createNoneSigner() {\n  return function sign() {\n    return '';\n  }\n}\n\nfunction createNoneVerifier() {\n  return function verify(thing, signature) {\n    return signature === '';\n  }\n}\n\nmodule.exports = function jwa(algorithm) {\n  var signerFactories = {\n    hs: createHmacSigner,\n    rs: createKeySigner,\n    ps: createPSSKeySigner,\n    es: createECDSASigner,\n    none: createNoneSigner,\n  }\n  var verifierFactories = {\n    hs: createHmacVerifier,\n    rs: createKeyVerifier,\n    ps: createPSSKeyVerifier,\n    es: createECDSAVerifer,\n    none: createNoneVerifier,\n  }\n  var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);\n  if (!match)\n    throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n  var algo = (match[1] || match[3]).toLowerCase();\n  var bits = match[2];\n\n  return {\n    sign: signerFactories[algo](bits),\n    verify: verifierFactories[algo](bits),\n  }\n};\n",
    "/*global exports*/\nvar SignStream = require('./lib/sign-stream');\nvar VerifyStream = require('./lib/verify-stream');\n\nvar ALGORITHMS = [\n  'HS256', 'HS384', 'HS512',\n  'RS256', 'RS384', 'RS512',\n  'PS256', 'PS384', 'PS512',\n  'ES256', 'ES384', 'ES512'\n];\n\nexports.ALGORITHMS = ALGORITHMS;\nexports.sign = SignStream.sign;\nexports.verify = VerifyStream.verify;\nexports.decode = VerifyStream.decode;\nexports.isValid = VerifyStream.isValid;\nexports.createSign = function createSign(opts) {\n  return new SignStream(opts);\n};\nexports.createVerify = function createVerify(opts) {\n  return new VerifyStream(opts);\n};\n",
    "/*global module, process*/\nvar Buffer = require('safe-buffer').Buffer;\nvar Stream = require('stream');\nvar util = require('util');\n\nfunction DataStream(data) {\n  this.buffer = null;\n  this.writable = true;\n  this.readable = true;\n\n  // No input\n  if (!data) {\n    this.buffer = Buffer.alloc(0);\n    return this;\n  }\n\n  // Stream\n  if (typeof data.pipe === 'function') {\n    this.buffer = Buffer.alloc(0);\n    data.pipe(this);\n    return this;\n  }\n\n  // Buffer or String\n  // or Object (assumedly a passworded key)\n  if (data.length || typeof data === 'object') {\n    this.buffer = data;\n    this.writable = false;\n    process.nextTick(function () {\n      this.emit('end', data);\n      this.readable = false;\n      this.emit('close');\n    }.bind(this));\n    return this;\n  }\n\n  throw new TypeError('Unexpected data type ('+ typeof data + ')');\n}\nutil.inherits(DataStream, Stream);\n\nDataStream.prototype.write = function write(data) {\n  this.buffer = Buffer.concat([this.buffer, Buffer.from(data)]);\n  this.emit('data', data);\n};\n\nDataStream.prototype.end = function end(data) {\n  if (data)\n    this.write(data);\n  this.emit('end', data);\n  this.emit('close');\n  this.writable = false;\n  this.readable = false;\n};\n\nmodule.exports = DataStream;\n",
    "/*global module*/\nvar Buffer = require('safe-buffer').Buffer;\nvar DataStream = require('./data-stream');\nvar jwa = require('jwa');\nvar Stream = require('stream');\nvar toString = require('./tostring');\nvar util = require('util');\n\nfunction base64url(string, encoding) {\n  return Buffer\n    .from(string, encoding)\n    .toString('base64')\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\nfunction jwsSecuredInput(header, payload, encoding) {\n  encoding = encoding || 'utf8';\n  var encodedHeader = base64url(toString(header), 'binary');\n  var encodedPayload = base64url(toString(payload), encoding);\n  return util.format('%s.%s', encodedHeader, encodedPayload);\n}\n\nfunction jwsSign(opts) {\n  var header = opts.header;\n  var payload = opts.payload;\n  var secretOrKey = opts.secret || opts.privateKey;\n  var encoding = opts.encoding;\n  var algo = jwa(header.alg);\n  var securedInput = jwsSecuredInput(header, payload, encoding);\n  var signature = algo.sign(securedInput, secretOrKey);\n  return util.format('%s.%s', securedInput, signature);\n}\n\nfunction SignStream(opts) {\n  var secret = opts.secret||opts.privateKey||opts.key;\n  var secretStream = new DataStream(secret);\n  this.readable = true;\n  this.header = opts.header;\n  this.encoding = opts.encoding;\n  this.secret = this.privateKey = this.key = secretStream;\n  this.payload = new DataStream(opts.payload);\n  this.secret.once('close', function () {\n    if (!this.payload.writable && this.readable)\n      this.sign();\n  }.bind(this));\n\n  this.payload.once('close', function () {\n    if (!this.secret.writable && this.readable)\n      this.sign();\n  }.bind(this));\n}\nutil.inherits(SignStream, Stream);\n\nSignStream.prototype.sign = function sign() {\n  try {\n    var signature = jwsSign({\n      header: this.header,\n      payload: this.payload.buffer,\n      secret: this.secret.buffer,\n      encoding: this.encoding\n    });\n    this.emit('done', signature);\n    this.emit('data', signature);\n    this.emit('end');\n    this.readable = false;\n    return signature;\n  } catch (e) {\n    this.readable = false;\n    this.emit('error', e);\n    this.emit('close');\n  }\n};\n\nSignStream.sign = jwsSign;\n\nmodule.exports = SignStream;\n",
    "/*global module*/\nvar Buffer = require('buffer').Buffer;\n\nmodule.exports = function toString(obj) {\n  if (typeof obj === 'string')\n    return obj;\n  if (typeof obj === 'number' || Buffer.isBuffer(obj))\n    return obj.toString();\n  return JSON.stringify(obj);\n};\n",
    "/*global module*/\nvar Buffer = require('safe-buffer').Buffer;\nvar DataStream = require('./data-stream');\nvar jwa = require('jwa');\nvar Stream = require('stream');\nvar toString = require('./tostring');\nvar util = require('util');\nvar JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\n\nfunction isObject(thing) {\n  return Object.prototype.toString.call(thing) === '[object Object]';\n}\n\nfunction safeJsonParse(thing) {\n  if (isObject(thing))\n    return thing;\n  try { return JSON.parse(thing); }\n  catch (e) { return undefined; }\n}\n\nfunction headerFromJWS(jwsSig) {\n  var encodedHeader = jwsSig.split('.', 1)[0];\n  return safeJsonParse(Buffer.from(encodedHeader, 'base64').toString('binary'));\n}\n\nfunction securedInputFromJWS(jwsSig) {\n  return jwsSig.split('.', 2).join('.');\n}\n\nfunction signatureFromJWS(jwsSig) {\n  return jwsSig.split('.')[2];\n}\n\nfunction payloadFromJWS(jwsSig, encoding) {\n  encoding = encoding || 'utf8';\n  var payload = jwsSig.split('.')[1];\n  return Buffer.from(payload, 'base64').toString(encoding);\n}\n\nfunction isValidJws(string) {\n  return JWS_REGEX.test(string) && !!headerFromJWS(string);\n}\n\nfunction jwsVerify(jwsSig, algorithm, secretOrKey) {\n  if (!algorithm) {\n    var err = new Error(\"Missing algorithm parameter for jws.verify\");\n    err.code = \"MISSING_ALGORITHM\";\n    throw err;\n  }\n  jwsSig = toString(jwsSig);\n  var signature = signatureFromJWS(jwsSig);\n  var securedInput = securedInputFromJWS(jwsSig);\n  var algo = jwa(algorithm);\n  return algo.verify(securedInput, signature, secretOrKey);\n}\n\nfunction jwsDecode(jwsSig, opts) {\n  opts = opts || {};\n  jwsSig = toString(jwsSig);\n\n  if (!isValidJws(jwsSig))\n    return null;\n\n  var header = headerFromJWS(jwsSig);\n\n  if (!header)\n    return null;\n\n  var payload = payloadFromJWS(jwsSig);\n  if (header.typ === 'JWT' || opts.json)\n    payload = JSON.parse(payload, opts.encoding);\n\n  return {\n    header: header,\n    payload: payload,\n    signature: signatureFromJWS(jwsSig)\n  };\n}\n\nfunction VerifyStream(opts) {\n  opts = opts || {};\n  var secretOrKey = opts.secret||opts.publicKey||opts.key;\n  var secretStream = new DataStream(secretOrKey);\n  this.readable = true;\n  this.algorithm = opts.algorithm;\n  this.encoding = opts.encoding;\n  this.secret = this.publicKey = this.key = secretStream;\n  this.signature = new DataStream(opts.signature);\n  this.secret.once('close', function () {\n    if (!this.signature.writable && this.readable)\n      this.verify();\n  }.bind(this));\n\n  this.signature.once('close', function () {\n    if (!this.secret.writable && this.readable)\n      this.verify();\n  }.bind(this));\n}\nutil.inherits(VerifyStream, Stream);\nVerifyStream.prototype.verify = function verify() {\n  try {\n    var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);\n    var obj = jwsDecode(this.signature.buffer, this.encoding);\n    this.emit('done', valid, obj);\n    this.emit('data', valid);\n    this.emit('end');\n    this.readable = false;\n    return valid;\n  } catch (e) {\n    this.readable = false;\n    this.emit('error', e);\n    this.emit('close');\n  }\n};\n\nVerifyStream.decode = jwsDecode;\nVerifyStream.isValid = isValidJws;\nVerifyStream.verify = jwsVerify;\n\nmodule.exports = VerifyStream;\n",
    "exports = module.exports = SemVer\n\nvar debug\n/* istanbul ignore next */\nif (typeof process === 'object' &&\n    process.env &&\n    process.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n  debug = function () {\n    var args = Array.prototype.slice.call(arguments, 0)\n    args.unshift('SEMVER')\n    console.log.apply(console, args)\n  }\n} else {\n  debug = function () {}\n}\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0'\n\nvar MAX_LENGTH = 256\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16\n\n// The actual regexps go on exports.re\nvar re = exports.re = []\nvar src = exports.src = []\nvar R = 0\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*'\nvar NUMERICIDENTIFIERLOOSE = R++\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+'\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')'\n\nvar MAINVERSIONLOOSE = R++\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')'\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')'\n\nvar PRERELEASEIDENTIFIERLOOSE = R++\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')'\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))'\n\nvar PRERELEASELOOSE = R++\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))'\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?'\n\nsrc[FULL] = '^' + FULLPLAIN + '$'\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?'\n\nvar LOOSE = R++\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$'\n\nvar GTLT = R++\nsrc[GTLT] = '((?:<|>)?=?)'\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*'\nvar XRANGEIDENTIFIER = R++\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*'\n\nvar XRANGEPLAIN = R++\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?'\n\nvar XRANGEPLAINLOOSE = R++\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?'\n\nvar XRANGE = R++\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$'\nvar XRANGELOOSE = R++\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$'\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++\nsrc[COERCE] = '(?:^|[^\\\\d])' +\n              '(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:\\\\.(\\\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +\n              '(?:$|[^\\\\d])'\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++\nsrc[LONETILDE] = '(?:~>?)'\n\nvar TILDETRIM = R++\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+'\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g')\nvar tildeTrimReplace = '$1~'\n\nvar TILDE = R++\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$'\nvar TILDELOOSE = R++\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++\nsrc[LONECARET] = '(?:\\\\^)'\n\nvar CARETTRIM = R++\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+'\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g')\nvar caretTrimReplace = '$1^'\n\nvar CARET = R++\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$'\nvar CARETLOOSE = R++\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$'\nvar COMPARATOR = R++\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$'\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g')\nvar comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$'\n\nvar HYPHENRANGELOOSE = R++\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$'\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*'\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  debug(i, src[i])\n  if (!re[i]) {\n    re[i] = new RegExp(src[i])\n  }\n}\n\nexports.parse = parse\nfunction parse (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  var r = options.loose ? re[LOOSE] : re[FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nexports.valid = valid\nfunction valid (version, options) {\n  var v = parse(version, options)\n  return v ? v.version : null\n}\n\nexports.clean = clean\nfunction clean (version, options) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\n\nexports.SemVer = SemVer\n\nfunction SemVer (version, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n  if (version instanceof SemVer) {\n    if (version.loose === options.loose) {\n      return version\n    } else {\n      version = version.version\n    }\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  if (version.length > MAX_LENGTH) {\n    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')\n  }\n\n  if (!(this instanceof SemVer)) {\n    return new SemVer(version, options)\n  }\n\n  debug('SemVer', version, options)\n  this.options = options\n  this.loose = !!options.loose\n\n  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL])\n\n  if (!m) {\n    throw new TypeError('Invalid Version: ' + version)\n  }\n\n  this.raw = version\n\n  // these are actually numbers\n  this.major = +m[1]\n  this.minor = +m[2]\n  this.patch = +m[3]\n\n  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n    throw new TypeError('Invalid major version')\n  }\n\n  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n    throw new TypeError('Invalid minor version')\n  }\n\n  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n    throw new TypeError('Invalid patch version')\n  }\n\n  // numberify any prerelease numeric ids\n  if (!m[4]) {\n    this.prerelease = []\n  } else {\n    this.prerelease = m[4].split('.').map(function (id) {\n      if (/^[0-9]+$/.test(id)) {\n        var num = +id\n        if (num >= 0 && num < MAX_SAFE_INTEGER) {\n          return num\n        }\n      }\n      return id\n    })\n  }\n\n  this.build = m[5] ? m[5].split('.') : []\n  this.format()\n}\n\nSemVer.prototype.format = function () {\n  this.version = this.major + '.' + this.minor + '.' + this.patch\n  if (this.prerelease.length) {\n    this.version += '-' + this.prerelease.join('.')\n  }\n  return this.version\n}\n\nSemVer.prototype.toString = function () {\n  return this.version\n}\n\nSemVer.prototype.compare = function (other) {\n  debug('SemVer.compare', this.version, this.options, other)\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return this.compareMain(other) || this.comparePre(other)\n}\n\nSemVer.prototype.compareMain = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch)\n}\n\nSemVer.prototype.comparePre = function (other) {\n  if (!(other instanceof SemVer)) {\n    other = new SemVer(other, this.options)\n  }\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length) {\n    return -1\n  } else if (!this.prerelease.length && other.prerelease.length) {\n    return 1\n  } else if (!this.prerelease.length && !other.prerelease.length) {\n    return 0\n  }\n\n  var i = 0\n  do {\n    var a = this.prerelease[i]\n    var b = other.prerelease[i]\n    debug('prerelease compare', i, a, b)\n    if (a === undefined && b === undefined) {\n      return 0\n    } else if (b === undefined) {\n      return 1\n    } else if (a === undefined) {\n      return -1\n    } else if (a === b) {\n      continue\n    } else {\n      return compareIdentifiers(a, b)\n    }\n  } while (++i)\n}\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function (release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor = 0\n      this.major++\n      this.inc('pre', identifier)\n      break\n    case 'preminor':\n      this.prerelease.length = 0\n      this.patch = 0\n      this.minor++\n      this.inc('pre', identifier)\n      break\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0\n      this.inc('patch', identifier)\n      this.inc('pre', identifier)\n      break\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0) {\n        this.inc('patch', identifier)\n      }\n      this.inc('pre', identifier)\n      break\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0) {\n        this.major++\n      }\n      this.minor = 0\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0) {\n        this.minor++\n      }\n      this.patch = 0\n      this.prerelease = []\n      break\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0) {\n        this.patch++\n      }\n      this.prerelease = []\n      break\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0) {\n        this.prerelease = [0]\n      } else {\n        var i = this.prerelease.length\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++\n            i = -2\n          }\n        }\n        if (i === -1) {\n          // didn't increment anything\n          this.prerelease.push(0)\n        }\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1])) {\n            this.prerelease = [identifier, 0]\n          }\n        } else {\n          this.prerelease = [identifier, 0]\n        }\n      }\n      break\n\n    default:\n      throw new Error('invalid increment argument: ' + release)\n  }\n  this.format()\n  this.raw = this.version\n  return this\n}\n\nexports.inc = inc\nfunction inc (version, release, loose, identifier) {\n  if (typeof (loose) === 'string') {\n    identifier = loose\n    loose = undefined\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version\n  } catch (er) {\n    return null\n  }\n}\n\nexports.diff = diff\nfunction diff (version1, version2) {\n  if (eq(version1, version2)) {\n    return null\n  } else {\n    var v1 = parse(version1)\n    var v2 = parse(version2)\n    var prefix = ''\n    if (v1.prerelease.length || v2.prerelease.length) {\n      prefix = 'pre'\n      var defaultResult = 'prerelease'\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return prefix + key\n        }\n      }\n    }\n    return defaultResult // may be undefined\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers\n\nvar numeric = /^[0-9]+$/\nfunction compareIdentifiers (a, b) {\n  var anum = numeric.test(a)\n  var bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers\nfunction rcompareIdentifiers (a, b) {\n  return compareIdentifiers(b, a)\n}\n\nexports.major = major\nfunction major (a, loose) {\n  return new SemVer(a, loose).major\n}\n\nexports.minor = minor\nfunction minor (a, loose) {\n  return new SemVer(a, loose).minor\n}\n\nexports.patch = patch\nfunction patch (a, loose) {\n  return new SemVer(a, loose).patch\n}\n\nexports.compare = compare\nfunction compare (a, b, loose) {\n  return new SemVer(a, loose).compare(new SemVer(b, loose))\n}\n\nexports.compareLoose = compareLoose\nfunction compareLoose (a, b) {\n  return compare(a, b, true)\n}\n\nexports.rcompare = rcompare\nfunction rcompare (a, b, loose) {\n  return compare(b, a, loose)\n}\n\nexports.sort = sort\nfunction sort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.compare(a, b, loose)\n  })\n}\n\nexports.rsort = rsort\nfunction rsort (list, loose) {\n  return list.sort(function (a, b) {\n    return exports.rcompare(a, b, loose)\n  })\n}\n\nexports.gt = gt\nfunction gt (a, b, loose) {\n  return compare(a, b, loose) > 0\n}\n\nexports.lt = lt\nfunction lt (a, b, loose) {\n  return compare(a, b, loose) < 0\n}\n\nexports.eq = eq\nfunction eq (a, b, loose) {\n  return compare(a, b, loose) === 0\n}\n\nexports.neq = neq\nfunction neq (a, b, loose) {\n  return compare(a, b, loose) !== 0\n}\n\nexports.gte = gte\nfunction gte (a, b, loose) {\n  return compare(a, b, loose) >= 0\n}\n\nexports.lte = lte\nfunction lte (a, b, loose) {\n  return compare(a, b, loose) <= 0\n}\n\nexports.cmp = cmp\nfunction cmp (a, op, b, loose) {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object')\n        a = a.version\n      if (typeof b === 'object')\n        b = b.version\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError('Invalid operator: ' + op)\n  }\n}\n\nexports.Comparator = Comparator\nfunction Comparator (comp, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (comp instanceof Comparator) {\n    if (comp.loose === !!options.loose) {\n      return comp\n    } else {\n      comp = comp.value\n    }\n  }\n\n  if (!(this instanceof Comparator)) {\n    return new Comparator(comp, options)\n  }\n\n  debug('comparator', comp, options)\n  this.options = options\n  this.loose = !!options.loose\n  this.parse(comp)\n\n  if (this.semver === ANY) {\n    this.value = ''\n  } else {\n    this.value = this.operator + this.semver.version\n  }\n\n  debug('comp', this)\n}\n\nvar ANY = {}\nComparator.prototype.parse = function (comp) {\n  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var m = comp.match(r)\n\n  if (!m) {\n    throw new TypeError('Invalid comparator: ' + comp)\n  }\n\n  this.operator = m[1]\n  if (this.operator === '=') {\n    this.operator = ''\n  }\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2]) {\n    this.semver = ANY\n  } else {\n    this.semver = new SemVer(m[2], this.options.loose)\n  }\n}\n\nComparator.prototype.toString = function () {\n  return this.value\n}\n\nComparator.prototype.test = function (version) {\n  debug('Comparator.test', version, this.options.loose)\n\n  if (this.semver === ANY) {\n    return true\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  return cmp(version, this.operator, this.semver, this.options)\n}\n\nComparator.prototype.intersects = function (comp, options) {\n  if (!(comp instanceof Comparator)) {\n    throw new TypeError('a Comparator is required')\n  }\n\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  var rangeTmp\n\n  if (this.operator === '') {\n    rangeTmp = new Range(comp.value, options)\n    return satisfies(this.value, rangeTmp, options)\n  } else if (comp.operator === '') {\n    rangeTmp = new Range(this.value, options)\n    return satisfies(comp.semver, rangeTmp, options)\n  }\n\n  var sameDirectionIncreasing =\n    (this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '>=' || comp.operator === '>')\n  var sameDirectionDecreasing =\n    (this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '<=' || comp.operator === '<')\n  var sameSemVer = this.semver.version === comp.semver.version\n  var differentDirectionsInclusive =\n    (this.operator === '>=' || this.operator === '<=') &&\n    (comp.operator === '>=' || comp.operator === '<=')\n  var oppositeDirectionsLessThan =\n    cmp(this.semver, '<', comp.semver, options) &&\n    ((this.operator === '>=' || this.operator === '>') &&\n    (comp.operator === '<=' || comp.operator === '<'))\n  var oppositeDirectionsGreaterThan =\n    cmp(this.semver, '>', comp.semver, options) &&\n    ((this.operator === '<=' || this.operator === '<') &&\n    (comp.operator === '>=' || comp.operator === '>'))\n\n  return sameDirectionIncreasing || sameDirectionDecreasing ||\n    (sameSemVer && differentDirectionsInclusive) ||\n    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan\n}\n\nexports.Range = Range\nfunction Range (range, options) {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (range instanceof Range) {\n    if (range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease) {\n      return range\n    } else {\n      return new Range(range.raw, options)\n    }\n  }\n\n  if (range instanceof Comparator) {\n    return new Range(range.value, options)\n  }\n\n  if (!(this instanceof Range)) {\n    return new Range(range, options)\n  }\n\n  this.options = options\n  this.loose = !!options.loose\n  this.includePrerelease = !!options.includePrerelease\n\n  // First, split based on boolean or ||\n  this.raw = range\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n    return this.parseRange(range.trim())\n  }, this).filter(function (c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length\n  })\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range)\n  }\n\n  this.format()\n}\n\nRange.prototype.format = function () {\n  this.range = this.set.map(function (comps) {\n    return comps.join(' ').trim()\n  }).join('||').trim()\n  return this.range\n}\n\nRange.prototype.toString = function () {\n  return this.range\n}\n\nRange.prototype.parseRange = function (range) {\n  var loose = this.options.loose\n  range = range.trim()\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE]\n  range = range.replace(hr, hyphenReplace)\n  debug('hyphen replace', range)\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace)\n  debug('comparator trim', range, re[COMPARATORTRIM])\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace)\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace)\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ')\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR]\n  var set = range.split(' ').map(function (comp) {\n    return parseComparator(comp, this.options)\n  }, this).join(' ').split(/\\s+/)\n  if (this.options.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function (comp) {\n      return !!comp.match(compRe)\n    })\n  }\n  set = set.map(function (comp) {\n    return new Comparator(comp, this.options)\n  }, this)\n\n  return set\n}\n\nRange.prototype.intersects = function (range, options) {\n  if (!(range instanceof Range)) {\n    throw new TypeError('a Range is required')\n  }\n\n  return this.set.some(function (thisComparators) {\n    return thisComparators.every(function (thisComparator) {\n      return range.set.some(function (rangeComparators) {\n        return rangeComparators.every(function (rangeComparator) {\n          return thisComparator.intersects(rangeComparator, options)\n        })\n      })\n    })\n  })\n}\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators\nfunction toComparators (range, options) {\n  return new Range(range, options).set.map(function (comp) {\n    return comp.map(function (c) {\n      return c.value\n    }).join(' ').trim().split(' ')\n  })\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator (comp, options) {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nfunction isX (id) {\n  return !id || id.toLowerCase() === 'x' || id === '*'\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options)\n  }).join(' ')\n}\n\nfunction replaceTilde (comp, options) {\n  var r = options.loose ? re[TILDELOOSE] : re[TILDE]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets (comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options)\n  }).join(' ')\n}\n\nfunction replaceCaret (comp, options) {\n  debug('caret', comp, options)\n  var r = options.loose ? re[CARETLOOSE] : re[CARET]\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr)\n    var ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n      } else {\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1)\n        } else {\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0'\n        }\n      } else {\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0'\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nfunction replaceXRanges (comp, options) {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nfunction replaceXRange (comp, options) {\n  comp = comp.trim()\n  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE]\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    var xM = isX(M)\n    var xm = xM || isX(m)\n    var xp = xm || isX(p)\n    var anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars (comp, options) {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '')\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = '>=' + fM + '.0.0'\n  } else if (isX(fp)) {\n    from = '>=' + fM + '.' + fm + '.0'\n  } else {\n    from = '>=' + from\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = '<' + (+tM + 1) + '.0.0'\n  } else if (isX(tp)) {\n    to = '<' + tM + '.' + (+tm + 1) + '.0'\n  } else if (tpr) {\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr\n  } else {\n    to = '<=' + to\n  }\n\n  return (from + ' ' + to).trim()\n}\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function (version) {\n  if (!version) {\n    return false\n  }\n\n  if (typeof version === 'string') {\n    version = new SemVer(version, this.options)\n  }\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version, this.options)) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction testSet (set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n\nexports.satisfies = satisfies\nfunction satisfies (version, range, options) {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\n\nexports.maxSatisfying = maxSatisfying\nfunction maxSatisfying (versions, range, options) {\n  var max = null\n  var maxSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\n\nexports.minSatisfying = minSatisfying\nfunction minSatisfying (versions, range, options) {\n  var min = null\n  var minSV = null\n  try {\n    var rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach(function (v) {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\n\nexports.minVersion = minVersion\nfunction minVersion (range, loose) {\n  range = new Range(range, loose)\n\n  var minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    comparators.forEach(function (comparator) {\n      // Clone to avoid manipulating the comparator's semver object.\n      var compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error('Unexpected operation: ' + comparator.operator)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\n\nexports.validRange = validRange\nfunction validRange (range, options) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr\nfunction ltr (version, range, options) {\n  return outside(version, range, '<', options)\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr\nfunction gtr (version, range, options) {\n  return outside(version, range, '>', options)\n}\n\nexports.outside = outside\nfunction outside (version, range, hilo, options) {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  var gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i]\n\n    var high = null\n    var low = null\n\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nexports.prerelease = prerelease\nfunction prerelease (version, options) {\n  var parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\n\nexports.intersects = intersects\nfunction intersects (r1, r2, options) {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2)\n}\n\nexports.coerce = coerce\nfunction coerce (version) {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  var match = version.match(re[COERCE])\n\n  if (match == null) {\n    return null\n  }\n\n  return parse(match[1] +\n    '.' + (match[2] || '0') +\n    '.' + (match[3] || '0'))\n}\n",
    "var timespan = require('./lib/timespan');\nvar PS_SUPPORTED = require('./lib/psSupported');\nvar jws = require('jws');\nvar includes = require('lodash.includes');\nvar isBoolean = require('lodash.isboolean');\nvar isInteger = require('lodash.isinteger');\nvar isNumber = require('lodash.isnumber');\nvar isPlainObject = require('lodash.isplainobject');\nvar isString = require('lodash.isstring');\nvar once = require('lodash.once');\n\nvar SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none']\nif (PS_SUPPORTED) {\n  SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n}\n\nvar sign_options_schema = {\n  expiresIn: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"expiresIn\" should be a number of seconds or string representing a timespan' },\n  notBefore: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"notBefore\" should be a number of seconds or string representing a timespan' },\n  audience: { isValid: function(value) { return isString(value) || Array.isArray(value); }, message: '\"audience\" must be a string or array' },\n  algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '\"algorithm\" must be a valid string enum value' },\n  header: { isValid: isPlainObject, message: '\"header\" must be an object' },\n  encoding: { isValid: isString, message: '\"encoding\" must be a string' },\n  issuer: { isValid: isString, message: '\"issuer\" must be a string' },\n  subject: { isValid: isString, message: '\"subject\" must be a string' },\n  jwtid: { isValid: isString, message: '\"jwtid\" must be a string' },\n  noTimestamp: { isValid: isBoolean, message: '\"noTimestamp\" must be a boolean' },\n  keyid: { isValid: isString, message: '\"keyid\" must be a string' },\n  mutatePayload: { isValid: isBoolean, message: '\"mutatePayload\" must be a boolean' }\n};\n\nvar registered_claims_schema = {\n  iat: { isValid: isNumber, message: '\"iat\" should be a number of seconds' },\n  exp: { isValid: isNumber, message: '\"exp\" should be a number of seconds' },\n  nbf: { isValid: isNumber, message: '\"nbf\" should be a number of seconds' }\n};\n\nfunction validate(schema, allowUnknown, object, parameterName) {\n  if (!isPlainObject(object)) {\n    throw new Error('Expected \"' + parameterName + '\" to be a plain object.');\n  }\n  Object.keys(object)\n    .forEach(function(key) {\n      var validator = schema[key];\n      if (!validator) {\n        if (!allowUnknown) {\n          throw new Error('\"' + key + '\" is not allowed in \"' + parameterName + '\"');\n        }\n        return;\n      }\n      if (!validator.isValid(object[key])) {\n        throw new Error(validator.message);\n      }\n    });\n}\n\nfunction validateOptions(options) {\n  return validate(sign_options_schema, false, options, 'options');\n}\n\nfunction validatePayload(payload) {\n  return validate(registered_claims_schema, true, payload, 'payload');\n}\n\nvar options_to_payload = {\n  'audience': 'aud',\n  'issuer': 'iss',\n  'subject': 'sub',\n  'jwtid': 'jti'\n};\n\nvar options_for_objects = [\n  'expiresIn',\n  'notBefore',\n  'noTimestamp',\n  'audience',\n  'issuer',\n  'subject',\n  'jwtid',\n];\n\nmodule.exports = function (payload, secretOrPrivateKey, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else {\n    options = options || {};\n  }\n\n  var isObjectPayload = typeof payload === 'object' &&\n                        !Buffer.isBuffer(payload);\n\n  var header = Object.assign({\n    alg: options.algorithm || 'HS256',\n    typ: isObjectPayload ? 'JWT' : undefined,\n    kid: options.keyid\n  }, options.header);\n\n  function failure(err) {\n    if (callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  if (!secretOrPrivateKey && options.algorithm !== 'none') {\n    return failure(new Error('secretOrPrivateKey must have a value'));\n  }\n\n  if (typeof payload === 'undefined') {\n    return failure(new Error('payload is required'));\n  } else if (isObjectPayload) {\n    try {\n      validatePayload(payload);\n    }\n    catch (error) {\n      return failure(error);\n    }\n    if (!options.mutatePayload) {\n      payload = Object.assign({},payload);\n    }\n  } else {\n    var invalid_options = options_for_objects.filter(function (opt) {\n      return typeof options[opt] !== 'undefined';\n    });\n\n    if (invalid_options.length > 0) {\n      return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));\n    }\n  }\n\n  if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {\n    return failure(new Error('Bad \"options.expiresIn\" option the payload already has an \"exp\" property.'));\n  }\n\n  if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {\n    return failure(new Error('Bad \"options.notBefore\" option the payload already has an \"nbf\" property.'));\n  }\n\n  try {\n    validateOptions(options);\n  }\n  catch (error) {\n    return failure(error);\n  }\n\n  var timestamp = payload.iat || Math.floor(Date.now() / 1000);\n\n  if (options.noTimestamp) {\n    delete payload.iat;\n  } else if (isObjectPayload) {\n    payload.iat = timestamp;\n  }\n\n  if (typeof options.notBefore !== 'undefined') {\n    try {\n      payload.nbf = timespan(options.notBefore, timestamp);\n    }\n    catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.nbf === 'undefined') {\n      return failure(new Error('\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n\n  if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {\n    try {\n      payload.exp = timespan(options.expiresIn, timestamp);\n    }\n    catch (err) {\n      return failure(err);\n    }\n    if (typeof payload.exp === 'undefined') {\n      return failure(new Error('\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n    }\n  }\n\n  Object.keys(options_to_payload).forEach(function (key) {\n    var claim = options_to_payload[key];\n    if (typeof options[key] !== 'undefined') {\n      if (typeof payload[claim] !== 'undefined') {\n        return failure(new Error('Bad \"options.' + key + '\" option. The payload already has an \"' + claim + '\" property.'));\n      }\n      payload[claim] = options[key];\n    }\n  });\n\n  var encoding = options.encoding || 'utf8';\n\n  if (typeof callback === 'function') {\n    callback = callback && once(callback);\n\n    jws.createSign({\n      header: header,\n      privateKey: secretOrPrivateKey,\n      payload: payload,\n      encoding: encoding\n    }).once('error', callback)\n      .once('done', function (signature) {\n        callback(null, signature);\n      });\n  } else {\n    return jws.sign({header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding});\n  }\n};\n",
    "var JsonWebTokenError = require('./lib/JsonWebTokenError');\nvar NotBeforeError    = require('./lib/NotBeforeError');\nvar TokenExpiredError = require('./lib/TokenExpiredError');\nvar decode            = require('./decode');\nvar timespan          = require('./lib/timespan');\nvar PS_SUPPORTED      = require('./lib/psSupported');\nvar jws               = require('jws');\n\nvar PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'];\nvar RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];\nvar HS_ALGS = ['HS256', 'HS384', 'HS512'];\n\nif (PS_SUPPORTED) {\n  PUB_KEY_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n  RSA_KEY_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n}\n\nmodule.exports = function (jwtString, secretOrPublicKey, options, callback) {\n  if ((typeof options === 'function') && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  //clone this object since we are going to mutate it.\n  options = Object.assign({}, options);\n\n  var done;\n\n  if (callback) {\n    done = callback;\n  } else {\n    done = function(err, data) {\n      if (err) throw err;\n      return data;\n    };\n  }\n\n  if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {\n    return done(new JsonWebTokenError('clockTimestamp must be a number'));\n  }\n\n  if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {\n    return done(new JsonWebTokenError('nonce must be a non-empty string'));\n  }\n\n  var clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);\n\n  if (!jwtString){\n    return done(new JsonWebTokenError('jwt must be provided'));\n  }\n\n  if (typeof jwtString !== 'string') {\n    return done(new JsonWebTokenError('jwt must be a string'));\n  }\n\n  var parts = jwtString.split('.');\n\n  if (parts.length !== 3){\n    return done(new JsonWebTokenError('jwt malformed'));\n  }\n\n  var decodedToken;\n\n  try {\n    decodedToken = decode(jwtString, { complete: true });\n  } catch(err) {\n    return done(err);\n  }\n\n  if (!decodedToken) {\n    return done(new JsonWebTokenError('invalid token'));\n  }\n\n  var header = decodedToken.header;\n  var getSecret;\n\n  if(typeof secretOrPublicKey === 'function') {\n    if(!callback) {\n      return done(new JsonWebTokenError('verify must be called asynchronous if secret or public key is provided as a callback'));\n    }\n\n    getSecret = secretOrPublicKey;\n  }\n  else {\n    getSecret = function(header, secretCallback) {\n      return secretCallback(null, secretOrPublicKey);\n    };\n  }\n\n  return getSecret(header, function(err, secretOrPublicKey) {\n    if(err) {\n      return done(new JsonWebTokenError('error in secret or public key callback: ' + err.message));\n    }\n\n    var hasSignature = parts[2].trim() !== '';\n\n    if (!hasSignature && secretOrPublicKey){\n      return done(new JsonWebTokenError('jwt signature is required'));\n    }\n\n    if (hasSignature && !secretOrPublicKey) {\n      return done(new JsonWebTokenError('secret or public key must be provided'));\n    }\n\n    if (!hasSignature && !options.algorithms) {\n      options.algorithms = ['none'];\n    }\n\n    if (!options.algorithms) {\n      options.algorithms = ~secretOrPublicKey.toString().indexOf('BEGIN CERTIFICATE') ||\n        ~secretOrPublicKey.toString().indexOf('BEGIN PUBLIC KEY') ? PUB_KEY_ALGS :\n        ~secretOrPublicKey.toString().indexOf('BEGIN RSA PUBLIC KEY') ? RSA_KEY_ALGS : HS_ALGS;\n\n    }\n\n    if (!~options.algorithms.indexOf(decodedToken.header.alg)) {\n      return done(new JsonWebTokenError('invalid algorithm'));\n    }\n\n    var valid;\n\n    try {\n      valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);\n    } catch (e) {\n      return done(e);\n    }\n\n    if (!valid) {\n      return done(new JsonWebTokenError('invalid signature'));\n    }\n\n    var payload = decodedToken.payload;\n\n    if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {\n      if (typeof payload.nbf !== 'number') {\n        return done(new JsonWebTokenError('invalid nbf value'));\n      }\n      if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {\n        return done(new NotBeforeError('jwt not active', new Date(payload.nbf * 1000)));\n      }\n    }\n\n    if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {\n      if (typeof payload.exp !== 'number') {\n        return done(new JsonWebTokenError('invalid exp value'));\n      }\n      if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {\n        return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));\n      }\n    }\n\n    if (options.audience) {\n      var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];\n      var target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];\n\n      var match = target.some(function (targetAudience) {\n        return audiences.some(function (audience) {\n          return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;\n        });\n      });\n\n      if (!match) {\n        return done(new JsonWebTokenError('jwt audience invalid. expected: ' + audiences.join(' or ')));\n      }\n    }\n\n    if (options.issuer) {\n      var invalid_issuer =\n              (typeof options.issuer === 'string' && payload.iss !== options.issuer) ||\n              (Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1);\n\n      if (invalid_issuer) {\n        return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + options.issuer));\n      }\n    }\n\n    if (options.subject) {\n      if (payload.sub !== options.subject) {\n        return done(new JsonWebTokenError('jwt subject invalid. expected: ' + options.subject));\n      }\n    }\n\n    if (options.jwtid) {\n      if (payload.jti !== options.jwtid) {\n        return done(new JsonWebTokenError('jwt jwtid invalid. expected: ' + options.jwtid));\n      }\n    }\n\n    if (options.nonce) {\n      if (payload.nonce !== options.nonce) {\n        return done(new JsonWebTokenError('jwt nonce invalid. expected: ' + options.nonce));\n      }\n    }\n\n    if (options.maxAge) {\n      if (typeof payload.iat !== 'number') {\n        return done(new JsonWebTokenError('iat required when maxAge is specified'));\n      }\n\n      var maxAgeTimestamp = timespan(options.maxAge, payload.iat);\n      if (typeof maxAgeTimestamp === 'undefined') {\n        return done(new JsonWebTokenError('\"maxAge\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n      }\n      if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {\n        return done(new TokenExpiredError('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));\n      }\n    }\n\n    if (options.complete === true) {\n      var signature = decodedToken.signature;\n\n      return done(null, {\n        header: header,\n        payload: payload,\n        signature: signature\n      });\n    }\n\n    return done(null, payload);\n  });\n};\n",
    "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object ? baseValues(object, keys(object)) : [];\n}\n\nmodule.exports = includes;\n",
    "/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isBoolean(false);\n * // => true\n *\n * _.isBoolean(null);\n * // => false\n */\nfunction isBoolean(value) {\n  return value === true || value === false ||\n    (isObjectLike(value) && objectToString.call(value) == boolTag);\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isBoolean;\n",
    "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on\n * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n * @example\n *\n * _.isInteger(3);\n * // => true\n *\n * _.isInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isInteger(Infinity);\n * // => false\n *\n * _.isInteger('3');\n * // => false\n */\nfunction isInteger(value) {\n  return typeof value == 'number' && value == toInteger(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = isInteger;\n",
    "/**\n * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n * as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && objectToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n",
    "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nmodule.exports = isPlainObject;\n",
    "/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n",
    "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308,\n    NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Creates a function that invokes `func`, with the `this` binding and arguments\n * of the created function, while it's called less than `n` times. Subsequent\n * calls to the created function return the result of the last `func` invocation.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {number} n The number of calls at which `func` is no longer invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * jQuery(element).on('click', _.before(5, addContactToList));\n * // => Allows adding up to 4 contacts to the list.\n */\nfunction before(n, func) {\n  var result;\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  n = toInteger(n);\n  return function() {\n    if (--n > 0) {\n      result = func.apply(this, arguments);\n    }\n    if (n <= 1) {\n      func = undefined;\n    }\n    return result;\n  };\n}\n\n/**\n * Creates a function that is restricted to invoking `func` once. Repeat calls\n * to the function return the value of the first invocation. The `func` is\n * invoked with the `this` binding and arguments of the created function.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * var initialize = _.once(createApplication);\n * initialize();\n * initialize();\n * // => `createApplication` is invoked once\n */\nfunction once(func) {\n  return before(2, func);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = once;\n",
    "/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n",
    "/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n",
    "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n",
    null,
    "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",
    "'use strict'\n\nconst https = require('https')\n\nmodule.exports = (server, grace) => {\n  grace = typeof grace === 'undefined' ? Infinity : grace\n  const reqsPerSocket = new Map()\n  let stopped = false\n  let gracefully = true\n\n  if (server instanceof https.Server) {\n    server.on('secureConnection', onConnection)\n  } else {\n    server.on('connection', onConnection)\n  }\n\n  server.on('request', onRequest)\n  server.stop = stop\n  server._pendingSockets = reqsPerSocket\n  return server\n\n  function onConnection (socket) {\n    reqsPerSocket.set(socket, 0)\n    socket.once('close', () => reqsPerSocket.delete(socket))\n  }\n\n  function onRequest (req, res) {\n    reqsPerSocket.set(req.socket, reqsPerSocket.get(req.socket) + 1)\n    res.once('finish', () => {\n      const pending = reqsPerSocket.get(req.socket) - 1\n      reqsPerSocket.set(req.socket, pending)\n      if (stopped && pending === 0) {\n        req.socket.end()\n      }\n    })\n  }\n\n  function stop (callback) {\n    // allow request handlers to update state before we act on that state\n    setImmediate(() => {\n      stopped = true\n      if (grace < Infinity) {\n        setTimeout(destroyAll, grace).unref()\n      }\n      server.close(e => {\n        if (callback) {\n          callback(e, gracefully)\n        }\n      })\n      reqsPerSocket.forEach(endIfIdle)\n    })\n  }\n\n  function endIfIdle (requests, socket) {\n    if (requests === 0) socket.end()\n  }\n\n  function destroyAll () {\n    gracefully = false\n    reqsPerSocket.forEach((reqs, socket) => socket.end())\n    setImmediate(() => {\n      reqsPerSocket.forEach((reqs, socket) => socket.destroy())\n    })\n  }\n}\n",
    "'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet forceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tforceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tforceColor = 1;\n}\n\nif ('FORCE_COLOR' in env) {\n\tif (env.FORCE_COLOR === 'true') {\n\t\tforceColor = 1;\n\t} else if (env.FORCE_COLOR === 'false') {\n\t\tforceColor = 0;\n\t} else {\n\t\tforceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, streamIsTTY) {\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (hasFlag('color=16m') ||\n\t\thasFlag('color=full') ||\n\t\thasFlag('color=truecolor')) {\n\t\treturn 3;\n\t}\n\n\tif (hasFlag('color=256')) {\n\t\treturn 2;\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream) {\n\tconst level = supportsColor(stream, stream && stream.isTTY);\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: translateLevel(supportsColor(true, tty.isatty(1))),\n\tstderr: translateLevel(supportsColor(true, tty.isatty(2)))\n};\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || from);\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n",
    "module.exports = require('./lib/tunnel');\n",
    "'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;",
    "module.exports = require(\"assert\");",
    "module.exports = require(\"buffer\");",
    "module.exports = require(\"child_process\");",
    "module.exports = require(\"crypto\");",
    "module.exports = require(\"events\");",
    "module.exports = require(\"fs\");",
    "module.exports = require(\"http\");",
    "module.exports = require(\"https\");",
    "module.exports = require(\"net\");",
    "module.exports = require(\"os\");",
    "module.exports = require(\"path\");",
    "module.exports = require(\"stream\");",
    "module.exports = require(\"tls\");",
    "module.exports = require(\"tty\");",
    "module.exports = require(\"url\");",
    "module.exports = require(\"util\");",
    "module.exports = require(\"zlib\");",
    "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n",
    "\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";",
    "",
    "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3109);\n",
    ""
  ],
  "names": [],
  "sourceRoot": ""
}
